{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/aws/aws-cognito/","result":{"data":{"markdownRemark":{"id":"aee406e7-27cb-589f-8df1-657c2427e666","html":"<h1 id=\"cognito\" style=\"position:relative;\"><a href=\"#cognito\" aria-label=\"cognito permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cognito</h1>\n<p>각 어플리케이션(웹 &#x26; 모바일 앱)에서 사용 가능하도록 인증, 권한 부여, 사용자 관리 등을 제공해준다.</p>\n<p>일반적으로 이러한 기능을 구현하려면 인증 정보를 확인하고 세션 등에 저장 또는 <code class=\"language-text\">token</code>발급을 해주는 기능과 해당 데이터 관리 및 <code class=\"language-text\">DB</code>도 구축해야만 하지만 이러한 작업을 하나로 묶어 제공한다.</p>\n<p>Cognito를 사용함으로써 생각하는 장점</p>\n<ol>\n<li>일단 사용자 정보 저장소(<code class=\"language-text\">user pool</code>)에 사용자 정보를 저장 한 뒤, 사용 용도에 맞게 그룹화하여 각 용도에 맞게 분류해서 사용가능</li>\n<li>단순 인증 처리(로그인) 기능만 구현해서 써도 돼고, 추가로 <code class=\"language-text\">identity pool</code>을 구축하여 aws 여러 resources들을 사용 가능한 임시 권한(<code class=\"language-text\">IAM</code>)을 발급하여 사용 가능하다.</li>\n<li>사용자 마이그레이션이 쉽다. 사용자 데이터를 일괄 넣어서 사용해도 돼고, <code class=\"language-text\">cognitor</code>에 사용자 조회 중, 사용자 정보가 없을때 <code class=\"language-text\">trigger</code>를 발생 시켜 사용자 데이터를 넣도록 구성 가능하다.</li>\n</ol>\n<p>단점으로는 가격이 비싸다(월별 활성 <code class=\"language-text\">MAU</code>를 기준으로 가격 책정, <a href=\"https://aws.amazon.com/ko/cognito/pricing/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cognito 요금표</a>). 이게 소규모에선 가격이 정말 저렴하지만 일정 수준 넘어가면 그냥 직접 구축하는게 훨씬 저렴하므로, 소규모의 이벤트용 프로젝트로 빠르게 오픈하고 다시 내리는 형태로 쓰는게 베스트인거 같다.</p>\n<p>사용해본 내용 중, <code class=\"language-text\">Cognito</code>를 통해서 인증 서버와 리소스 서버를 구현해 설명할 것이고 해당 소스는 <a href=\"https://github.com/qweasd147/serverless-boilerplate/tree/master/cognito\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cognito with lambda</a>에서 확인 가능</p>\n<hr>\n<h2 id=\"어플리케이션-전체-구성도\" style=\"position:relative;\"><a href=\"#%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%A0%84%EC%B2%B4-%EA%B5%AC%EC%84%B1%EB%8F%84\" aria-label=\"어플리케이션 전체 구성도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어플리케이션 전체 구성도</h2>\n<p><img src=\"/blog/media/aws/cognito-diagram.jpg\" alt=\"cognito_app\"></p>\n<p>어플리케이션은 총 2개(<code class=\"language-text\">auth-server</code>, <code class=\"language-text\">resource-server</code>)로 나누어 구현하였다.</p>\n<h3 id=\"auth-server\" style=\"position:relative;\"><a href=\"#auth-server\" aria-label=\"auth server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>auth-server</h3>\n<p>사실 이 앱(<code class=\"language-text\">auth-server</code>)가 필요 없기도 하다. 그냥 설정값과 <code class=\"language-text\">trigger</code> 정도만 관리하고 다른 앱(<code class=\"language-text\">front쪽</code>)에서 cognito에서 제공해주는 api를 직접 써도 된다. 하지만 backend 개발자이기도 하고 backend에서 한번 가공한 형태로 하는게 더 커스터마이징이 편할테니까 추가하였다.</p>\n<p><code class=\"language-text\">Auth-Server App Lambda</code>는 <code class=\"language-text\">aws lambda</code>로 구현한 nodejs 서버 이고, <code class=\"language-text\">Cognito</code>는 위에서 설명한것과 같이 일단 <code class=\"language-text\">User DB</code> + 인증 관리 해주는 모듈 정보로 생각해도 충분하다.</p>\n<p>아무튼 중요한건 Cognito에서 특정 조건일때 발생하는 <code class=\"language-text\">Lambda Trigger</code>를 구현해서 추가 할 수도 있는데 프로젝트에선 <code class=\"language-text\">사용자 마이그레이션</code> 항목에 트리거를 추가하였다. 그래서 만약 로그인 시도 중 <code class=\"language-text\">Cognito User Pool</code>에 접근하였는데 해당 사용자 정보가 <code class=\"language-text\">User pool</code>에 없으면 <code class=\"language-text\">Lambda Trigger</code>가 실행된다. 여기서 그냥 사용자 정보가 없다고 처리할지, 아니면 다른곳에 존재하는 사용자 정보를 <code class=\"language-text\">User pool</code>에 추가 후, 원래부터 존재하던 사용자로 처리할지 분기처리가 가능하다.</p>\n<p>구현한 소스는 기존 <code class=\"language-text\">data source</code>가 따로 없으므로, 그냥 요청 이메일 도메인이 <code class=\"language-text\">google</code>이면 사용자 정보를 추가하도록 구성하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>email<span class=\"token operator\">?.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gmail.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//이메일 도메인이 google인 것들만 마이그레이션 허용</span>\nevent<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>userAttributes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>userName<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">email_verified</span><span class=\"token operator\">:</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"temp_name\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nevent<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>finalUserStatus <span class=\"token operator\">=</span> <span class=\"token string\">\"CONFIRMED\"</span><span class=\"token punctuation\">;</span>\nevent<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>messageAction <span class=\"token operator\">=</span> <span class=\"token string\">\"SUPPRESS\"</span><span class=\"token punctuation\">;</span>\n\ncontext<span class=\"token punctuation\">.</span><span class=\"token function\">succeed</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>보통 요청한 <code class=\"language-text\">id</code>, <code class=\"language-text\">password</code> 정보를 event 객체에서 꺼내 다른곳에 존재 여부를 확인 후, 마이그레이션을 허용할지 판별한다.</p>\n<h4 id=\"api\" style=\"position:relative;\"><a href=\"#api\" aria-label=\"api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API</h4>\n<ul>\n<li>POST /{stage}/api/user -> 회원가입\n<ul>\n<li>email, name, password 필수</li>\n</ul>\n</li>\n<li>POST /{stage}/api/user/signin -> 로그인(<code class=\"language-text\">token</code>값 반환)\n<ul>\n<li>email, password 필수</li>\n</ul>\n</li>\n<li>GET /{stage}/api/user/signout -> 로그아웃\n<ul>\n<li>요청 해더에 <code class=\"language-text\">access token</code>이 존재해야함</li>\n</ul>\n</li>\n<li>GET /{stage}/api/user/me -> 내 정보 보기(<code class=\"language-text\">jwt 토큰 기반</code>)\n<ul>\n<li>요청 해더에 <code class=\"language-text\">access token</code>이 존재해야함</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"resource-server\" style=\"position:relative;\"><a href=\"#resource-server\" aria-label=\"resource server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resource-Server</h3>\n<p>리소스 서버는 <code class=\"language-text\">Auth-Server</code>에서 발급 받은 토큰으로 resource를 사용하는 목적의 서버이다.</p>\n<p>전체 흐름은 <code class=\"language-text\">user request</code>-><code class=\"language-text\">API Gateway</code>-><code class=\"language-text\">Lambda</code>순서로 진행되지만 인증이 확인 안된 <code class=\"language-text\">request</code>는 모두 <code class=\"language-text\">API Gateway</code>에서 차단해 버린다. <code class=\"language-text\">API Gateway Authorizer</code>를 추가하여 연결된 API는 인증되지 않은 Request를 전부 차단하므로 <code class=\"language-text\">Lambda</code>에 도달한 Request는 모두 인증된 Request를 보장하게 된다.</p>\n<p>이떄 중요한 점은 요청 해더에 <code class=\"language-text\">Authorization : Bearer {token}</code>형태로 요청 해야하고, 이때 토큰값은 <code class=\"language-text\">access token</code>이 아니라 <code class=\"language-text\">id token</code>이어야 한다. 이 부분은 커스터 마이징이 가능할것 같지만 일단 기본 셋팅은 <code class=\"language-text\">id token</code>을 사용해야 한다.</p>\n<p>당장 <code class=\"language-text\">id token</code>을 사용해도 <code class=\"language-text\">API Gateway</code>로 가니까 별 상관 없을꺼 같지만 <code class=\"language-text\">access token</code>을 사용 하도록 변경하는건 필요하긴 할꺼 같다.</p>\n<h4 id=\"api-1\" style=\"position:relative;\"><a href=\"#api-1\" aria-label=\"api 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API</h4>\n<ul>\n<li>GET /{stage}/api/users/me -> 토큰값으로 요청한 사용자 정보를 파싱하여 반환\n<ul>\n<li>요청 헤더에 <code class=\"language-text\">id token</code>값이 존재해야함</li>\n</ul>\n</li>\n</ul>\n<p>일단 람다 어플리케이션에선 인증된 <code class=\"language-text\">Request</code>라고 보장해주는거 까진 좋은데 토큰 파싱은 아무래도 직접 해야하는거 같다. 그래서 리소스 서버엔 <a href=\"https://docs.aws.amazon.com/ko_kr/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-verifying-a-jwt.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AWS JWT 토큰 검증 가이드</a>에서 설명한 방법으로 토큰값을 검증 &#x26; 파싱해주는 내용이 포함되어 있다.</p>","fields":{"slug":"/posts/aws/aws-cognito/","tagSlugs":["/tag/aws/","/tag/cognito/","/tag/oauth/"]},"frontmatter":{"date":"2020-08-03T02:09:50.508Z","description":"cognito를 써서 독립적인 인증서버 구축 & user pool로 data 마이그레이션 구현","tags":["aws","cognito","oauth"],"title":"AWS - Cognito","socialImage":null}}},"pageContext":{"slug":"/posts/aws/aws-cognito/"}},"staticQueryHashes":["1828819329","251939775","2839666046","401334301"]}