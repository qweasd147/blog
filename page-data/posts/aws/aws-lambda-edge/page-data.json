{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/aws/aws-lambda-edge/","result":{"data":{"markdownRemark":{"id":"17240bb1-3862-505b-ae32-d1f7d6df8fed","html":"<h2 id=\"lambdaedge\" style=\"position:relative;\"><a href=\"#lambdaedge\" aria-label=\"lambdaedge permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lambda@Edge</h2>\n<p><code class=\"language-text\">CloudFront</code>는 CDN역할만 해도 좋은 퍼포먼스를 보여주지만 추가로 Lambda와 함께 사용이 가능하다.</p>\n<p><code class=\"language-text\">CloudFront</code>로 요청 전후를 가로채 <code class=\"language-text\">Lambda</code>함수 내에서 <code class=\"language-text\">Request</code>&#x26;<code class=\"language-text\">Response</code> 객체, 상태코드 등을 바꾸거나 아니면 다른곳으로 redirect도 가능하다.</p>\n<p><img src=\"/blog/media/aws/cf/edge/lamda_edge_trigger.png\" alt=\"img1\">\n<a href=\"https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/lambda-edge.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aws 공식문서 설명</a></p>\n<p>위 이미지 및 문서에 보이는데로 총 4곳에 <code class=\"language-text\">Lambda</code> 함수 연결이 가능하다.</p>\n<ul>\n<li>CloudFront가 최종 사용자로부터 요청을 수신한 후(최종 사용자 요청)</li>\n<li>CloudFront가 오리진에 요청을 전달하기 전(오리진 요청)</li>\n<li>CloudFront가 오리진으로부터 응답을 수신한 후(오리진 응답)</li>\n<li>CloudFront가 최종 사용자에게 응답을 전달하기 전(최종 사용자 응답)</li>\n</ul>\n<p>이런식으로 단순 cdn, 라우팅 역할만 하다가 Lambda로 전후처리가 가능하면서 활용도가 많이 높아졌다.</p>\n<h2 id=\"주의점\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98%EC%A0%90\" aria-label=\"주의점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의점</h2>\n<ol>\n<li>\n<p>연결 할 함수는 버지니아 북부 리전에 배포</p>\n<blockquote>\n<p><code class=\"language-text\">CloudFront</code>에 적용할 Lambda 함수는 <code class=\"language-text\">us-east-1(버지니아 북부)</code> 리전에 배포된 함수만 가능하다. 그럼 추가 의문사항으로 <code class=\"language-text\">CF</code>는 각 엣지로케이션에서 데이터를 가져오는데 정작 Lambda 함수는 특정 리전에서만 실행되면 느려지지 않을까 생각 할수도 있지만, 요청이 들어오면 가장 가까운 리전으로 함수가 복사된 후 실행되므로 물리적 거리로 인해 느려지는건 고민 안해도 된다. 또한 <code class=\"language-text\">CloudWatch</code>에 쌓이는 로그도 역시 각 함수가 실행된 리전에 쌓이게 된다. 만약 복제되는 걸 직접 확인하고 싶으면 AWS 홈페이지에서 Lambda -> 옵션 창에 <code class=\"language-text\">복제된 함수 표시</code>옵션을 키면 배포는 버지니아 북부에 배포되었지만 다른 리전에도 <code class=\"language-text\">(Replica)</code>표기와 함께 배포되어 있는걸 확인 할 수가 있다.</p>\n</blockquote>\n</li>\n<li>\n<p>항상 실행되는 함수, 결과 값을 캐싱하여 필요할 때만 실행되는 함수</p>\n<blockquote>\n<p>위 이미지를 보면 <code class=\"language-text\">viewer-request</code>, <code class=\"language-text\">viewer-response</code>는 각각 캐싱서버 도착 전, 캐싱서버 응답 후 실행되는 함수이다. 이런건 request마다 매번 실행되는 함수이니까 조심해야한다.(Lambda 함수 비용 폭탄을 맞을 수가 있다). 반대로 <code class=\"language-text\">origin-request</code>, <code class=\"language-text\">origin-response</code>는 캐싱 적중 여부에 따라 실행 될 수도, 안될 수도 있다.</p>\n</blockquote>\n</li>\n<li>\n<p>캐싱</p>\n<blockquote>\n<p><code class=\"language-text\">Lambda@Edge</code>를 구성해도 CDN 기능이 없어지는게 아니다. 위에서 설명한 대로 요청에 따라 결과값을 캐싱하고 응답하게 된다. 여기서 캐싱 키값은 어떤값들을 기준으로 생성되나 생각할 수 있는데, <code class=\"language-text\">uri</code>는 필수도 들어가고 여기에 <code class=\"language-text\">querystring</code>, <code class=\"language-text\">header</code>값을 섞어서 키가 만들어지게 설정 할 수도 있다. 일반적으로 해더값을 추가하면 요청 기기에 따라 다 각각 캐시가 될 수도 있으므로 <code class=\"language-text\">querystring</code>만 사용하여 키가 만들어지도록 설정하다. (<code class=\"language-text\">CF</code>에서 <code class=\"language-text\">Behavior</code> 탭에서 설정이 가능하다.)</p>\n</blockquote>\n</li>\n</ol>\n<p>추가로 제한사항이 쫌 많은데 자세한건 역시 <a href=\"https://docs.aws.amazon.com/ko_kr/AmazonCloudFront/latest/DeveloperGuide/lambda-requirements-limits.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">공식 문서</a>를 한번 읽어보는걸 추천</p>","fields":{"slug":"/posts/aws/aws-lambda-edge/","tagSlugs":["/tag/aws/","/tag/cloudfront/","/tag/cdn/","/tag/lambda/"]},"frontmatter":{"date":"2021-01-14T02:31:18.369Z","description":"Cloud Front, Origin Server 서버 요청 전후로 Lambda 함수 실행","tags":["aws","cloudfront","cdn","lambda"],"title":"AWS - Lambda@Edge","socialImage":null}}},"pageContext":{"slug":"/posts/aws/aws-lambda-edge/"}}}