{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/etc/etc-docker/","result":{"data":{"markdownRemark":{"id":"79a84710-a288-5517-92d4-21c62fd6c3a3","html":"<h1 id=\"docker\" style=\"position:relative;\"><a href=\"#docker\" aria-label=\"docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker</h1>\n<p>컨테이너 환경에서 OS를 가상화</p>\n<h1 id=\"1-장점\" style=\"position:relative;\"><a href=\"#1-%EC%9E%A5%EC%A0%90\" aria-label=\"1 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 장점</h1>\n<p>리눅스 환경에서 서버나 db 아니면 뭐 기타 프로그램 설치 할때 에러나는 케이스를 종종 경험해본 케이스가 있을 것이다.\n<code class=\"language-text\">mac의 home brew</code>나 <code class=\"language-text\">npm</code>을 사용하면 그나마 낫지만 gcc 컴파일 부터 시작해서 <code class=\"language-text\">make</code>, <code class=\"language-text\">make install</code>을 사용해서 설치 시도 중, 실패할때면 그 짜증은 겪어본 사람만 안다.\n일단 하나 성공해도 다른 컴퓨팅 환경에서도 성공한다는 보장도 없고 이런거 3~4개 설치하려면 얼마나 걸릴지 장담할 수도 없다.</p>\n<p>또 하나의 프로그램 설치를 했고 그 프로그램에서 <code class=\"language-text\">80</code>포트를 사용한다고 가정하면 이걸 설치하는데 <code class=\"language-text\">root</code>계정이 필요하고 (major port 사용 시 root 권한 필요) 포트를 바꾸고 싶으면\n해당 소스를 변경해야만 수정이 가능한 경우가 많다. 하지만 <code class=\"language-text\">docker</code>를 사용하면 특정 계정에 <code class=\"language-text\">docker</code> 사용 가능 권한을 주고(이때는 <code class=\"language-text\">root</code> 권한 필요) <code class=\"language-text\">docker</code> 통해 설치하면\nroot 계정 정보가 필요 없고, 외부에서 들어오는 포트를 docker를 통해 내부 컨테이너 포트로 쉽게 포트 포워딩이 가능해서 구지 소스 변경 없이 포트 변경이 가능하다.</p>\n<p>여기까지가 직접 사용해보면서 느낀 <code class=\"language-text\">docker</code>의 장점이고 이론적으로 가상머신과의 차이, 거기서 얻는 컴퓨터 자원의 이득, 네트워크 방식(<code class=\"language-text\">bridge</code>, <code class=\"language-text\">host</code> 등)을 통한 보안 및 컨테이너\n간의 통신 등 정말 많은 이득이 있다(필요 시 다른곳에서 설명)</p>\n<h1 id=\"2-docker-run실행-옵션\" style=\"position:relative;\"><a href=\"#2-docker-run%EC%8B%A4%ED%96%89-%EC%98%B5%EC%85%98\" aria-label=\"2 docker run실행 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. docker run(실행) 옵션</h1>\n<table>\n<thead>\n<tr>\n<th>옵션</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d</td>\n<td>detached mode. 백그라운드 모드</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>호스트와 컨테이너의 포트를 연결(포워딩) <br /> ex) … -p 1234:8080 … 옵션을 주면 1234번 포트로 접속하면 내부 컨테이너의 8080으로 포워딩(연결)하여 준다.</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>호스트와 컨테이너의 디렉토리를 연결(마운트)</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>컨테이너 내에서 사용할 환경변수 설정</td>\n</tr>\n<tr>\n<td>-name</td>\n<td>컨테이너 이름 설정</td>\n</tr>\n<tr>\n<td>-rm</td>\n<td>프로세스 종료 시 컨테이너 자동 제거</td>\n</tr>\n<tr>\n<td>-it</td>\n<td>i(interactive)옵션과 t(pseudo-tty)옵션을 사용하여 bash 쉘 사용</td>\n</tr>\n<tr>\n<td>-link</td>\n<td>컨테이너 연결 [컨테이너명:별칭]</td>\n</tr>\n</tbody>\n</table>\n<p>ex) ubuntu 이미지를 hello 라는 컨테이너로 생성 한 뒤, bash 쉘 실행\n$ docker run -i -t —name hello ubuntu /bin/bash</p>\n<p>ex) testnode 이미지의 0.1 tag를 컨테이너의 3000번 포트와 외부 포트 4000번을 연결함</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ docker run -p 4000:3000 testnode:0.1</code></pre></div>\n<p>ex) httpd 컨테이너를 생성하여 컨테이너의 /usr/local/apache2/htdocs경로와 <code class=\"language-text\">소스 경로</code>를 연결하고</p>\n<p>컨테이너 80포트를 외부포트 3000번과 연결</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ docker run -d -p 3000:80 --name=board-front -v 소스경로:/usr/local/apache2/htdocs httpd</code></pre></div>\n<p>ex base-node:0.1 컨테이너를 생성하여 컨테이너의 /app 경로를 <code class=\"language-text\">소스 경로</code>를 연결하고</p>\n<p>컨테이너 4000번 포트를 외부 포트 4000번과 연결</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ run -d -p 4000:4000 --name=board-api -v 소스경로:/app base-node:0.1</code></pre></div>\n<h1 id=\"3-그외-docker-명령어\" style=\"position:relative;\"><a href=\"#3-%EA%B7%B8%EC%99%B8-docker-%EB%AA%85%EB%A0%B9%EC%96%B4\" aria-label=\"3 그외 docker 명령어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 그외 docker 명령어</h1>\n<h3 id=\"31-docker-inspect\" style=\"position:relative;\"><a href=\"#31-docker-inspect\" aria-label=\"31 docker inspect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 docker inspect</h3>\n<p>기본 $ docker inspect [옵션][컨테이너 명] 으로 실행되며 컨테이너 정보를 보여준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ docker run -d --name test-httpd httpd\n\n$ docker inspect test-httpd</code></pre></div>\n<h3 id=\"32-docker-exec\" style=\"position:relative;\"><a href=\"#32-docker-exec\" aria-label=\"32 docker exec permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 docker exec</h3>\n<p>기본 $ docker exec [옵션][컨테이너명] [명령어] 으로 해당 컨테이너의 명령어를 날린다.</p>\n<p>ex) <code class=\"language-text\">abc</code> 컨테이너에 접근(/bin/bash 명령어 사용).\n참고로 옵션은 STDIN 표준 입출력으로(i) 가상 tty (pseudo-TTY,t) 를 통해 접속하겠다는 의미이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker exec -it abc /bin/bash</code></pre></div>\n<p>주의! 참고로 해당 컨테이너에 접속하여 여러 작업을 하는건 추천하지 않는다. 이유는 히스토리 관리가 큰데</p>\n<p>docker를 사용하는 이유 중 하나가 여러 컨테이너를 마구마구 찍어내서 생산성을 높이는것을 목표로 하는데 직접 접근하여</p>\n<p>파일을 수정하면 각 컨테이너를 만들때 마다 그러한 작업이 요구될 수도 있기 때문이다. 따라서 파일 수정등이 목적이라면</p>\n<p>Dockerfile을 사용하여 수정하는것을 추천한다.</p>\n<h1 id=\"4-docker-compose\" style=\"position:relative;\"><a href=\"#4-docker-compose\" aria-label=\"4 docker compose permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. docker compose</h1>\n<h3 id=\"41-docker와-docker-compose-차이점\" style=\"position:relative;\"><a href=\"#41-docker%EC%99%80-docker-compose-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"41 docker와 docker compose 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1 docker와 docker compose 차이점</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker compose\nDocker Compose는 컨테이너 여럿을 띄우는 도커 애플리케이션을 정의하고 실행하는 도구(Tool for defining and running multi-container Docker applications)\n컨테이너를 여러개 띄울 시, 순서대로 컨테이너를 띄울 수 있고, run 할때 옵션들을 미리 정의할수도 있다.</code></pre></div>\n<table>\n<thead>\n<tr>\n<th>docker</th>\n<th>docker-compose</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Dockerfile</td>\n<td>Dockerfile-dev</td>\n<td>서버 구성을 문서화 <br /> ex) 클래스 선언</td>\n</tr>\n<tr>\n<td>docker build</td>\n<td>docker-compose build</td>\n<td>도커 이미지 만들기 <br /> ex) 클래스 선언을 어플리케이션에 로드</td>\n</tr>\n<tr>\n<td>docker run (+@ 옵션들)</td>\n<td>docker-compose.yml</td>\n<td>이미지에 붙이는 장식들. <br /> ex) 인스턴스의 변수들</td>\n</tr>\n<tr>\n<td>docker run</td>\n<td>docker-compose up</td>\n<td>장식 붙은 이미지를 실제로 실행 <br /> ex) 인스턴스 생성</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"5-발생했던-문제점들\" style=\"position:relative;\"><a href=\"#5-%EB%B0%9C%EC%83%9D%ED%96%88%EB%8D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90%EB%93%A4\" aria-label=\"5 발생했던 문제점들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 발생했던 문제점들</h1>\n<h3 id=\"51-docker-chain이-제대로-설정x\" style=\"position:relative;\"><a href=\"#51-docker-chain%EC%9D%B4-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%84%A4%EC%A0%95x\" aria-label=\"51 docker chain이 제대로 설정x permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1 docker chain이 제대로 설정x</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">~(생략) -i docker0: iptables: No chain/target/match by that name. (exit status 1)).</code></pre></div>\n<p>docker 컨테이너를 올릴 때 iptables에 docker chain이 없을 때 발생. 맨 처음 docker를 실행 할 때 발생하였는데 정확한</p>\n<p>원인은 모르겠음…</p>\n<h4 id=\"해결책\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0%EC%B1%85\" aria-label=\"해결책 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결책</h4>\n<p>수동으로 docker chain을 iptables에 등록한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ iptables -t filter -N DOCKER\n$ iptables -t nat -N DOCKER</code></pre></div>\n<p>or</p>\n<p>docker 서비스를 재시작 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ service docker stop\n$ service docker start</code></pre></div>\n<h1 id=\"6-참고\" style=\"position:relative;\"><a href=\"#6-%EC%B0%B8%EA%B3%A0\" aria-label=\"6 참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 참고</h1>\n<h4 id=\"docker-file을-써서-linux위에-centos나-ubuntu-설치-시-guest-os가-설치-되는건지\" style=\"position:relative;\"><a href=\"#docker-file%EC%9D%84-%EC%8D%A8%EC%84%9C-linux%EC%9C%84%EC%97%90-centos%EB%82%98-ubuntu-%EC%84%A4%EC%B9%98-%EC%8B%9C-guest-os%EA%B0%80-%EC%84%A4%EC%B9%98-%EB%90%98%EB%8A%94%EA%B1%B4%EC%A7%80\" aria-label=\"docker file을 써서 linux위에 centos나 ubuntu 설치 시 guest os가 설치 되는건지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker file을 써서 Linux위에 Centos나 Ubuntu 설치 시 Guest OS가 설치 되는건지</h4>\n<blockquote>\n<p>X. Host OS(Linux)와 <code class=\"language-text\">CentoOS</code>, <code class=\"language-text\">Ubuntu</code> 등의 다른 부분(diff)만 따로 패키징하여 결과적으로 훨씬 가볍다.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.ibm.com/kr/cloud/2019/02/01/easy_container_kubernetes/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.ibm.com/kr/cloud/2019/02/01/easy_container_kubernetes/</a></li>\n</ul>\n<h4 id=\"도커-무작정-따라하기책\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EC%BB%A4-%EB%AC%B4%EC%9E%91%EC%A0%95-%EB%94%B0%EB%9D%BC%ED%95%98%EA%B8%B0%EC%B1%85\" aria-label=\"도커 무작정 따라하기책 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도커 무작정 따라하기(책)</h4>\n<p><a href=\"http://pyrasis.com/docker/2015/02/09/docker-for-dummies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://pyrasis.com/docker/2015/02/09/docker-for-dummies</a></p>\n<h4 id=\"하루만에-배우는-도커책\" style=\"position:relative;\"><a href=\"#%ED%95%98%EB%A3%A8%EB%A7%8C%EC%97%90-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8F%84%EC%BB%A4%EC%B1%85\" aria-label=\"하루만에 배우는 도커책 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하루만에 배우는 도커(책)</h4>\n<p><a href=\"http://www.hanbit.co.kr/store/books/look.php?p_code=E7149016842\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.hanbit.co.kr/store/books/look.php?p_code=E7149016842</a></p>\n<h4 id=\"인터넷-클라우드에서-도커-체험\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%EB%84%B7-%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C%EC%97%90%EC%84%9C-%EB%8F%84%EC%BB%A4-%EC%B2%B4%ED%97%98\" aria-label=\"인터넷 클라우드에서 도커 체험 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터넷 클라우드에서 도커 체험</h4>\n<p><a href=\"https://labs.play-with-docker.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://labs.play-with-docker.com/</a></p>\n<h4 id=\"docker-설명블로그\" style=\"position:relative;\"><a href=\"#docker-%EC%84%A4%EB%AA%85%EB%B8%94%EB%A1%9C%EA%B7%B8\" aria-label=\"docker 설명블로그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>docker 설명(블로그)</h4>\n<ul>\n<li><a href=\"http://raccoonyy.github.io/docker-usages-for-dev-environment-setup/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://raccoonyy.github.io/docker-usages-for-dev-environment-setup/</a></li>\n<li><a href=\"https://blog.nacyot.com/articles/2014-01-27-easy-deploy-with-docker/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.nacyot.com/articles/2014-01-27-easy-deploy-with-docker/</a></li>\n<li><a href=\"http://programmingsummaries.tistory.com/392?category=695325\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://programmingsummaries.tistory.com/392?category=695325</a></li>\n</ul>","fields":{"slug":"/posts/etc/etc-docker/","tagSlugs":["/tag/docker/","/tag/devops/","/tag/infra/"]},"frontmatter":{"date":"2020-06-10T00:40:53.901Z","description":"배포 환경을 쉽게 구축하고 서버 확장을 유연하게 하고 싶을때 & 컴퓨터 리소스를 효율적으로 사용하고 싶을 때","tags":["docker","devOps","infra"],"title":"Docker - 기본","socialImage":null}}},"pageContext":{"slug":"/posts/etc/etc-docker/"}},"staticQueryHashes":["251939775","357378587","401334301"]}