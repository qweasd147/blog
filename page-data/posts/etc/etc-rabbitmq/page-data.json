{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/etc/etc-rabbitmq/","result":{"data":{"markdownRemark":{"id":"3c05ce54-78fb-5d49-a246-6e052a033ac2","html":"<h1 id=\"rabbitmq\" style=\"position:relative;\"><a href=\"#rabbitmq\" aria-label=\"rabbitmq permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RabbitMQ.</h1>\n<p>메세지 큐 중 하나로 대표적으로 kafka, rabbitmq가 있지만 여기선 rabbitmq 위주로 설명할 예정</p>\n<p>여기서 설명할 내용 및 샘플은 <a href=\"https://github.com/qweasd147/StudyNote/tree/master/springboot/rabbitmq\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rabbitmq-sample</a> 여기서 확인 가능</p>\n<h1 id=\"1-메세지-큐\" style=\"position:relative;\"><a href=\"#1-%EB%A9%94%EC%84%B8%EC%A7%80-%ED%81%90\" aria-label=\"1 메세지 큐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 메세지 큐</h1>\n<p>여러 어플리케이션에서 메세지를 주고 받는 시스템. 간단히 설명하면 일종의 DB를 외부에 두고 여러 어플리케이션에서 해당 DB에 데이터를 교환하는 시스템이다.\n일종의 DB라고 설명했지만 DB와 큰 차이점은 각 메세지를 주고받는데 목적이 있고, 내부 처리 방식은 전혀 다른 점이다.\n메세지 큐를 사용할 수도 있는 곳을 예를 들면 대용량 알림 시스템이다. 예를 들어 10만명의 사용자한테 이메일을 보내야 한다고 가정할때 메세지 큐를 사용 안한다면 대략적으로 다음과 같은 플로우를 거쳐야 할 것이다.</p>\n<ol>\n<li>DB에서 사용자 정보 조회 및 변수에 저장</li>\n<li>이메일 대상 필터링(validation 포함)</li>\n<li>이메일 발송</li>\n</ol>\n<p>이러한 작업은 주기적으로 cron이 돌면서 처리해야할 정보가 있나 체크도 해야할 것이며(감시해야하는 프로세스가 주기적으로 돌고 있어야됨), <code class=\"language-text\">3. 이메일 발송</code>은 뭐 자바를 기준으로 <code class=\"language-text\">java 8의 Stream</code>기반으로 처리하던가 푸시 기반인 <code class=\"language-text\">RxJava</code>등을 사용 할 수도 있을 것이다. 하지만 결국 문제는 이 모든 작업이 하나의 어플리케이션에서 수행이 된다는 점이다.</p>\n<p>만약 처리중 예상하지 못한 에러가 발생한다면? 뭐 <code class=\"language-text\">RxJava</code>에서는 알림을 받을 수도 있을 것이다. 그럼 만약 너무 많은 데이터를 어플리케이션에 담고 있어서 처리 중간에 그냥 어플이 죽어버렸다면? 어플이야 다시 복구 하면 되지만 중간에 처리되던 과정들은 통째로 다 날라가게 된다. 2번 과정을 거의다 끝내고 3번이 남았는데 다시 1번 부터 수행해야 할것이고, 더 큰 문제는 많은 사용자들이 메일을 중복해서 받을 수도 있다는 점이다.</p>\n<p>이러한 점을 봤을때 메세지큐를 사용함으로써 생기는 이득은 아래와 같다.</p>\n<ol>\n<li>기본적으로 구독형 방식(폴링 방식x)</li>\n<li>메세지(ex. 처리해야할 정보)를 외부에 저장</li>\n<li>일단 큐에 담고 비동기로 처리 가능</li>\n<li>여러 어플리케이션에서 처리 또는 consumer 개수 증가 등의 확장이 쉬움(분산 처리 가능)</li>\n<li>재처리 및 실패 처리가 쉬움</li>\n</ol>\n<h1 id=\"2-기본-용어\" style=\"position:relative;\"><a href=\"#2-%EA%B8%B0%EB%B3%B8-%EC%9A%A9%EC%96%B4\" aria-label=\"2 기본 용어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 기본 용어</h1>\n<h3 id=\"21-queue\" style=\"position:relative;\"><a href=\"#21-queue\" aria-label=\"21 queue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 Queue</h3>\n<p>메세지를 담는 큐</p>\n<h3 id=\"22-exchange\" style=\"position:relative;\"><a href=\"#22-exchange\" aria-label=\"22 exchange permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 Exchange</h3>\n<p>메세지를 받아 어느 큐로 옮길지 정한다. Exchange 종류에 따라 똑같은 <code class=\"language-text\">Routing Key</code>라도 다른 큐에 담길 수 있다.</p>\n<h3 id=\"23-binding\" style=\"position:relative;\"><a href=\"#23-binding\" aria-label=\"23 binding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3 Binding</h3>\n<p>exchange와 queue를 연동(실질적인 Routing key 패턴과 exchange를 연동)</p>\n<p><strong>참고</strong> 메세지는 생성 후 바로 큐로 옮기는게 아닌, <code class=\"language-text\">Exchange</code>를 한번 거쳐서 전달된다. <code class=\"language-text\">Exchange</code> 종류와 <code class=\"language-text\">Binding</code>에 따라 큐가 결정 &#x26; 전달한다.</p>\n<h3 id=\"24-routing-key\" style=\"position:relative;\"><a href=\"#24-routing-key\" aria-label=\"24 routing key permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.4 Routing Key</h3>\n<p>가상 주소로, 라우팅 시 필요한 key값이다.\n예를 들어 ’<code class=\"language-text\">Routing Key</code>값이 <code class=\"language-text\">r1</code>이면 <code class=\"language-text\">Exchange1</code>로 가라’ 이런식으로 라우팅 하는데 사용</p>\n<h1 id=\"추가-설명-예정사항todo\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80-%EC%84%A4%EB%AA%85-%EC%98%88%EC%A0%95%EC%82%AC%ED%95%ADtodo\" aria-label=\"추가 설명 예정사항todo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가 설명 예정사항(TODO)</h1>\n<ol>\n<li>Exchange 종류 및 routing</li>\n<li>DLX(+실패 처리 전략)</li>\n</ol>","fields":{"slug":"/posts/etc/etc-rabbitmq/","tagSlugs":["/tag/messagequeue/","/tag/mq/","/tag/rabbitmq/"]},"frontmatter":{"date":"2020-05-26T00:36:37.672Z","description":"메세지 큐를 사용하는 이유 및 사용 방법. with RabbitMQ","tags":["messagequeue","mq","rabbitmq"],"title":"RabbitMQ","socialImage":null}}},"pageContext":{"slug":"/posts/etc/etc-rabbitmq/"}}}