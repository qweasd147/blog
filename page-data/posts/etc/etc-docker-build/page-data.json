{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/etc/etc-docker-build/","result":{"data":{"markdownRemark":{"id":"38688cd3-ec80-5d00-bd6b-86036d71f06e","html":"<h1 id=\"docker-image-구조\" style=\"position:relative;\"><a href=\"#docker-image-%EA%B5%AC%EC%A1%B0\" aria-label=\"docker image 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker image 구조</h1>\n<p>도커 이미지의 구조는 여러 레이어의 순차적으로 겹쳐져 하나의 이미지를 구성한다. 가장 기본이 되는 layer는 파일 시스템으로 뭐 <code class=\"language-text\">docker</code>가 관리하니까 개발자의 관리포인트는 벗어나 생략하고,\n예를들어 <code class=\"language-text\">Spring boot</code> 어플리케이션을 <code class=\"language-text\">Dockerizing</code>하여 실행 시킨다고 할때 일단 먼저 빌드 환경이 제공되야 할것이다. <code class=\"language-text\">gradle wrapper</code>를 안쓴다면 <code class=\"language-text\">gradle</code>, <code class=\"language-text\">jdk</code>가\n설치되어 있어야 하고 그다음 빌드할 대상(소스 파일들), 마지막으로 빌드된 산출물 or <code class=\"language-text\">jar 파일</code>을 통해 최종적으로 어플리케이션이 실행되게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">FROM openjdk:8-jdk-slim\n\nRUN mkdir -p /app/java\nWORKDIR /app/java\n\nCOPY . .\n\nRUN ./gradlew build\n\nCMD [&quot;java&quot;, &quot;-jar&quot;, &quot;build/libs/auth-server-1.0.0.jar&quot;]</code></pre></div>\n<p>위의 Dockerfile은 가장 기본적인 <code class=\"language-text\">spring boot</code> 어플리케이션을 빌드하는 형태가 된다(일부 커스터 마이징 설명은 생략). 해당 파일을 일단 <code class=\"language-text\">docker image</code>로 빌드해보고 layer 구조를 확인해보고 싶으면</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ docker build -t auth-no-cache:1.0.0 .\n$ docker history auth-no-cache:1.0.0</code></pre></div>\n<p>위와 같이 build 후 history 명령을 통해 구조를 확인할 수가 있다. 밑의 내용은 로컬환경에서 빌드 후, 출력되는 히스토리 내용</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT\n71ed18b7025d        29 minutes ago      /bin/sh -c #(nop)  CMD [\"java\" \"-jar\" \"-serv…   0B\n1d2f52d9e713        29 minutes ago      /bin/sh -c ./gradlew build -x test              397MB\n259562f0edd3        31 minutes ago      /bin/sh -c #(nop) COPY dir:f0800f876ec82b2e3…   113MB\n2cd82ea610e3        31 minutes ago      /bin/sh -c #(nop) WORKDIR /app/java             0B\n4f44aa4209bc        31 minutes ago      /bin/sh -c mkdir -p /app/java                   0B\n41fd53971008        7 months ago        /bin/sh -c set -eux;   dpkgArch=\"$(dpkg --pr…   206MB\n&lt;missing>           7 months ago        /bin/sh -c #(nop)  ENV JAVA_URL_VERSION=8u23…   0B\n&lt;missing>           7 months ago        /bin/sh -c #(nop)  ENV JAVA_BASE_URL=https:/…   0B\n&lt;missing>           7 months ago        /bin/sh -c #(nop)  ENV JAVA_VERSION=8u232       0B\n&lt;missing>           7 months ago        /bin/sh -c { echo '#/bin/sh'; echo 'echo \"$J…   27B\n&lt;missing>           7 months ago        /bin/sh -c #(nop)  ENV PATH=/usr/local/openj…   0B\n&lt;missing>           7 months ago        /bin/sh -c #(nop)  ENV JAVA_HOME=/usr/local/…   0B\n&lt;missing>           7 months ago        /bin/sh -c #(nop)  ENV LANG=C.UTF-8             0B\n&lt;missing>           7 months ago        /bin/sh -c set -eux;  apt-get update;  apt-g…   8.79MB\n&lt;missing>           7 months ago        /bin/sh -c #(nop)  CMD [\"bash\"]                 0B\n&lt;missing>           7 months ago        /bin/sh -c #(nop) ADD file:bc8179c87c8dbb3d9…   69.2MB</code></pre></div>\n<p>설명하자면 밑에서부터 이미지 레이어가 하나씩 쌓여 최종적으로 하나의 이미지를 구성하고 있다. <code class=\"language-text\">CREATED BY</code>를 살펴보면 명령어가 실행되는 단위로 레이어가 생성되고 있으며, 참고사항으로 각 레이어는 이전 레이어 + 실행 컨텍스트에 종속 적이다.(필요 시 뒤에서 설명)</p>\n<p>이렇게 레이어로 나누어 관리되면서 생기는 장점이 각 명령어가 실행되는 환경(컨텍스트)이 같으면 새롭게 레이어를 빌드(생성)하는게 아니라 기존 레이어를 재사용해서 빌드 시간을 단축할 수가 있다.</p>\n<p>따라서 기존 빌드된 레이어를 재사용을 유도(캐싱)하는 것이 docker build cache의 핵심이다.</p>\n<p><strong>참고</strong></p>\n<blockquote>\n<p><code class=\"language-text\">missing</code>은 다른 시스템에서 빌드되어 로컬에서 정보가 없어 재사용이 불가능하다는걸 나타낸다</p>\n</blockquote>\n<h1 id=\"1-spring-boot-application-dockerizing\" style=\"position:relative;\"><a href=\"#1-spring-boot-application-dockerizing\" aria-label=\"1 spring boot application dockerizing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Spring boot application Dockerizing</h1>\n<h2 id=\"11-기존-dockerfile의-문제점\" style=\"position:relative;\"><a href=\"#11-%EA%B8%B0%EC%A1%B4-dockerfile%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"11 기존 dockerfile의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1 기존 Dockerfile의 문제점</h2>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">FROM openjdk:8-jdk-slim\n\nRUN mkdir -p /app/java\nWORKDIR /app/java\n\nCOPY . .\n\nRUN ./gradlew build\n\nCMD [&quot;java&quot;, &quot;-jar&quot;, &quot;build/libs/auth-server-1.0.0.jar&quot;]</code></pre></div>\n<p>위에서 예를 들어 설명한 <code class=\"language-text\">Dockerfile</code>로 보이는 개선 사항이 2가지가 존재한다.</p>\n<h3 id=\"빌드-캐시-적용-x\" style=\"position:relative;\"><a href=\"#%EB%B9%8C%EB%93%9C-%EC%BA%90%EC%8B%9C-%EC%A0%81%EC%9A%A9-x\" aria-label=\"빌드 캐시 적용 x permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빌드 캐시 적용 x</h3>\n<p>작업을 할때마다 위 <code class=\"language-text\">Dockerfile</code>로 빌드하면 딱 <code class=\"language-text\">WORKDIR</code> 지정하는 부분까지만 이미지 레이어를 재사용하고 그 이후에는 항상 새로운 이미지 레이어를 생성한다.\n그 이유는 <code class=\"language-text\">WORKDIR</code>까진 항상 똑같은 과정이니까 레이어 재사용이 가능하지만 소스를 <code class=\"language-text\">COPY</code>하는 과정에서 기존 소스와 다르다면 <code class=\"language-text\">COPY</code> 하는 결과가 달라지게 된다.\n결과가 다르면 작업 환경도 다르므로 캐시 적용이 아닌 새로운 이미지 레이어 생성 작업을 시작하게 된다. 그래서 결과적으로 항상 빌드할때마다 캐싱 효과는 없다.</p>\n<p>일단 어느 이미지 레이어를 캐싱 해야할지 고민해봐야한다. 일반적으로 어플리케이션을 개발하면서 연관 라이브러리의 변동은 많지는 않다. 그래서 연관 <code class=\"language-text\">dependencies</code>를 다운로드 하는 부분, 소스 파일을 컴파일 하는 부분 이렇게 2단계로 나눈다면 적어도 <code class=\"language-text\">dependencies</code>를 다운로드하는데 걸리는 시간만큼은 줄일 수가 있다.</p>\n<p>소스 파일도 도메인 별로 분리해서 각각 따로 빌드한다면 시간을 아낄수 있을진 몰라도 각 도메인 사이 의존도에따라 빌드 시 영향을 미칠수가 있으므로 그냥 pass</p>\n<h3 id=\"최종-이미지에-불필요한-내용이-있다\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%A2%85-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%97%90-%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EB%82%B4%EC%9A%A9%EC%9D%B4-%EC%9E%88%EB%8B%A4\" aria-label=\"최종 이미지에 불필요한 내용이 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최종 이미지에 불필요한 내용이 있다.</h3>\n<p>소스파일을 실행시키는데 구지 <code class=\"language-text\">jdk</code>환경까진 필요없다. 또 이미지 안에 실행 시키는데 필요없는 소스 파일들도 함께 포함되어 있어 불필요한 용량을 차지하고 있다.</p>\n<p><code class=\"language-text\">docker</code>에서 지원하는 <code class=\"language-text\">multi stage</code>로 구성해서 빌드환경과 실행환경을 나누고, 실행환경은 <code class=\"language-text\">jdk</code>가 아닌 <code class=\"language-text\">jre</code>, 전체 소스 파일이 아닌 빌드된 결과물만 가진다면 많은 용량을 줄일수가 있다.</p>\n<h2 id=\"12-docker-file-개선\" style=\"position:relative;\"><a href=\"#12-docker-file-%EA%B0%9C%EC%84%A0\" aria-label=\"12 docker file 개선 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2 Docker file 개선</h2>\n<p><strong>주의!</strong>\n<code class=\"language-text\">Spring boot</code> 어플리케이션 내에서 설정을 변경하여 기본 빌드 후, jar파일을 압축 분리하여 불필요한 소스파일을 제거하도록 변경하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">FROM openjdk:8-jdk-slim as builder\n\nENV APP_HOME=/app/java\nRUN mkdir -p $APP_HOME\nWORKDIR $APP_HOME\n\nCOPY build.gradle .\nCOPY settings.gradle .\nCOPY gradlew .\nCOPY gradlew.bat .\nCOPY gradle .\nRUN ./gradlew build || return 0\n\nCOPY . .\nRUN ./gradlew build\n\nFROM openjdk:8-jre-slim\n\nRUN mkdir -p /app/java\nWORKDIR /app/java\n\nCOPY --from=builder /app/java/build/unpack/lib BOOT-INF/lib\nCOPY --from=builder /app/java/build/unpack/app .\n\nCMD [&quot;java&quot;, &quot;-Duser.timezone=Asia/Seoul&quot;, &quot;-Dfile.encoding=utf-8&quot;, &quot;org.springframework.boot.loader.JarLauncher&quot;]</code></pre></div>\n<p>우선 첫번째로 빌드환경과 실행환경을 분리하였다.</p>\n<ol>\n<li>\n<p>빌드 시 <code class=\"language-text\">openjdk:8-jdk-slim</code>환경에서 분리 후 실행 시 <code class=\"language-text\">openjdk:8-jre-slim</code> 환경에서 실행하도록 분리하였다.</p>\n<blockquote>\n<p>실행 시 <code class=\"language-text\">docker container</code>에 jdk는 불필요하기 때문이다.</p>\n</blockquote>\n</li>\n<li>\n<p>소스를 COPY 하기 전, 연관 dependencies 다운로드 유도</p>\n<blockquote>\n<p><code class=\"language-text\">RUN ./gradlew build || return 0</code> 이 명령어가 실행 시 소스 파일이 없기 때문에 실패할 것이다. 실패 하더라도 계속 진행하기 위해 <code class=\"language-text\">return 0</code>를 통해 억지로 스크립트를 진행 시킨다.\n이렇게 하는 이유는 연관 <code class=\"language-text\">라이브러리를 미리 다운로드 받는 이미지 레어어</code>, <code class=\"language-text\">소스 파일을 빌드하는 이미지 레이어</code>를 분리하기 위해서 이다. 이렇게 하면 <code class=\"language-text\">라이브러리를 미리 다운로드 받는 이미지 레어어</code>는\n레이어 캐시가 적용되기 떄문이다.</p>\n</blockquote>\n</li>\n</ol>\n<p>이런 작업을 한 이후에 첫 도커 빌드를 한 이후, <code class=\"language-text\">build.gradle</code> 파일 변경없이 소스파일만 변경 후 빌드 해보면</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">Step 1/18 : FROM openjdk:8-jdk-slim as builder\n ---&gt; 41fd53971008\nStep 2/18 : ENV APP_HOME=/app/java\n ---&gt; Using cache\n ---&gt; ba835b60d6fe\nStep 3/18 : RUN mkdir -p $APP_HOME\n ---&gt; Using cache\n ---&gt; de95b45175d5\nStep 4/18 : WORKDIR $APP_HOME\n ---&gt; Using cache\n ---&gt; 92cafae54301\nStep 5/18 : COPY build.gradle .\n ---&gt; Using cache\n ---&gt; f86985388e5b\nStep 6/18 : COPY settings.gradle .\n ---&gt; Using cache\n ---&gt; b3deb0b0f8b4\nStep 7/18 : COPY gradlew .\n ---&gt; Using cache\n ---&gt; d52fb4bffbb4\nStep 8/18 : COPY gradlew.bat .\n ---&gt; Using cache\n ---&gt; 6b599b33aa5f\nStep 9/18 : COPY gradle .\n ---&gt; Using cache\n ---&gt; ffbc4cb71957\nStep 10/18 : RUN ./gradlew build -x test || return 0\n ---&gt; Using cache\n ---&gt; f2a311fdd13f\nStep 11/18 : COPY . .\n ---&gt; 9717040224fe</code></pre></div>\n<p>이런식으로 <code class=\"language-text\">Using cache</code>를 통해 원하는 부분까지 캐시가 적중됬음을 알수 있다.</p>\n<h2 id=\"2-react-create-react-app\" style=\"position:relative;\"><a href=\"#2-react-create-react-app\" aria-label=\"2 react create react app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. React (create-react-app)</h2>\n<p>여기서 설명한 cra 코드는 <a href=\"https://github.com/qweasd147/StudyNote/tree/master/docker/dockerfile/cra/docker-sample\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docker-cra</a> 여기서 확인 가능</p>\n<p><code class=\"language-text\">react</code>는 <code class=\"language-text\">Spring boot</code> 어플리케이션보단 단순하다. 연관 라이브러리 다운로드를 직접 명령할 수 있기 때문에(<code class=\"language-text\">install</code>) 분리가 쉽다.</p>\n<p>소스 관련해서 레이어 분리 및 캐싱 유도는 아래와 같이 나눈다.</p>\n<ol>\n<li>연관 라이브러리 install(<code class=\"language-text\">npm install</code> or <code class=\"language-text\">yarn install</code>)</li>\n<li>소스 번들링(cra에서 build 스크립트 실행)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">...\n\nRUN mkdir -p /app/react/app\nWORKDIR /app/react/app\n\n# install에 필요한 파일 복사\nCOPY package.json .                    # 1\nCOPY yarn.lock .                       # 2\n\nRUN yarn install --frozen-lockfile     # 3\nCOPY . .                               # 4\nRUN yarn build                         # 5\n\n...</code></pre></div>\n<p><code class=\"language-text\">1~3</code> 과정처럼 소스 전체를 copy하는게 아니라, 연관 <code class=\"language-text\">dependency</code>를 먼저 다운로드 받고, 그 이후에 전체 소스를 카피하고 빌드하는 방법이다(<code class=\"language-text\">4~5</code>).\n이렇게 하면 <code class=\"language-text\">package.json</code>파일이 바뀌지 않는 한, <code class=\"language-text\">1~3</code> 과정이 캐싱되어 다음에 빌드 할땐 더욱 빠르게 빌드가 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">Step 1/15 : FROM node:14.4.0-alpine3.10 as builder\n ---&gt; 85fb5475404d\nStep 2/15 : RUN mkdir -p /app/react/app\n ---&gt; Using cache\n ---&gt; 8bfc805888ec\nStep 3/15 : WORKDIR /app/react/app\n ---&gt; Using cache\n ---&gt; 843e9c640fdf\nStep 4/15 : COPY package.json .\n ---&gt; Using cache\n ---&gt; 7d0537613a99\nStep 5/15 : COPY yarn.lock .\n ---&gt; Using cache\n ---&gt; 29a9f82b6f1b\nStep 6/15 : RUN yarn install --frozen-lockfile\n ---&gt; Using cache\n ---&gt; 55c71c78b339\nStep 7/15 : COPY . .\n ---&gt; b0db46f509a1\nStep 8/15 : RUN yarn build</code></pre></div>\n<p>이런식으로 <code class=\"language-text\">Using cache</code> 된걸 확인 가능하다.</p>","fields":{"slug":"/posts/etc/etc-docker-build/","tagSlugs":["/tag/docker/","/tag/devops/","/tag/infra/"]},"frontmatter":{"date":"2020-06-24T01:14:51.261Z","description":"Docker image 생성 시 레이어 캐시를 유도하여 빠르게 빌드 & 멀티 스테이지로 빌드 환경, 실행환경 분리","tags":["docker","devOps","infra"],"title":"Docker - build cache","socialImage":null}}},"pageContext":{"slug":"/posts/etc/etc-docker-build/"}},"staticQueryHashes":["251939775","2839666046","2891173899","401334301"]}