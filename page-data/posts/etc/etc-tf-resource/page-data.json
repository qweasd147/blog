{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/etc/etc-tf-resource/","result":{"data":{"markdownRemark":{"id":"f2f18d56-7aad-5fcd-b0b2-1b3fd6f0f4ea","html":"<h2 id=\"1-resource\" style=\"position:relative;\"><a href=\"#1-resource\" aria-label=\"1 resource permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Resource</h2>\n<p>실질적으로 aws 서비스(ec2, s3, rds 등등)들을 프로비저닝 할 수 있는 코드들이 된다.</p>\n<p>기본 문법으로는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource \"aws_resource_name\" \"tf_고유_이름\" {\n\n   # TODO : 각 resource에 필요한 arguments 들\n}</code></pre></div>\n<p>주의 할 점으로는 여기서 말하는 <code class=\"language-text\">tf_고유_이름</code>은 테라폼이 내부적으로 리소스를 구분하기 위한 고유 key값이 된다. 즉, 동일한 종류의 <code class=\"language-text\">resource</code> 중에선 유니크 해야하며, 이 이름이 aws에서 표기되는 이름과는 연관이 없다(리소스 종류별로 조금씩 다르긴 하다)</p>\n<p>ec2 인스턴스 한대를 올리기 위한 샘플은 아래와 같이 작성하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource \"aws_instance\" \"test-ec2-instance\" {\n  ami           = \"ami-014009fa4a1467d53\"\n  instance_type = \"t2.micro\"\n}</code></pre></div>\n<p>결국엔 필요한 <code class=\"language-text\">arguments</code>와 각 리소스 간의 특징을 잘 알아야하는데 그 말은 <code class=\"language-text\">terraform</code>만 알면 안되고 <code class=\"language-text\">aws</code>로 잘 해야 한다는 점이다.\naws는 그냥 꾸준히 공부하고 구성에 필요한 내용은 테라폼 공식 문서를 참고해서 구현하면 된다</p>\n<blockquote>\n<p><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://registry.terraform.io/providers/hashicorp/aws/latest/docs</a></p>\n</blockquote>\n<h2 id=\"2-meta-arguments\" style=\"position:relative;\"><a href=\"#2-meta-arguments\" aria-label=\"2 meta arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Meta-Arguments</h2>\n<p>모든 <code class=\"language-text\">Resource</code>에 기본적으로 적용할 수가 있는 <code class=\"language-text\">arguments</code>들이 있다. 바꺼 ㅁㄹ하면 특정 리소스에 종속되지 않고 제공되는 가장 기본적인 <code class=\"language-text\">arguments</code> 이다.</p>\n<h3 id=\"21-depends_on\" style=\"position:relative;\"><a href=\"#21-depends_on\" aria-label=\"21 depends_on permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 depends_on</h3>\n<p>프로비저닝을 위해 각 resource 간에 생성되는 순서를 명시 해야하거나 참조되는 <code class=\"language-text\">attribute</code>를 위해 의존관계를 명시하기 위해 사용된다.</p>\n<p>예를들어 <code class=\"language-text\">ec2</code>와 거기에 붙일 <code class=\"language-text\">EBS</code>가 필요하다면 <code class=\"language-text\">EBS</code>를 먼저 생성하고 <code class=\"language-text\">ec2</code>에 연결을 해 줘야 할것이다. 그럴 때 아래와 같이 사용 할 수가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource \"aws_volume_attachment\" \"ebs_att\" {\n  device_name = \"/dev/sdh\"\n  volume_id   = aws_ebs_volume.ec2_volume.id\n  instance_id = aws_instance.server.id\n\n  depends_on = [\n    aws_ebs_volume.ec2_volume,\n  ]\n}\n\nresource \"aws_instance\" \"server\" {\n  ami               = \"ami-014009fa4a1467d53\"\n  instance_type     = \"t2.micro\"\n  availability_zone = \"ap-northeast-2a\"\n\n  depends_on = [\n    aws_ebs_volume.ec2_volume,\n  ]\n}\n\nresource \"aws_ebs_volume\" \"ec2_volume\" {\n  availability_zone = \"ap-northeast-2a\"\n  size              = 30\n}</code></pre></div>\n<p><code class=\"language-text\">depends_on</code>를 붙여 먼저 생성되어야 하는 resource를 지정 할 수가 있다.</p>\n<blockquote>\n<p>여기선 구지 예시를 들고 싶어서 이런식으로 구성하였지만 <code class=\"language-text\">aws_instance</code>의 arguments로 <code class=\"language-text\">root_block_device</code>가 있으니 이렇게 구지 따로 만들 필요까진 없고, 기본적으로 의존관계를 명시 안해줘도 테라폼이 알아서 필요한 순서대로 생성해준다.</p>\n</blockquote>\n<h3 id=\"22-count\" style=\"position:relative;\"><a href=\"#22-count\" aria-label=\"22 count permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 count</h3>\n<p>동일한 <code class=\"language-text\">resource</code>를 여러개 생성하고 싶을 때 사용한다. 예를들어 동일한 타입의 <code class=\"language-text\">ec2</code>를 여러개 만들고 싶을때 <code class=\"language-text\">resource</code>를 여러번 정의 할 수도 있겠지만 그냥 <code class=\"language-text\">count</code>를 쓰면 더 편하고 쉽게 생성이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource \"aws_instance\" \"server\" {\n  ami               = \"ami-014009fa4a1467d53\"\n  instance_type     = \"t2.micro\"\n  availability_zone = \"ap-northeast-2a\"\n\n  # 똑같은 ec2를 2개 만들어 낸다.\n  count = 2\n  tags = {\n    Name = \"Server ${count.index}\"\n  }\n}</code></pre></div>\n<p>plan또는 apply를 해보면 아래와같이 2개의 인스턴스가 생성되고, 이 리소스의 고유한 key값으로 <code class=\"language-text\">web[0]</code>과 <code class=\"language-text\">web[1]</code>가 생성되는 것도 함께 기억해야한다(count는 index기반으로 키가 생성된다)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">aws_instance.web[0] will be created\n  + resource \"aws_instance\" \"web\" {\n ... argument 정보\n tags = {\n        + \"Name\" = \"Server 0\"\n }\n}\naws_instance.web[1] will be created\n  + resource \"aws_instance\" \"web\" {\n ... argument 정보\n tags = {\n        + \"Name\" = \"Server 1\"\n }\n}\nPlan: 2 to add, 0 to change, 0 to destroy.</code></pre></div>\n<p><code class=\"language-text\">${count.index}</code> 는 고유 index 정보를 의미한다.</p>\n<h3 id=\"23-for_each\" style=\"position:relative;\"><a href=\"#23-for_each\" aria-label=\"23 for_each permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3 for_each</h3>\n<p>목적은 count 와 동일하지만, count는 단순 개수에 대한 정보이지만 for_each 는 map, set 형태의 데이터 구조로 활용이 가능하다.</p>\n<h4 id=\"231-map\" style=\"position:relative;\"><a href=\"#231-map\" aria-label=\"231 map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3.1 Map</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource \"aws_instance\" \"server\" {\n  ami               = \"ami-014009fa4a1467d53\"\n  instance_type     = \"t2.micro\"\n  availability_zone = \"ap-northeast-2a\"\n\n  for_each = {\n    web_server : \"nginx\"\n    was : \"java\"\n  }\n\n  tags = {\n    \"${each.key}\" = each.value\n  }\n}</code></pre></div>\n<p><code class=\"language-text\">plan</code> 결과</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># aws_instance.server[\"nginx\"] will be created\n  + resource \"aws_instance\" \"server\" {\n ... argument 정보\n tags = {\n        + \"web_server\" = \"nginx\"\n }\n# aws_instance.server[\"was\"] will be created\n  + resource \"aws_instance\" \"server\" {\n ... argument 정보\n tags = {\n        + \"was\" = \"java\"\n }\nPlan: 2 to add, 0 to change, 0 to destroy.</code></pre></div>\n<h4 id=\"232-set\" style=\"position:relative;\"><a href=\"#232-set\" aria-label=\"232 set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3.2 Set</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource \"aws_instance\" \"server\" {\n  ami               = \"ami-014009fa4a1467d53\"\n  instance_type     = \"t2.micro\"\n  availability_zone = \"ap-northeast-2a\"\n\n  for_each = toset([\"was\", \"web_server\"])\n  tags = {\n    Name = \"${each.key}\"\n  }\n}</code></pre></div>\n<p>plan 결과</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># aws_instance.server[\"was\"] will be created\n  + resource \"aws_instance\" \"server\" {\n  ... argument 정보\n\n  tags_all                             = {\n    + \"was\" = \"java\"\n  }\n# aws_instance.server[\"web_server\"] will be created\n  + resource \"aws_instance\" \"server\" {\n  ... argument 정보\n  tags_all                             = {\n    + \"web_server\" = \"nginx\"\n  }\nPlan: 2 to add, 0 to change, 0 to destroy.</code></pre></div>\n<p>꼭꼭 기억해야할 점으로 <code class=\"language-text\">count</code>와 다르게 map이나 set으로 구성하면 리소스 구분 키값으로 <code class=\"language-text\">server[\"was\"]</code>, <code class=\"language-text\">server[\"web_server\"]</code> 이런식으로 key값이 그대로 유니크 키로 적용 된다는 점이다.</p>\n<p>또한 각 <code class=\"language-text\">resource</code>에는 <code class=\"language-text\">count</code> or <code class=\"language-text\">for_each</code> 둘 중 하나만 사용이 가능하다.</p>\n<h3 id=\"24-provider\" style=\"position:relative;\"><a href=\"#24-provider\" aria-label=\"24 provider permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.4 provider</h3>\n<p>각 <code class=\"language-text\">resource</code>의 <code class=\"language-text\">provider</code>를 명시적으로 지정 해준다. 예를 들어 다른 <code class=\"language-text\">resource</code>는 다 서울 리전을 쓰는데 특정 <code class=\"language-text\">resource</code>만 도쿄 리전을 사용해야한다던가 할때 유용하다(멀티 리전).</p>\n<h3 id=\"25-lifecycle\" style=\"position:relative;\"><a href=\"#25-lifecycle\" aria-label=\"25 lifecycle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.5 lifecycle</h3>\n<p><code class=\"language-text\">resource</code>의 <code class=\"language-text\">lifecycle</code> 관련된 설정 값으로 <code class=\"language-text\">resource</code>가 생성, 변경, 삭제 관련해서 추가로 지정 된 액션을 하도록 설정 할 수 있다.</p>\n<h4 id=\"251-create_before_destroy\" style=\"position:relative;\"><a href=\"#251-create_before_destroy\" aria-label=\"251 create_before_destroy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.5.1 create_before_destroy</h4>\n<p>기본적으로 <code class=\"language-text\">terraform</code>은 <code class=\"language-text\">resource</code>를 수정 해야하는데 만약 해당 <code class=\"language-text\">resource</code>가 무중단 업데이트가 불가능하다고 판단되면 삭제 후 다시 생성한다.</p>\n<p>예를 들어 만약 보안관련 리소스(<code class=\"language-text\">security group</code> 같은거)를 수정하다가 해당 <code class=\"language-text\">role</code>이 삭제되는 짧은 순간 보안적으로 문제가 생길 수도 있다. 이런상황을 대비하여 이 옵션을 걸어두면 <code class=\"language-text\">old 조건</code>이 삭제 전 <code class=\"language-text\">new 조건</code>이 추가되니까 특별히 문제가 될 것이 없다</p>\n<ol>\n<li>보안 관련 리소스 생성</li>\n<li>해당 resource에 적용</li>\n<li>이전 보안 관련 리소스 삭제</li>\n</ol>\n<p>이런식으로 안전하게 처리가 가능하다.</p>\n<h4 id=\"252-prevent_destroy\" style=\"position:relative;\"><a href=\"#252-prevent_destroy\" aria-label=\"252 prevent_destroy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.5.2 prevent_destroy</h4>\n<p>리소스가 삭제되는 걸 방지한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource \"aws_instance\" \"server\" {\n  ami               = \"ami-014009fa4a1467d53\"\n  instance_type     = \"t2.micro\"\n\n  lifecycle {\n    prevent_destroy = true\n  }\n}</code></pre></div>\n<p>이런식으로 삭제 방지 옵션을 주고 terraform destroy를 하면</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">╷\n│ Error: Instance cannot be destroyed\n│\n│   on main.tf line 44:\n│   44: resource \"aws_instance\" \"server\" {\n│\n│ Resource aws_instance.server has lifecycle.prevent_destroy set, but the plan calls for this resource to be destroyed. To avoid this error\n│ and continue with the plan, either disable lifecycle.prevent_destroy or reduce the scope of the plan using the -target flag.</code></pre></div>\n<p>만약 충분히 다 인지하고 진짜로 resource를 삭제하고 싶으면 <code class=\"language-text\">prevent_destroy</code>옵션을 주석 처리하고 destroy 하면 된다.</p>\n<h4 id=\"253-ignore_changes\" style=\"position:relative;\"><a href=\"#253-ignore_changes\" aria-label=\"253 ignore_changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.5.3 Ignore_changes</h4>\n<p>최초 apply 시에만 적용하고, 그 이후의 변화는 무시할 때 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource \"aws_instance\" \"server\" {\n  ami               = \"ami-014009fa4a1467d53\"\n  instance_type     = \"t2.micro\"\n  availability_zone = \"ap-northeast-2a\"\n\n  lifecycle {\n    ignore_changes = [무시할_argument_목록]\n  }\n}</code></pre></div>\n<h3 id=\"26-provisioner\" style=\"position:relative;\"><a href=\"#26-provisioner\" aria-label=\"26 provisioner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.6 Provisioner</h3>\n<p>해당 리소스에 특정 작업을 수행하기 위해 리소스 로컬 ㄸ는 원격 시스템에서 스크립트를 실행 하고 싶을때 사용된다.</p>\n<h4 id=\"261-local-exec\" style=\"position:relative;\"><a href=\"#261-local-exec\" aria-label=\"261 local exec permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.6.1 local-exec</h4>\n<p>내 로컬에서 실행되는 명령어를 정의한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource \"aws_instance\" \"server\" {\n  ami               = \"ami-014009fa4a1467d53\"\n  instance_type     = \"t2.micro\"\n\n  provisioner \"local-exec\" {\n    command = \"hostname\"\n  }\n}</code></pre></div>\n<p>apply하면 아래처럼 표출된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">aws_instance.server: Creating...\naws_instance.server: Still creating... [10s elapsed]\naws_instance.server: Still creating... [20s elapsed]\naws_instance.server: Provisioning with 'local-exec'...\naws_instance.server (local-exec): Executing: [\"/bin/sh\" \"-c\" \"hostname\"]\naws_instance.server (local-exec): 내꺼_개인_컴퓨터_hostname\naws_instance.server: Creation complete after 27s [id=i-0f2157fc11e6ba5a9]</code></pre></div>\n<p>또한 <code class=\"language-text\">when</code> 옵션을 줘서 실행 주기를 바꿀 수가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">provisioner \"local-exec\" {\n  when    = destroy\n  command = \"echo 'Destroy-time provisioner'\"\n}</code></pre></div>\n<p>이렇게 하면 리소스가 삭제되는 시기에 명령어가 실행된다. 명령어 실행이 실패를 대비한 옵션(<code class=\"language-text\">on_failure</code>) 옵션도 제공해준다.</p>\n<h4 id=\"262-remote-exec\" style=\"position:relative;\"><a href=\"#262-remote-exec\" aria-label=\"262 remote exec permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.6.2 remote-exec</h4>\n<p>해당 리소스에서 직접 실행되는 명령어이다. ec2라면 <code class=\"language-text\">connection</code> 정보를 줘서 ssh로 접근 한 후, 명령어를 실행 시킬 수가 있다.</p>\n<p><strong>주의!</strong></p>\n<blockquote>\n<p>Note: Provisioners should only be used as a last resort. For most common situations there are better alternatives.</p>\n</blockquote>\n<p>왠만하면 쓰지 말라고 한다… <code class=\"language-text\">ec2</code>는 비슷한 역할을 하는 <code class=\"language-text\">user_data</code>라는 옵션도 있으니 필요하면 이 옵션을 사용하면 될 것이다.</p>\n<blockquote>\n<p><a href=\"https://www.terraform.io/language/resources/syntax#meta-arguments\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.terraform.io/language/resources/syntax#meta-arguments</a></p>\n</blockquote>","fields":{"slug":"/posts/etc/etc-tf-resource/","tagSlugs":["/tag/terraform/","/tag/iac/","/tag/aws/"]},"frontmatter":{"date":"2022-04-15T01:28:28.137Z","description":"테라폼으로 provider(aws) 서비스를 사용하려고 할때 + Meta-Arguments","tags":["terraform","iac","aws"],"title":"Terraform - Resource","socialImage":null}}},"pageContext":{"slug":"/posts/etc/etc-tf-resource/"}},"staticQueryHashes":["113262799","1828819329","251939775","401334301"]}