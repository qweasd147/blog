{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/etc/etc-tf-meta_arguments/","result":{"data":{"markdownRemark":{"id":"4bb62835-fb7e-53b1-9059-c814ab57c685","html":"<p>모든 <code class=\"language-text\">Resource</code> 에서 기본적으로 사용 할 수 있는 <code class=\"language-text\">arguments</code> 들로, 바꿔말하면 특정 리소스에 종속 되지 않고 제공되는 기본적인 arguments 이다</p>\n<h2 id=\"1-depends_on\" style=\"position:relative;\"><a href=\"#1-depends_on\" aria-label=\"1 depends_on permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. depends_on</h2>\n<p>각 resource 들의 생성 되는 순서, 의존관계를 명시하기 위해 사용된다.</p>\n<p>예를 들어, <code class=\"language-text\">EC2</code> 와 거기에 붙일 <code class=\"language-text\">EBS</code> 를 생성해야 한다면 먼저 <code class=\"language-text\">EBS</code> 를 먼저 생성하고, <code class=\"language-text\">ec2</code> 에 연결을 해 줘야 할 것이다. 그럴 때 아래와 같이 사용 할 수가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource &quot;aws_volume_attachment&quot; &quot;ebs_att&quot; {\n  device_name = &quot;/dev/sdh&quot;\n  volume_id   = aws_ebs_volume.ec2_volume.id\n  instance_id = aws_instance.server.id\n\n  depends_on = [\n    aws_ebs_volume.ec2_volume,\n  ]\n}\n\nresource &quot;aws_instance&quot; &quot;server&quot; {\n  ami               = &quot;ami-014009fa4a1467d53&quot;\n  instance_type     = &quot;t2.micro&quot;\n  availability_zone = &quot;ap-northeast-2a&quot;\n\n  depends_on = [\n    aws_ebs_volume.ec2_volume,\n  ]\n}\n\nresource &quot;aws_ebs_volume&quot; &quot;ec2_volume&quot; {\n  availability_zone = &quot;ap-northeast-2a&quot;\n  size              = 30\n}</code></pre></div>\n<p><code class=\"language-text\">depends_on</code> 를 붙여 의존관계가 있는거, 즉 먼저 생성 되어야 하는 resource를 지정 할 수가 있다.</p>\n<blockquote>\n<p>여기선 구지 예시를 들고 싶어서 이런식으로 resource를 따로 만들고 <code class=\"language-text\">depends_on</code> 을 붙였지만 <code class=\"language-text\">aws_instance</code>의 arguments로 <code class=\"language-text\">root_block_device</code> 가 있으니까 구지 이렇게 만들 필요까진 없다. 또한 기본적으로 의존관계를 명시 안해줘도 테라폼이 알아서 잘 생성해준다.</p>\n</blockquote>\n<h2 id=\"2-count\" style=\"position:relative;\"><a href=\"#2-count\" aria-label=\"2 count permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. count</h2>\n<p>동일한 인스턴스를 여러개 생성하고 싶을때 사용한다. 예를 들어 동일한 타입의 <code class=\"language-text\">ec2</code> 를 여러개 만들고 싶을때가 있을 것이다. 그럴 때 여러 resource를 만들어 내는 방법도 있겠지만 count 를 쓰면 더 편하고 쉽게 생성&#x26;관리가 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource &quot;aws_instance&quot; &quot;server&quot; {\n  ami               = &quot;ami-014009fa4a1467d53&quot;\n  instance_type     = &quot;t2.micro&quot;\n  availability_zone = &quot;ap-northeast-2a&quot;\n\n  # 똑같은 ec2를 2개 만들어 낸다.\n  count = 2\n  tags = {\n    Name = &quot;Server ${count.index}&quot;\n  }\n}</code></pre></div>\n<p>이러고 <code class=\"language-text\">plan</code> 결과를 보면 아래와 같이 나온다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">aws_instance.web[0] will be created\n  + resource &quot;aws_instance&quot; &quot;web&quot; {\n ... argument 정보\n tags = {\n        + &quot;Name&quot; = &quot;Server 0&quot;\n }\n}\naws_instance.web[1] will be created\n  + resource &quot;aws_instance&quot; &quot;web&quot; {\n ... argument 정보\n tags = {\n        + &quot;Name&quot; = &quot;Server 1&quot;\n }\n}\nPlan: 2 to add, 0 to change, 0 to destroy.</code></pre></div>\n<p><code class=\"language-text\">${count.index}</code> 는 고유 index 정보를 의미한다.</p>\n<h2 id=\"3-for_each\" style=\"position:relative;\"><a href=\"#3-for_each\" aria-label=\"3 for_each permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. for_each</h2>\n<p>목적은 <code class=\"language-text\">count</code> 와 동일하지만, count는 단순 개수에 대한 정보이지만 <code class=\"language-text\">for_each</code> 는 map, set 형태의 데이터 구조로 활용이 가능하다.</p>\n<p><strong>Map</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource &quot;aws_instance&quot; &quot;server&quot; {\n  ami               = &quot;ami-014009fa4a1467d53&quot;\n  instance_type     = &quot;t2.micro&quot;\n  availability_zone = &quot;ap-northeast-2a&quot;\n\n  for_each = {\n    web_server : &quot;nginx&quot;\n    was : &quot;java&quot;\n  }\n\n  tags = {\n    &quot;${each.key}&quot; = each.value\n  }\n}</code></pre></div>\n<p><code class=\"language-text\">plan</code> 결과</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># aws_instance.server[&quot;nginx&quot;] will be created\n  + resource &quot;aws_instance&quot; &quot;server&quot; {\n ... argument 정보\n tags = {\n        + &quot;nginx&quot; = &quot;nginx&quot;\n }\n# aws_instance.server[&quot;was&quot;] will be created\n  + resource &quot;aws_instance&quot; &quot;server&quot; {\n ... argument 정보\n tags = {\n        + &quot;was&quot; = &quot;java&quot;\n }\nPlan: 2 to add, 0 to change, 0 to destroy.</code></pre></div>\n<p><strong>Set</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource &quot;aws_instance&quot; &quot;server&quot; {\n  ami               = &quot;ami-014009fa4a1467d53&quot;\n  instance_type     = &quot;t2.micro&quot;\n  availability_zone = &quot;ap-northeast-2a&quot;\n\n  for_each = toset([&quot;was&quot;, &quot;web_server&quot;])\n  tags = {\n    Name = &quot;${each.key}&quot;\n  }\n}</code></pre></div>\n<p><code class=\"language-text\">plan</code> 결과</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># aws_instance.server[&quot;was&quot;] will be created\n  + resource &quot;aws_instance&quot; &quot;server&quot; {\n ... argument 정보\n tags = {\n        + &quot;Name&quot; = &quot;was&quot;\n }\n# aws_instance.server[&quot;web_server&quot;] will be created\n  + resource &quot;aws_instance&quot; &quot;server&quot; {\n ... argument 정보\n tags = {\n        + &quot;Name&quot; = &quot;web_server&quot;\n }\nPlan: 2 to add, 0 to change, 0 to destroy.</code></pre></div>\n<p>생성되는 리소스들의 인덱스값도 한번쯤 참고하면서 보면 좋다.</p>\n<p><strong>주의!</strong></p>\n<p>각 <code class=\"language-text\">resource</code>에는 <code class=\"language-text\">count</code> or <code class=\"language-text\">for_each</code> 둘 중 하나만 사용이 가능하다.</p>\n<h2 id=\"4-provider\" style=\"position:relative;\"><a href=\"#4-provider\" aria-label=\"4 provider permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. provider</h2>\n<p>각 <code class=\"language-text\">resource</code>의 <code class=\"language-text\">provider</code>를 명시적으로 지정해 준다. 예를 들어 다른 <code class=\"language-text\">resource</code>는 다 서울 리전을 쓰는데 특정 <code class=\"language-text\">resource</code>만 도쿄 리전을 사용해야한다던가 할때 유용하다(멀티 리전).</p>\n<h2 id=\"5-lifecycle\" style=\"position:relative;\"><a href=\"#5-lifecycle\" aria-label=\"5 lifecycle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. lifecycle</h2>\n<p><code class=\"language-text\">resource</code> 의 <code class=\"language-text\">lifecycle</code> 관련된 설정 값으로 resource가 생성, 변경, 삭제 관련해서 추가로 지정 된 액션을 하도록 설정 할 수 있다.</p>\n<h3 id=\"create_before_destroy-true-or-false\" style=\"position:relative;\"><a href=\"#create_before_destroy-true-or-false\" aria-label=\"create_before_destroy true or false permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">create_before_destroy</code> (true or false)</h3>\n<p>기본적으로 terraform은 resource를 수정 해야하는데 만약 해당 resource를 업데이트를 못한다면 삭제 후, 다시 생성한다.</p>\n<p>Case 1.</p>\n<p>만약 이렇게 설정을 걸어놨다가 보안관련 리소스(security group 같은거)를 수정하다가 해당 role이 삭제되는 짧은 순간 보안적으로 문제가 생길 수도 있다. 이런 상황을 대비하여 이 옵션을 걸어놓으면</p>\n<ol>\n<li>보안 관련 리소스 생성</li>\n<li>해당 resource에 적용</li>\n<li>이전 보안 관련 리소스 삭제</li>\n</ol>\n<p>이런 식으로 안전하게 처리가 가능하다.</p>\n<p>Case 2.</p>\n<p>ELB를 재생성 해야 할때 이 옵션을 주면 먼저 생성 후, 삭제 해버리니까 중간에 딜레이 없이 무중단으로 변경이 가능하다고 한다. → route53 과 연관지어 생각하면 elb를 바꾸거나 할땐 가중치분산 을 활용하는게 정석으로 알고 있는데, 이 옵션만으로도 잘 작동 할 지는 확인 해봐야겠다.</p>\n<h3 id=\"prevent_destroy\" style=\"position:relative;\"><a href=\"#prevent_destroy\" aria-label=\"prevent_destroy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Prevent_destroy</code></h3>\n<p>리소스가 삭제되는 걸 방지한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource &quot;aws_instance&quot; &quot;server&quot; {\n  ami               = &quot;ami-014009fa4a1467d53&quot;\n  instance_type     = &quot;t2.micro&quot;\n\n  lifecycle {\n    prevent_destroy = true\n  }\n}</code></pre></div>\n<p>이런식으로 삭제 방지 옵션을 주고 <code class=\"language-text\">terraform destroy</code> 를 하면</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">aws_instance.server: Refreshing state... [id=i-xxxxxxxxxx]\n╷\n│ Error: Instance cannot be destroyed\n│\n│   on ec2.tf line 98:\n│   98: resource &quot;aws_instance&quot; &quot;server&quot; {\n│\n│ Resource aws_instance.server has lifecycle.prevent_destroy set, but the plan calls for this resource to be destroyed. To avoid this error and continue with the\n│ plan, either disable lifecycle.prevent_destroy or reduce the scope of the plan using the -target flag.</code></pre></div>\n<p>만약 충분히 다 인지하고 진짜로 resource를 삭제하고 싶으면 <code class=\"language-text\">prevent_destroy</code> 옵션을 주석 처리하고 destroy 하면 된다.</p>\n<h3 id=\"ignore_changes\" style=\"position:relative;\"><a href=\"#ignore_changes\" aria-label=\"ignore_changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ignore_changes</h3>\n<p>최초 apply 시에만 적용 하고, 그 이후의 변화는 ignore 할때 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource &quot;aws_instance&quot; &quot;server&quot; {\n  ami               = &quot;ami-014009fa4a1467d53&quot;\n  instance_type     = &quot;t2.micro&quot;\n  availability_zone = &quot;ap-northeast-2a&quot;\n\n  lifecycle {\n    ignore_changes = [무시할_argument_목록]\n  }\n}</code></pre></div>\n<p>이게 사용되어야 하는 케이스는 아직 잘 와닿지는 않는다</p>\n<h3 id=\"provisioner\" style=\"position:relative;\"><a href=\"#provisioner\" aria-label=\"provisioner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Provisioner</h3>\n<p>해당 리소스에 특정 작업을 수행하기 위해 리소스 로컬에서 or 원격 시스템에서 스크립트를 실행하고 싶을때 사용된다.</p>\n<ul>\n<li>local-exec : 내 로컬(ex macbook)에서 실행되는 명령어</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource &quot;aws_instance&quot; &quot;server&quot; {\n  ami               = &quot;ami-014009fa4a1467d53&quot;\n  instance_type     = &quot;t2.micro&quot;\n\n  provisioner &quot;local-exec&quot; {\n    command = &quot;hostname&quot;\n  }\n}</code></pre></div>\n<ul>\n<li>hostname 명령어 실행 결과\naws<em>instance.server: Creating…\naws</em>instance.server: Still creating… [10s elapsed]\naws<em>instance.server: Still creating… [20s elapsed]\naws</em>instance.server: Provisioning with ‘local-exec’…\naws<em>instance.server (local-exec): Executing: [“/bin/sh” “-c” “hostname”]\naws</em>instance.server (local-exec): kimjoohyung-ui-MacBookPro.local\naws_instance.server: Creation complete after 27s [id=i-0f2157fc11e6ba5a9]</li>\n</ul>\n<p>실행한 컴퓨터의 로컬 hostname이 출력되는걸 확인 할 수 있다.</p>\n<ul>\n<li>remote-exec</li>\n</ul>\n<p>해당 리소스에서 직접 실행되는 명령어다. ec2라면 <code class=\"language-text\">connection</code> 정보를 줘서 ssh로 접근 한 후, 명령어를 실행 시킬 수가 있다.</p>\n<p>또한 <code class=\"language-text\">when</code> 옵션을 줘서 실행 주기를 바꿀 수가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">provisioner &quot;local-exec&quot; {\n    when    = destroy\n    command = &quot;echo &#39;Destroy-time provisioner&#39;&quot;\n  }</code></pre></div>\n<p>이렇게 하면 리소스가 삭제 되는 시기에 명령어가 실행된다. 명령어 실행이 실패를 대비한 옵션 (<code class=\"language-text\">on_failure</code>) 옵션도 제공해준다.</p>\n<blockquote>\n<p><strong>Note:</strong> Provisioners should only be used as a last resort. For most common situations there are better alternatives.</p>\n</blockquote>\n<p>왠만하면 쓰지 말라고 한다… ec2에는 비슷한 역할을 하는 <code class=\"language-text\">user_data</code> 라는 얘도 있으니 참고하자</p>\n<ul>\n<li>공식 문서\n<a href=\"https://www.terraform.io/language/resources/syntax#meta-arguments\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.terraform.io/language/resources/syntax#meta-arguments</a></li>\n</ul>","fields":{"slug":"/posts/etc/etc-tf-meta_arguments/","tagSlugs":["/tag/terraform/","/tag/iac/"]},"frontmatter":{"date":"2022-06-14T13:38:51.206Z","description":"테라폼 대부분에 넣을 수 있는 기본 argument들","tags":["terraform","iac"],"title":"Terraform - Meta-Arguments","socialImage":null}}},"pageContext":{"slug":"/posts/etc/etc-tf-meta_arguments/"}}}