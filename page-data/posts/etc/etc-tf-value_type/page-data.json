{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/etc/etc-tf-value_type/","result":{"data":{"markdownRemark":{"id":"03d3820a-7017-582f-97fe-d8bcdee1e50a","html":"<p>테라폼에서 사용되는 값(입출력 값)들을 기반으로 인프라를 구성 할 수가 있고, 생성 된 리소스를 기반으로 또 다른 리소스를 구성 할 수가 있다.</p>\n<h2 id=\"variableinput-value\" style=\"position:relative;\"><a href=\"#variableinput-value\" aria-label=\"variableinput value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>variable(input value)</h2>\n<p>입력 값을 기반으로 인프라를 구성하기 위해 사용된다. 즉, 소스 베이스는 그대로 인데 몇가지 값을 입력받아 구성하려고 할때 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">variable &quot;ec2-ami&quot; {\n  type        = string\n  description = &quot;ec2 ami value&quot;\n  default     = &quot;ami-014009fa4a1467d53&quot;\n}\n\nresource &quot;aws_instance&quot; &quot;test-ec2&quot; {\n  ami           = var.ec2-ami\n  instance_type = &quot;t2.micro&quot;\n}</code></pre></div>\n<p><code class=\"language-text\">ec2</code>를 만들기 위한 <code class=\"language-text\">ami</code> 값을 외부에서 받기위해 <code class=\"language-text\">variable</code>로 분리해서 받고 있고, <code class=\"language-text\">var.ec2-ami</code>로 접근해서 입력 된 변수에 접근하고 있다.\n<code class=\"language-text\">variable</code>은 type과 default value를 지정 할 수가 있다. 위 처럼 default value로 처리 할 수도 있지만 외부에서 값을 입력받는 대표적인 방법은 입력값들을 모아놓은 별도의 <code class=\"language-text\">file</code>로 분리하던가, 아님 cli를 통해 값을 입력 받을 수도 있다.</p>\n<h3 id=\"1-cli-명령어를-통한-variable-입력\" style=\"position:relative;\"><a href=\"#1-cli-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%A5%BC-%ED%86%B5%ED%95%9C-variable-%EC%9E%85%EB%A0%A5\" aria-label=\"1 cli 명령어를 통한 variable 입력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. cli 명령어를 통한 variable 입력</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">variable &quot;ec2-ami1&quot; {\n  type = string\n  description = &quot;ec2 ami value&quot;\n}\n\nvariable &quot;ec2-ami2&quot; {\n  type        = string\n  description = &quot;ec2 ami value&quot;\n}\n\nresource &quot;aws_instance&quot; &quot;test-ec2-1&quot; {\n  ami           = var.ec2-ami1\n  instance_type = &quot;t2.micro&quot;\n}\n\nresource &quot;aws_instance&quot; &quot;test-ec2-2&quot; {\n  ami           = var.ec2-ami2\n  instance_type = &quot;t2.micro&quot;\n}</code></pre></div>\n<p>이러한 형태의 resource를 구성 한 후, cli를 통해 아래와 같이 입력하면 지정된 variable값을 입력 할 수가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ terraform plan -var ec2-ami1=&quot;ami-014009fa4a1467d53&quot; -var ec2-ami2=&quot;ami-014009fa4a1467d53&quot;</code></pre></div>\n<h3 id=\"2-파일을-통합-variable-입력\" style=\"position:relative;\"><a href=\"#2-%ED%8C%8C%EC%9D%BC%EC%9D%84-%ED%86%B5%ED%95%A9-variable-%EC%9E%85%EB%A0%A5\" aria-label=\"2 파일을 통합 variable 입력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 파일을 통합 variable 입력</h3>\n<p><code class=\"language-text\">terraform</code> 파일이 있는 동일한 위치에 <code class=\"language-text\">terraform.tfvars</code> 파일을 위치 시킨후, 명령어를 실행하면 자동으로 해당 파일을 읽어들인다.</p>\n<p>terraform.tfvars</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ec2-ami1 = &quot;ami-014009fa4a1467d53&quot;\nec2-ami2 = &quot;ami-014009fa4a1467d53&quot;</code></pre></div>\n<p>일반 key-value 형태의 <code class=\"language-text\">json</code> 형태로 관리하기 위해 <code class=\"language-text\">terraform.tfvars.json</code> 파일을 만든 후, 그 안에 json 형태로 관리 할 수도 있지만 이런 json 파일은 주석이 안되서 개인적으로 그냥 파일로 입력하는걸 선호하고 있다. 일반 텍스트 파일이지만 <code class=\"language-text\">variable</code> 구조가 <code class=\"language-text\">map</code> 이어도 정상적으로 입력이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">test-map = {\n  &quot;test1&quot; : &quot;test2&quot;,\n  &quot;test3&quot; : &quot;test4&quot;\n}</code></pre></div>\n<p>이런식으로 입력해도 map형태의 <code class=\"language-text\">test-map</code>라는 <code class=\"language-text\">variable</code>을 입력 할 수가 있다.</p>\n<h3 id=\"validation\" style=\"position:relative;\"><a href=\"#validation\" aria-label=\"validation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>validation</h3>\n<p>입력값 검증이 필요할 때 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">variable &quot;val_1&quot; {\n  type        = string\n  description = &quot;값 테스트1&quot;\n\n  validation {\n    condition     = length(var.val_1) &gt; 10\n    error_message = &quot;10자 이상만 가능&quot;\n  }\n}</code></pre></div>\n<p>위와 같이 구성하고 cli로 <code class=\"language-text\">terraform plan -var val_1=&quot;테스트값 1&quot;</code> 를 입력하면 아래와 같이 validation 결과를 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">│ Error: Invalid validation error message\n│\n│   on main.tf line 23, in variable &quot;val_1&quot;:\n│   23:     error_message = &quot;10자 이상만 가능&quot;</code></pre></div>\n<p>validation 하는 방법은 여러가지가 존재하고 그 중엔 정규 식도 가능하다 <code class=\"language-text\">can(regex(정규식_조건, 검사_대상))</code>,</p>\n<h2 id=\"output\" style=\"position:relative;\"><a href=\"#output\" aria-label=\"output permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>output</h2>\n<p>값을 출력 할때 사용된다. 생성 된 <code class=\"language-text\">resource</code>의 <code class=\"language-text\">arn</code>을 확인하기 위해 사용하거나 차후 이 <code class=\"language-text\">output</code> 값을 기반으로 다른 모듈을 구성하기 위해 참조용으로 사용된다.</p>\n<h3 id=\"기본-사용법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"기본 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 사용법</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">variable &quot;test-value&quot; {\n  type    = string\n  default = &quot;test-value&quot;\n}\n\nresource &quot;aws_instance&quot; &quot;tf-ec2&quot; {\n  ami           = &quot;ami-014009fa4a1467d53&quot;\n  instance_type = &quot;t2.micro&quot;\n}\n\noutput &quot;output-map&quot; {\n\n  value = var.test-value\n}\n\noutput &quot;created-ec2&quot; {\n  value = aws_instance.tf-ec2.arn\n}</code></pre></div>\n<p>출력 샘플</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Changes to Outputs:\n  + created-ec2 = (known after apply)\n  + output-map  = &quot;test-value&quot;</code></pre></div>\n<p>이런식으로 resource를 생성(위 샘플은 plan)시, arn 값 등을 알 수가 있다.</p>\n<h3 id=\"sensitive\" style=\"position:relative;\"><a href=\"#sensitive\" aria-label=\"sensitive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sensitive</h3>\n<p>혹시나 생성 되는 값 노출을 숨겨야하지만 다른곳에서 참조해야 할 경우가 있을때, <code class=\"language-text\">sensitive</code> 값을 줘서 화면에 노출되는 것을 막을 수가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resource &quot;aws_instance&quot; &quot;tf-ec2&quot; {\n  ami           = &quot;ami-014009fa4a1467d53&quot;\n  instance_type = &quot;t2.micro&quot;\n}\n\noutput &quot;created-ec2&quot; {\n  value     = aws_instance.tf-ec2.arn\n  sensitive = true\n}</code></pre></div>\n<p>plan 결과</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Changes to Outputs:\n  + created-ec2 = (sensitive value)</code></pre></div>\n<p>이런식으로 값이 숨겨져서 출력된다.</p>\n<h2 id=\"locals\" style=\"position:relative;\"><a href=\"#locals\" aria-label=\"locals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>locals</h2>\n<p><code class=\"language-text\">locals</code>는 입/출력 용도가 아닌 테라폼을 구성할 때 사용 할 임시 변수용도로 사용된다. 말 그대로 로컬용 변수값 이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">locals {\n  test_1 = &quot;test1&quot;\n  test_2 = &quot;test1&quot;\n  test_3 = {\n    test_3_1 : &quot;tesst-3-1&quot;\n    test_3_2 : &quot;tesst-3-2&quot;\n  }\n}\n\noutput &quot;test_local_1&quot; {\n  value = local.test_1\n}\n\noutput &quot;test_local_2&quot; {\n  value = local.test_2\n}\n\noutput &quot;test_local_3&quot; {\n  value = local.test_3\n}</code></pre></div>\n<p>plan 결과</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Changes to Outputs:\n  + test_local_1 = &quot;test1&quot;\n  + test_local_2 = &quot;test1&quot;\n  + test_local_3 = {\n      + test_3_1 = &quot;tesst-3-1&quot;\n      + test_3_2 = &quot;tesst-3-2&quot;\n    }</code></pre></div>\n<p>주의 할 점은 <code class=\"language-text\">locals.key</code>가 아니라 <code class=\"language-text\">local.key</code>로 접근 해야 한다는 점이고, 보통 가독성을 위해 한번 거쳐가는 변수로 많이 사용된다</p>\n<blockquote>\n<p>지금은 변수가 단순한 형태로 사용해서 별 필요성을 못느끼지만 값이 점점 복잡해지면 가독성을 위해서라도 많이 쓰게 된다.</p>\n</blockquote>\n<h4 id=\"locals를-활용한-공통-tags-샘플\" style=\"position:relative;\"><a href=\"#locals%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EA%B3%B5%ED%86%B5-tags-%EC%83%98%ED%94%8C\" aria-label=\"locals를 활용한 공통 tags 샘플 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>locals를 활용한 공통 tags 샘플</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">locals {\n  common_tags = {\n    type = &quot;web&quot;\n    env  = &quot;dev&quot;\n  }\n}\n\nresource &quot;aws_instance&quot; &quot;test_ec2&quot; {\n  ami               = &quot;ami-014009fa4a1467d53&quot;\n  instance_type     = &quot;t2.micro&quot;\n\n  #tags = local.ec2_common_tags # 이런식으로 직접 대입해서 사용도 가능하다.\n  tags = merge(local.common_tags, {\n    type       = &quot;worker&quot;\n    size       = &quot;small&quot;\n    department = &quot;department1&quot;\n  })\n}</code></pre></div>\n<p>이런식으로도 활용 할 수가 있다. 참고로 merge를 통해 나중에 추가 된 <code class=\"language-text\">type=&quot;worker&quot;</code> 가 최종 type이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">+ tags                                 = {\n    + &quot;department&quot; = &quot;department1&quot;\n    + &quot;env&quot;        = &quot;dev&quot;\n    + &quot;size&quot;       = &quot;small&quot;\n    + &quot;type&quot;       = &quot;worker&quot;\n  }</code></pre></div>\n<h2 id=\"type\" style=\"position:relative;\"><a href=\"#type\" aria-label=\"type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type</h2>\n<p>테라폼에선 기본 타입(<code class=\"language-text\">string</code>, <code class=\"language-text\">number</code>, <code class=\"language-text\">bool</code> 등)으로 타입을 지정 할 수도 있지만 <code class=\"language-text\">collection</code> 타입도 사용이 가능하다.</p>\n<ul>\n<li><code class=\"language-text\">list&lt;type&gt;</code></li>\n<li><code class=\"language-text\">set&lt;type&gt;</code></li>\n<li><code class=\"language-text\">map&lt;type&gt;</code></li>\n<li><code class=\"language-text\">object({key = name, ...})</code></li>\n<li><code class=\"language-text\">tuple(type...)</code></li>\n</ul>\n<p>여기서 <code class=\"language-text\">type</code>을 collection을 중첩해서 사용도 가능하다. 위 <code class=\"language-text\">collection</code> 타입들은 다른 언어에서도 많이 쓰이는 직관적인 타입이니까 구지 하나하나 설명하기 보단 그냥 결과 값을 보는게 더 빠를 것이라 생각된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">variable &quot;list_string&quot; {\n  type    = list(string)\n  default = [&quot;list&quot;, &quot;string&quot;, &quot;value&quot;]\n}\n\nvariable &quot;set_string&quot; {\n  type    = set(string)\n  default = [&quot;list&quot;, &quot;list&quot;, &quot;string&quot;, &quot;string&quot;, &quot;value&quot;]\n}\n\nvariable &quot;map_num&quot; {\n  type = map(number)\n  default = {\n    &quot;val1&quot; = 1\n    &quot;val2&quot; = 2\n    &quot;val3&quot; = 3\n    &quot;val4&quot; = 4\n  }\n}\n\nvariable &quot;object_key_val&quot; {\n  type = object({\n    type   = string\n    length = number\n    is     = bool\n  })\n  default = {\n    type   = &quot;type1&quot;\n    length = 5\n    is     = false\n  }\n}\n\nvariable &quot;map_object&quot; {\n  type = map(object({\n    type    = string\n    count   = number\n    private = bool\n  }))\n\n  default = {\n    &quot;private_ec2&quot; = {\n      count   = 2\n      private = true\n      type    = &quot;smal&quot;\n    }\n    &quot;public_ec2&quot; = {\n      count   = 3\n      private = false\n      type    = &quot;large&quot;\n    }\n  }\n}\n\nvariable &quot;tuple_test&quot; {\n  type = tuple([string, number, bool])\n\n  default = [&quot;test&quot;, 1, false]\n}\n\noutput &quot;list_string&quot; {\n  value = var.list_string\n}\n\noutput &quot;set_string&quot; {\n  value = var.set_string\n\n}\n\noutput &quot;map_num&quot; {\n  value = var.map_num\n}\n\noutput &quot;map_num_val1&quot; {\n  value = var.map_num.val1\n}\n\noutput &quot;object_key_val&quot; {\n  value = var.object_key_val\n}\n\noutput &quot;object_key_val_type&quot; {\n  value = var.object_key_val.type\n}\n\noutput &quot;map_object&quot; {\n  value = var.map_object\n}\n\noutput &quot;tuple_test&quot; {\n  value = var.tuple_test\n}\n\noutput &quot;tuple_first&quot; {\n  value = var.tuple_test[0]\n}</code></pre></div>\n<p>plan 결과</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Changes to Outputs:\n  + list_string         = [\n      + &quot;list&quot;,\n      + &quot;string&quot;,\n      + &quot;value&quot;,\n    ]\n  + map_num             = {\n      + &quot;val1&quot; = 1\n      + &quot;val2&quot; = 2\n      + &quot;val3&quot; = 3\n      + &quot;val4&quot; = 4\n    }\n  + map_num_val1        = 1\n  + map_object          = {\n      + &quot;private_ec2&quot; = {\n          + count   = 2\n          + private = true\n          + type    = &quot;smal&quot;\n        }\n      + &quot;public_ec2&quot;  = {\n          + count   = 3\n          + private = false\n          + type    = &quot;large&quot;\n        }\n    }\n  + object_key_val      = {\n      + is     = false\n      + length = 5\n      + type   = &quot;type1&quot;\n    }\n  + object_key_val_type = &quot;type1&quot;\n  + set_string          = [\n      + &quot;list&quot;,\n      + &quot;string&quot;,\n      + &quot;value&quot;,\n    ]\n  + tuple_first         = &quot;test&quot;\n  + tuple_test          = [\n      + &quot;test&quot;,\n      + 1,\n      + false,\n    ]</code></pre></div>","fields":{"slug":"/posts/etc/etc-tf-value_type/","tagSlugs":["/tag/terraform/","/tag/iac/","/tag/provider/"]},"frontmatter":{"date":"2022-05-03T05:29:50.878Z","description":"테라폼 입력/출력값 및 type 종류","tags":["terraform","iac","provider"],"title":"Terraform - value/type","socialImage":null}}},"pageContext":{"slug":"/posts/etc/etc-tf-value_type/"}}}