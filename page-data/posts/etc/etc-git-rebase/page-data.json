{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/etc/etc-git-rebase/","result":{"data":{"markdownRemark":{"id":"e08c3400-0c38-5090-b7cb-2a03be93dc58","html":"<h1 id=\"rebase\" style=\"position:relative;\"><a href=\"#rebase\" aria-label=\"rebase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rebase</h1>\n<h2 id=\"1-fast-forward\" style=\"position:relative;\"><a href=\"#1-fast-forward\" aria-label=\"1 fast forward permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1 fast-forward</h2>\n<p><code class=\"language-text\">master</code>브랜치에서 새로운 브랜치를 생성하여 기능 추가 후, 다시 <code class=\"language-text\">master</code>브랜치로 합칠 때 새로운 브랜치를 생성하는 시점 이후로 <code class=\"language-text\">master</code>브랜치 변경이력(<code class=\"language-text\">commit</code>)이 없으면 충돌 날 이유도 없고, 새로운 브랜치가 그대로 흡수되어 병합이 가능하다. 이러한 상태를 <code class=\"language-text\">fast-forward</code>상태, <code class=\"language-text\">fast-forward</code>상태에서 병합 시 <code class=\"language-text\">fast-forward</code>병합 이라고도 한다.</p>\n<blockquote>\n<p><a href=\"https://backlog.com/git-tutorial/kr/stepup/stepup1_4.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://backlog.com/git-tutorial/kr/stepup/stepup1_4.html</a></p>\n</blockquote>\n<p>또한 <code class=\"language-text\">fast-forward</code>상태에서 브랜치를 병합하면 git graph가 여러 갈래로 나누어지는 일 없이 깔끔하게 합쳐진다.</p>\n<h2 id=\"2-rebase를-하는-이유\" style=\"position:relative;\"><a href=\"#2-rebase%EB%A5%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"2 rebase를 하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2 rebase를 하는 이유</h2>\n<p><code class=\"language-text\">fast-forward</code>상태 라면 브랜치를 합칠때 신경 쓸 요소가 없지만 <code class=\"language-text\">fast-forward</code>상태가 아니라면 <code class=\"language-text\">merge</code>시 git graph 모양이 마음에 안들 수가 있다.\n브랜치가 많아지고, 새로운 브랜치에서 작업량(커밋 수 &#x26; 기간)이 많아지면 그래프도 한눈에 안들어오고 어지럽게만 보인다. 이럴때 내가 작업한 것을 <code class=\"language-text\">fast-forward</code>상태로 만들어 병합 시키면 git graph가 여러 갈래로 나누어지지 않고 깔끔하게 관리가 가능하다. 결과적으로 병합을 목적으로 <code class=\"language-text\">rebase</code>작업은 <code class=\"language-text\">master</code>브랜치와 새로운 기능 추가용 <code class=\"language-text\">func1</code>브랜치가 있을 때 <code class=\"language-text\">func1</code>브랜치의 시작지점(브랜치 생성 시점의 커밋)을 <code class=\"language-text\">master</code>브랜치의 가장 최근 커밋 지점으로 base를 재정의(git 커밋 이력을 수정)하여 <code class=\"language-text\">fast-forward</code>상태로 만드는 작업이다.</p>\n<h2 id=\"3-merge와-rebase-차이점-및-과정-with-source-tree\" style=\"position:relative;\"><a href=\"#3-merge%EC%99%80-rebase-%EC%B0%A8%EC%9D%B4%EC%A0%90-%EB%B0%8F-%EA%B3%BC%EC%A0%95-with-source-tree\" aria-label=\"3 merge와 rebase 차이점 및 과정 with source tree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3 merge와 rebase 차이점 및 과정. with source tree</h2>\n<h3 id=\"31-상황-설명을-위한-기본-브랜치-상황\" style=\"position:relative;\"><a href=\"#31-%EC%83%81%ED%99%A9-%EC%84%A4%EB%AA%85%EC%9D%84-%EC%9C%84%ED%95%9C-%EA%B8%B0%EB%B3%B8-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%83%81%ED%99%A9\" aria-label=\"31 상황 설명을 위한 기본 브랜치 상황 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 상황 설명을 위한 기본 브랜치 상황</h3>\n<p><img src=\"/blog/media/git/rebase/img01.PNG\" alt=\"img1\"></p>\n<p>진행 과정을 위한 브랜치 상황 셋팅</p>\n<ul>\n<li>일반적인 master 브랜치를 가정한 브랜치(git_m)와 기능 추가를 위한 서브 브랜치(git_s)를 추가</li>\n<li>git_m에서 일정 커밋을 쌓은 뒤 git_s 브랜치를 생성 후 각자 적당한 커밋을 추가</li>\n</ul>\n<h3 id=\"32-merge-방법\" style=\"position:relative;\"><a href=\"#32-merge-%EB%B0%A9%EB%B2%95\" aria-label=\"32 merge 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 merge 방법</h3>\n<p>rollback시 기존 브랜치를 유지하고 헤깔리지 않게 하기위해 <code class=\"language-text\">git_s</code>와 이력이 똑같은 새로운 브랜치 <code class=\"language-text\">git_s_for_merge</code> 브랜치를 추가. <code class=\"language-text\">merge</code>용 <code class=\"language-text\">git_s</code> 브랜치는 <code class=\"language-text\">git_s_for_merge</code></p>\n<p><img src=\"/blog/media/git/rebase/img02.png\" alt=\"img2\"></p>\n<p><strong>현재 브랜치를 git_m</strong> 상태에서 원하는 브랜치 우클릭->병합</p>\n<p><img src=\"/blog/media/git/rebase/img03.png\" alt=\"img3\"></p>\n<blockquote>\n<p>만약 충돌 시, 충돌난 파일을 적절히 수동으로 병합 후, <code class=\"language-text\">스테이지에 올라간 파일</code>에서 해당 파일 우클릭-><code class=\"language-text\">충돌해결</code>-><code class=\"language-text\">해결된 것으로 표시</code> 클릭 후 다시 커밋</p>\n</blockquote>\n<h4 id=\"주의사항\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"주의사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의사항</h4>\n<p>현재 브랜치가 <code class=\"language-text\">git_m</code>에서 <code class=\"language-text\">git_s_for_merge</code>를 우클릭하여 병합하면 병합 되어진 대상 브랜치(즉 변하는 브랜치)는 <code class=\"language-text\">git_m</code>으로, <code class=\"language-text\">git_s_for_merge</code>는 아무런 변화가 없다.</p>\n<p>반대로 현재 브랜치가 <code class=\"language-text\">git_s_for_merge</code>에서 <code class=\"language-text\">git_m</code>를 병합하면 병합 되어진 대상 브랜치(변하는 브랜치)는 <code class=\"language-text\">git_s_for_merge</code>가 된다. 이는 현재 <code class=\"language-text\">git_s_for_merge</code>에서 개발 중, 중간에 마스터 브랜치(<code class=\"language-text\">git_m</code>)로 <code class=\"language-text\">push</code>된 소스 파일들을 <code class=\"language-text\">git_s_for_merge</code>로도 업데이트(동기화) 하는 효과를 준다.</p>\n<p><img src=\"/blog/media/git/rebase/img04.png\" alt=\"img4\"></p>\n<p>추가로 이 방금 말한 방법대로 <code class=\"language-text\">git_m</code>내용을 <code class=\"language-text\">merge</code> 후 다시 <code class=\"language-text\">git_m</code>에서 <code class=\"language-text\">git_s_for_merge</code>를 <code class=\"language-text\">merge</code>할 수도 있다. 병합 과정중 특별한 일이 없다면 그냥 <code class=\"language-text\">git_m</code>에서 <code class=\"language-text\">git_s_for_merge</code>를 병합한 효과와 같다. 물론 이러한 방법은 history가 헤깔리니까 추천은 x</p>\n<p><img src=\"/blog/media/git/rebase/img06.png\" alt=\"img6\"></p>\n<h3 id=\"33-rebase-방법\" style=\"position:relative;\"><a href=\"#33-rebase-%EB%B0%A9%EB%B2%95\" aria-label=\"33 rebase 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3 rebase 방법</h3>\n<p>rollback시 기존 브랜치를 유지하고 헤깔리지 않게 하기위해 <code class=\"language-text\">git_s</code>와 이력이 똑같은 새로운 브랜치 <code class=\"language-text\">git_s_for_rebase</code> 브랜치를 추가. <code class=\"language-text\">rebase</code>용 <code class=\"language-text\">git_s</code> 브랜치는 <code class=\"language-text\">git_s_for_rebase</code></p>\n<p><strong>rebase 시 주의!</strong>\nrebase는 말 그대로 브랜치의 base를 재정의하는 작업이기 때문에 <code class=\"language-text\">git_s_for_rebase</code>브랜치를 활성화 하고 작업해야됨. 중요한 내용이니까 다시 상황 및 목적을 정리하자면</p>\n<ol>\n<li>마스터 브랜치(<code class=\"language-text\">git_m</code>)에 새로운 기능을 개발한 브랜치(<code class=\"language-text\">git_s_for_rebase</code>)내용을 추가 하고 싶음</li>\n<li>history 및 그래프를 깔끔하게 관리하고 싶어, <code class=\"language-text\">git_m</code>와 <code class=\"language-text\">git_s_for_rebase</code>브랜치 관계를 <code class=\"language-text\">fast-forward</code>상태로 만들고 싶음(<code class=\"language-text\">rebase</code> 사용 목적 1)</li>\n<li>그러기 위해선 <code class=\"language-text\">git_s_for_rebase</code>브랜치 base를 <code class=\"language-text\">git_m</code>의 가장 최근 <code class=\"language-text\">commit</code> 된 곳으로 맞추어야됨(<code class=\"language-text\">rebase</code> 사용 목적 2)</li>\n<li><code class=\"language-text\">git_s_for_rebase</code>를 수정해야 하는 작업이므로 <code class=\"language-text\">git_s_for_rebase</code>를 활성화 한 상태에서 <code class=\"language-text\">git_m</code>을 선택하여 <code class=\"language-text\">rebase</code></li>\n</ol>\n<p><img src=\"/blog/media/git/rebase/img07.png\" alt=\"img7\"></p>\n<p>이러한 이유로 위의 그림대로 rebase를 하려고 하면 경고창이 나타난다. 경고창 말대로 <code class=\"language-text\">rebase</code>는 해당 프로젝트의 git history를 수정하는 작업(base 수정) 하는 작업이므로 해당 브랜치를 누군가가 작업을 하고 있는 중에 <code class=\"language-text\">rebase</code>시 history가 꼬여 귀찮아 진다.</p>\n<p><img src=\"/blog/media/git/rebase/img08.png\" alt=\"img8\"></p>\n<p><code class=\"language-text\">확인</code> 버튼을 눌러 rebase를 진행 중, 혹시나마 파일간 충돌이 일어나면 꽤나 귀찮아 진다.</p>\n<p><img src=\"/blog/media/git/rebase/img09.png\" alt=\"img9\"></p>\n<p>위 그림은 일부로 충돌을 낸 상황으로 브랜치를 새로 생성 후 <code class=\"language-text\">git_m</code>에서 <code class=\"language-text\">temp.txt</code>를 수정 후 커밋(git<em>m에서 커밋 5), 이후 <code class=\"language-text\">git_s</code>에서 똑같은 파일을 2번 수정 후 커밋(git_s에서 커밋 2, git_s</em>에서 커밋 3)을 하여 충돌을 유발시킨 상황 &#x26; 이미지 이다.</p>\n<p><code class=\"language-text\">rebase</code> 충돌이 귀찮은 이유는 충돌난 파일을 가지고 있는 커밋들(위 상황에서 git<em>s에서 커밋 2, git_s</em>에서 커밋 3)을 모두 적절히 해결을 해주어야 한다. 수정 중 모두 똑같은 내용으로 수정하면 commit history가 이상해 지니까 이 점을 고려해서 적절하게 수정 해주어야 한다. <code class=\"language-text\">gits_s에서 커밋 2</code>, <code class=\"language-text\">gits_s에서 커밋 3</code>의 <code class=\"language-text\">temp.txt</code>파일 내용을 똑같게 만들고, git message는 다른 상황이라면 나중에 git 이력을 보며 수정사항을 확인할 일이 생기면 더 헤깔리는 일이 생길 것이다.</p>\n<p>이러한 점을 고려하면서, <code class=\"language-text\">rebase</code>를 계속 하자면 위 그림에선 (git<em>s에서 커밋 2)에서 충돌난 파일을 적절히 수정하고 <code class=\"language-text\">source tree</code>의 <code class=\"language-text\">액션</code>-><code class=\"language-text\">재배치 계속</code>(또는 <code class=\"language-text\">$ git rebase --continue</code> 명령어 입력) 후 (git_s</em>에서 커밋 3)에서 충돌난 상황을 또 적절히 해결한 후에 다시 <code class=\"language-text\">액션</code>-><code class=\"language-text\">재배치 계속</code>(또는 <code class=\"language-text\">$ git rebase --continue</code> 명령어 입력)을 입력해야만 아래 그림처럼 정상적으로 <code class=\"language-text\">rebase</code>가 완료된다.</p>\n<p><img src=\"/blog/media/git/rebase/img10.png\" alt=\"img10\"></p>\n<p>위 그림은 어차피 rollback을 위한 브랜치를 추가한거니까 <code class=\"language-text\">git_s</code>를 신경쓰지 말고(아예 없다고 가정) <code class=\"language-text\">git_s_for_rebase</code>브랜치가 정상적으로 <code class=\"language-text\">fast-forward</code> 상태, 즉 <code class=\"language-text\">git_m</code>의 가장 최근 커밋으로 base가 변경 된 상태를 확인 할 수가 있다. 또한 커밋한 날짜도 변경 된 것도 같이 확인이 가능하다</p>\n<h2 id=\"그-외-사용-용도\" style=\"position:relative;\"><a href=\"#%EA%B7%B8-%EC%99%B8-%EC%82%AC%EC%9A%A9-%EC%9A%A9%EB%8F%84\" aria-label=\"그 외 사용 용도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그 외 사용 용도</h2>\n<p>rebase의 사용 목적으로는 위에서 설명한 소스 병합 말고도 커밋 삭제, 수정 커밋 합치기(<code class=\"language-text\">squash</code>), 수정 일시, 작업한 사람 정보(아이디, 이메일) 수정 등 많은 용도로 사용된다.</p>\n<p>하지만 이러한 작업들은 수정하는 개념이라기 보단 기존 정보를 삭제하고 새로운 정보를 원하는 위치에 끼워 넣는 작업이다.</p>","fields":{"slug":"/posts/etc/etc-git-rebase/","tagSlugs":["/tag/git/","/tag/rebase/"]},"frontmatter":{"date":"2020-06-09T00:50:06.996Z","description":"소스를 병합 하고 싶을때, 아니면 최신 코드와 동기화 하고 싶을 때","tags":["git","rebase"],"title":"Git Rebase","socialImage":null}}},"pageContext":{"slug":"/posts/etc/etc-git-rebase/"}},"staticQueryHashes":["251939775","357378587","401334301"]}