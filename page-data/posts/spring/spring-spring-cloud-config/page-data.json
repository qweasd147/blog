{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/spring/spring-spring-cloud-config/","result":{"data":{"markdownRemark":{"id":"b0d1c879-46b5-5051-9399-04f3b2ec5516","html":"<p>여기서 설명할 내용 및 샘플은 <a href=\"https://github.com/qweasd147/spring-cloud/tree/master/config-server\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">spring-cloud MSA 샘플</a> 여기서 확인 가능</p>\n<h1 id=\"config-server\" style=\"position:relative;\"><a href=\"#config-server\" aria-label=\"config server permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Config Server</h1>\n<p><code class=\"language-text\">Config Server</code>는 이 전에 설명한 대로 어플리케이션에 적용할 설정 값들을 한곳에서 관리하기 위해 만들어졌다. <code class=\"language-text\">MSA</code> 환경에서 일정한 <code class=\"language-text\">Starter Kit</code>을 기본 베이스로 많은 어플리케이션을 만들어 내는 케이스가 많을것이라 생각되는데, 설정값들이 공통적이지만 따로 관리하다가 변경하려고 하면 귀찮기도 하고 때때로 놓친 케이스가 생길 수도 있다. <code class=\"language-text\">Config Server</code>를 사용하면 한곳에서 어플리케이션 별, 환경(ex dev,staging, prod), 버전(<code class=\"language-text\">label</code>) 별로 각각 설정값을 따로 관리할 수 있기 때문에 꽤나 유용하게 사용 할 수가 있다.</p>\n<h2 id=\"1-client-application-셋팅\" style=\"position:relative;\"><a href=\"#1-client-application-%EC%85%8B%ED%8C%85\" aria-label=\"1 client application 셋팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Client Application 셋팅</h2>\n<p><code class=\"language-text\">Config Server</code>에서 할 셋팅을 보기 전에 간단한 <code class=\"language-text\">Client Application</code>, 그니까 <code class=\"language-text\">Config Server</code>를 사용하는 쪽 셋팅을 보면 아래와 갔다.</p>\n<p><code class=\"language-text\">bootstrap.yml</code></p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">active</span><span class=\"token punctuation\">:</span> docker\n  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> service<span class=\"token punctuation\">-</span>a\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> local\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> docker\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>CONFIG_SERVER_URI<span class=\"token punctuation\">:</span>http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8888</span><span class=\"token punctuation\">}</span>\n      <span class=\"token key atrule\">fail-fast</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># config 서버 못찾으면 서버 종료</span>\n      <span class=\"token key atrule\">profile</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">,</span>docker\n      <span class=\"token key atrule\">label</span><span class=\"token punctuation\">:</span> 1.0.0</code></pre></div>\n<blockquote>\n<p>참고로 <code class=\"language-text\">bootstrap.yml</code>의 파일은 일반적으로 설정파일로 사용되는 <code class=\"language-text\">application.yml</code>파일보다 먼저 실행되는 파일로, 보통 <code class=\"language-text\">Config Server</code>에 대한 정보를 적어놓는 용도로 많이 사용된다.</p>\n</blockquote>\n<p>일단 profiles가 <code class=\"language-text\">local</code>인 설정은 로컬 개발 환경에서 <code class=\"language-text\">Config server</code>를 사용 안하는 목적으로 셋팅한 것으로 일단 무시해도 상관이 없다. 중요한건 <code class=\"language-text\">application name</code>이 기본적으로 <code class=\"language-text\">service-a</code>로 되어있는 점, profiles 값이 <code class=\"language-text\">docker</code>인 설정값들을 보면 된다.</p>\n<p><code class=\"language-text\">cloud config</code> 설정값을 보면 직관적이긴 하지만 그래도 풀어 써 보자면</p>\n<ol>\n<li>uri - Config Server의 접근 주소</li>\n<li>fail-fast - true일때 Config Server를 못찾으면 서버 실행이 안된다.</li>\n<li>profile - 위 소스를 보면서 설명하면 <code class=\"language-text\">default</code>환경, <code class=\"language-text\">docker</code>환경의 설정값을 Config Server에서 가져온다.</li>\n<li>label - 설정값 버전에 맞춰 요청하기 위해 사용된다. (필수값은 아님)</li>\n</ol>\n<p>이정도만 셋팅하면 어플리케이션이 실행되면서 <code class=\"language-text\">Config Server</code>로 부터 설정값을 가져와 셋팅한다.</p>\n<h2 id=\"2-config-server-셋팅\" style=\"position:relative;\"><a href=\"#2-config-server-%EC%85%8B%ED%8C%85\" aria-label=\"2 config server 셋팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Config Server 셋팅</h2>\n<p><code class=\"language-text\">Config Server</code>는 사실 기본셋팅이 잘 되어있어 거의 기본으로 사용해도 훌륭한 퍼포먼스를 보여준다. 그래도 일단 선택지가 있긴한데, 설정값 통신 방법을 순수 <code class=\"language-text\">http</code>로 주고 받을지, 아니면 <code class=\"language-text\">git repository</code> 위치를 저장하고 직접 가져 갈지 선택할 수 있는데 <code class=\"language-text\">git repository</code>는 딱히 장점을 모르겠어서 그냥 <code class=\"language-text\">http</code>로 주고 받는 것으로 선택했고, 공개키 방식도 쉽게 셋팅 가능해서 보안 레벨을 올릴 수도 있겠지만 <code class=\"language-text\">Config server</code>는 <code class=\"language-text\">private network</code>에 배포되어 외부에서 접근 할 수 있는 방법이 없으므로, 딱히 사용하진 않았다.</p>\n<p><code class=\"language-text\">application.yml</code></p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8888</span>\n\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">active</span><span class=\"token punctuation\">:</span> native\n<span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span> native\n  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">-</span>server\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">native</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">search-locations</span><span class=\"token punctuation\">:</span> classpath<span class=\"token punctuation\">:</span>config/</code></pre></div>\n<p>설정값은 정말 단순하다. 사실상 설정파일 위치만 설정해 준게 전부이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/{application}-{profile}.yml\n/{label}/{application}-{profile}.yml\n/{application}-{profile}.properties\n/{label}/{application}-{profile}.properties</code></pre></div>\n<p>위의 파일 &#x26; 디렉토리 패턴을 참고하여 설정 파일들 위치 시키고 서버를 실행 시키면 <code class=\"language-text\">Config Server</code> 셋팅은 끝이 난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resources/\n├── application.yml\n└── config\n    └── 1.0.0\n        ├── service-a-default.yml\n        ├── service-a-docker.yml\n        └── service-a-local.yml</code></pre></div>\n<p>위의 설정파일은 <strong><code class=\"language-text\">1. Client Application 셋팅</code></strong> 을 위해 셋팅한것으로, <code class=\"language-text\">Client Application</code>이 실행되면서 알아서 <code class=\"language-text\">service-a-default.yml</code>, <code class=\"language-text\">service-a-docker.yml</code> 설정 정보를 가져간다.</p>\n<h4 id=\"21-client-application에서-기록되는-정상적으로-가져왔다는-로그\" style=\"position:relative;\"><a href=\"#21-client-application%EC%97%90%EC%84%9C-%EA%B8%B0%EB%A1%9D%EB%90%98%EB%8A%94-%EC%A0%95%EC%83%81%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B0%80%EC%A0%B8%EC%99%94%EB%8B%A4%EB%8A%94-%EB%A1%9C%EA%B7%B8\" aria-label=\"21 client application에서 기록되는 정상적으로 가져왔다는 로그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 Client Application에서 기록되는 정상적으로 가져왔다는 로그</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Located environment: name=service-a, profiles=[default,docker], label=1.0.0, version=null, state=null\nLocated property source: [BootstrapPropertySource {name='bootstrapProperties-classpath:config/1.0.0/service-a-docker.yml'}, BootstrapPropertySource {name='bootstrapProperties-classpath:config/1.0.0/service-a-default.yml'}]</code></pre></div>\n<h4 id=\"22-client가-소스-파일을-가져갈때-config-server에서-감지되는-로그\" style=\"position:relative;\"><a href=\"#22-client%EA%B0%80-%EC%86%8C%EC%8A%A4-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EA%B0%80%EC%A0%B8%EA%B0%88%EB%95%8C-config-server%EC%97%90%EC%84%9C-%EA%B0%90%EC%A7%80%EB%90%98%EB%8A%94-%EB%A1%9C%EA%B7%B8\" aria-label=\"22 client가 소스 파일을 가져갈때 config server에서 감지되는 로그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 Client가 소스 파일을 가져갈때 Config Server에서 감지되는 로그</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Adding property source: classpath:config/1.0.0/service-a-docker.yml\nAdding property source: classpath:config/1.0.0/service-a-default.yml\n</code></pre></div>","fields":{"slug":"/posts/spring/spring-spring-cloud-config/","tagSlugs":["/tag/spring/","/tag/cloud/","/tag/msa/","/tag/config/"]},"frontmatter":{"date":"2020-10-30T00:58:25.297Z","description":"MSA 환경에서 여러 설정값을 한곳에서 관리","tags":["spring","cloud","msa","config"],"title":"Spring Cloud - Config Server","socialImage":null}}},"pageContext":{"slug":"/posts/spring/spring-spring-cloud-config/"}},"staticQueryHashes":["251939775","357378587","401334301"]}