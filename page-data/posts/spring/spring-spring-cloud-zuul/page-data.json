{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/spring/spring-spring-cloud-zuul/","result":{"data":{"markdownRemark":{"id":"c39bf46f-f0fd-57c4-a996-6092e599922a","html":"<p>여기서 설명할 내용 및 샘플은 <a href=\"https://github.com/qweasd147/spring-cloud/tree/master/api-gateway\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">spring-cloud zuul 샘플</a> 여기서 확인 가능</p>\n<h2 id=\"프로젝트의-전체-구성도\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%98-%EC%A0%84%EC%B2%B4-%EA%B5%AC%EC%84%B1%EB%8F%84\" aria-label=\"프로젝트의 전체 구성도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트의 전체 구성도</h2>\n<p><img src=\"/blog/media/cloud/spring-cloud.jpg\" alt=\"spring-cloud-image\"></p>\n<p><code class=\"language-text\">Zuul</code>은 Spring cloud stack에서 <code class=\"language-text\">API Gateway</code> 역할을 수행한다.</p>\n<h2 id=\"unique-entry-point\" style=\"position:relative;\"><a href=\"#unique-entry-point\" aria-label=\"unique entry point permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unique Entry Point</h2>\n<p><code class=\"language-text\">Private Network</code>내에 여러 어플리케이션을 띄운 다음, <code class=\"language-text\">Reverse Proxy</code>를 통해 <code class=\"language-text\">Zuul</code>과 연결되어 있다. 외부에서 접근할 수 있는 방법이 없고 오직 <code class=\"language-text\">API Gateway</code>를 통해서만 접근 할 수 밖에 없는데, 이때 얻을 수 있는 장점이 강력하다.</p>\n<ol>\n<li>Load Balancing</li>\n</ol>\n<p><code class=\"language-text\">MicroService Application</code>을 띄우고, 서버 정보를 <code class=\"language-text\">Zuul</code>에만 알려주면 된다. 로드벨런싱을 위해 다른 추가 작업은 할 필요가 없어 간단하게 구현이 가능하다.</p>\n<ol start=\"2\">\n<li>인증된 Request</li>\n</ol>\n<p>인증 &#x26; 권한 관련해서 관리포인트가 확 줄어든다. 외부에선 오직 <code class=\"language-text\">Zuul</code>을 통해서만 접근 할 수 있으므로 <code class=\"language-text\">Zuul</code>에서 요청 정보를 확인하여 요청자 정보를 <code class=\"language-text\">Request Context</code>에 담아 다른 서비스로 포워딩 해주고 다른 서비스에서 <code class=\"language-text\">Request Context</code>에 담긴 정보를 확인하여 처리 해주기만 하면 된다. 이런 방식으로 구현하면 여러 <code class=\"language-text\">Micro Service</code>에서 반복되는 인증 &#x26; 권한 정보를 확인 로직을 줄일 수가 있다.</p>\n<p>인증 관련해선 밑에서 추가로 설명</p>\n<h2 id=\"셋팅\" style=\"position:relative;\"><a href=\"#%EC%85%8B%ED%8C%85\" aria-label=\"셋팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>셋팅</h2>\n<h3 id=\"1-reverse-proxy\" style=\"position:relative;\"><a href=\"#1-reverse-proxy\" aria-label=\"1 reverse proxy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Reverse Proxy</h3>\n<p>설정 파일(<code class=\"language-text\">properties</code> or <code class=\"language-text\">yaml</code>)을 통해 손쉽게 셋팅이 가능하다</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">zuul</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">service-a</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /service/a/<span class=\"token important\">**</span>\n      <span class=\"token key atrule\">serviceId</span><span class=\"token punctuation\">:</span> service<span class=\"token punctuation\">-</span>a\n      <span class=\"token key atrule\">stripPrefix</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n      <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span>\n    <span class=\"token key atrule\">service-b</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /service/b/<span class=\"token important\">**</span>\n      <span class=\"token key atrule\">serviceId</span><span class=\"token punctuation\">:</span> service<span class=\"token punctuation\">-</span>b\n      <span class=\"token key atrule\">stripPrefix</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n      <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8081</span>\n    <span class=\"token key atrule\">auth</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /auth/<span class=\"token important\">**</span>\n      <span class=\"token key atrule\">serviceId</span><span class=\"token punctuation\">:</span> auth\n      <span class=\"token key atrule\">stripPrefix</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n      <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8082</span></code></pre></div>\n<p>이런식으로 각 <code class=\"language-text\">Reuqest</code>의 경로에 따라 어느 어플리케이션으로 포워딩 해야하는지 설정만 해주면 된다. 설정 값도 직관적이고 필요에 따라 Document를 찾아보면 되고 아님 설정 값을 담는 java 파일(<code class=\"language-text\">ZuulProperties.java</code>)을 열어 필드값을 확인해보는게 더 빠를 수도(…) 있다.</p>\n<h3 id=\"2-인증\" style=\"position:relative;\"><a href=\"#2-%EC%9D%B8%EC%A6%9D\" aria-label=\"2 인증 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 인증</h3>\n<p>설명할 내용의 샘플 실행은 <a href=\"https://github.com/qweasd147/spring-cloud\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">샘플 READ ME</a> 참고</p>\n<p>프로젝트에 구현해 놓은 것은 기본적으로 <code class=\"language-text\">Spring Security</code>를 바탕으로 <code class=\"language-text\">OAuth 2.0</code> &#x26; <code class=\"language-text\">JWT</code>를 사용하였다. 먼저 <code class=\"language-text\">Access token</code>을 얻고 요청 헤더에 담아 request를 날리면 <code class=\"language-text\">Zuul</code>에선 해당 토큰을 파싱 &#x26; 검증을 한 후, 다시 <code class=\"language-text\">Request</code>헤더에 <code class=\"language-text\">username</code>이란 key값으로 인증된 사용자 정보를 담아 포워딩 한다. 이런식으로 넘기면 다른 <code class=\"language-text\">Appication</code>에선 단순 요청 헤더에 <code class=\"language-text\">username</code>값이 있는지 없는지 여부만 판별하면 된다. 주의할 점은 외부에서 다른 <code class=\"language-text\">Application</code>으로 직접 접근 할 수 있어서는 안된다(<code class=\"language-text\">Zuul</code>이 아닌 다른곳에서 임의로 인증됬다고 속여서 해더값을 넘기면 안되니까).</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZuulContextConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ZuulFilter</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> TOKEN_HEADER <span class=\"token operator\">=</span> <span class=\"token string\">\"Bearer \"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">filterType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token class-name\">FilterConstants</span><span class=\"token punctuation\">.</span>PRE_TYPE<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">shouldFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token class-name\">HttpServletRequest</span> request <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>TOKEN_HEADER<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClaims</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ZuulException</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token class-name\">RequestContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">addZuulRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getClaims</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">OAuth2Authentication</span> <span class=\"token function\">getClaims</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OAuth2Authentication</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">SecurityContextHolder</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">getAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>소스의 중요한 부분만 일부 적어놓은 건데, <code class=\"language-text\">ZuulFilter</code>를 구현 한 것으로 위에서 설명한 내용을 구현한 것이다. 먼저 <code class=\"language-text\">Spring Security Filter</code>에서 <code class=\"language-text\">access token</code>을 파싱하여 <code class=\"language-text\">SecurityContextHolder</code>에 담아 놓으면 차후에 <code class=\"language-text\">ZuulFilter</code>가 실행 되는데, 사용자 정보가 <code class=\"language-text\">SecurityContextHolder</code>에 있으면 header에 <code class=\"language-text\">username</code>값을 넣어 보내주는 내용이다.</p>\n<ul>\n<li><code class=\"language-text\">shouldFilter</code> -> <code class=\"language-text\">run</code> 메소드 적용 여부</li>\n<li><code class=\"language-text\">run</code> -> 적용 할 내용</li>\n</ul>\n<p>해당 프로젝트에서 <code class=\"language-text\">JWT</code> 토큰 검증 방법으로 <code class=\"language-text\">Auth 서버</code>랑 <code class=\"language-text\">Zuul 서버</code>에 동일한 <code class=\"language-text\">Sign key</code>값을 공유하도록 셋팅해 놓았다. 공개키 방식으로 하는게 여러모로 좋긴 하겠지만 설정 상 귀찮은 부분(공개키 공유)이 있어서 Pass 하였다. 검증 방법을 대칭키(<code class=\"language-text\">Sign Key</code> 공유)가 아닌 공개키 방법으로 바꾸는건 사실 뭐 어려운건 없으므로, <a href=\"https://github.com/qweasd147/springboot-oauth/tree/jks/jwt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OAuth With JKS</a>를 참고해서 <code class=\"language-text\">JKS</code>를 만든 후, 공개키를 옮겨놓거나 Docker 컨테이너로 마운팅 해서 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResourceServerConfiguration</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ResourceServerConfigurerAdapter</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\n      http<span class=\"token punctuation\">.</span><span class=\"token function\">csrf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/service/a/**\"</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/service/b/**\"</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/auth/**\"</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">denyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>한가지 고민인건 현재 프로젝트에서 모든 접근 경로의 필요 권한을 체크하는 것을 <code class=\"language-text\">Zuul</code>에서 하고 있다. 이런 식이다 보니 <code class=\"language-text\">Zuul</code>에 모든 어플리케이션의 <code class=\"language-text\">Request URL</code>마다 필요한 인증 &#x26; 인가 정보를 넣아야 하니 나중에 너무 복잡해지는게 아닐까 싶다. 그래서 차후에 <code class=\"language-text\">Zuul</code>의 역할을 조금 더 단순하게 바꿔 토큰값을 파싱해여 단순 <code class=\"language-text\">uername</code>값만 넘기고, 세부 차단은 각 어플리케이션마다 구현할까 고민중이다(<code class=\"language-text\">Spring Security</code> 다 걷어내고 <code class=\"language-text\">TokenService</code>만 구현).</p>\n<h3 id=\"3-was\" style=\"position:relative;\"><a href=\"#3-was\" aria-label=\"3 was permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. WAS</h3>\n<p><code class=\"language-text\">Spring Cloud - 기본 설명</code> 게시물에 올려놓은 내용 대로, WAS는 그래도 바꾸는게 좋을꺼 같아 <code class=\"language-text\">Tomcat</code> -> <code class=\"language-text\">undertow</code>로 바꾸었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"gradle\"><pre class=\"language-gradle\"><code class=\"language-gradle\">  dependencies {\n\n    implementation (&#39;org.springframework.cloud:spring-cloud-starter-netflix-zuul&#39;) {\n        exclude module: &quot;spring-boot-starter-tomcat&quot;\n    }\n    implementation(&#39;org.springframework.boot:spring-boot-starter-undertow&#39;)\n  }</code></pre></div>\n<p><a href=\"https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-zuul/2.2.5.RELEASE\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Zuul Dependencies</a>를 보니 <code class=\"language-text\">zuul-core</code>만 2.x로 버전업 해서 사용해도 상관없다고 한다(2.x는 기본 netty 사용).</p>\n<h2 id=\"todo\" style=\"position:relative;\"><a href=\"#todo\" aria-label=\"todo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TODO</h2>\n<p>aws에서 <code class=\"language-text\">X-Ray</code>를 써보니까 분산 트레이싱이 확실히 중요하다고 느껴졌다. <code class=\"language-text\">Spring Cloud</code>에서 적용 할만한것(<code class=\"language-text\">x-ray</code>는 빼고)을 찾아보니까 있긴 있는거 같은데 공부가 필요하다.</p>\n<ul>\n<li>Zipkin</li>\n<li>Sleuth</li>\n<li>Pinpoint</li>\n</ul>","fields":{"slug":"/posts/spring/spring-spring-cloud-zuul/","tagSlugs":["/tag/spring/","/tag/cloud/","/tag/msa/","/tag/gateway/"]},"frontmatter":{"date":"2020-09-25T07:19:37.572Z","description":"MSA 환경에서 API-Gateway를 담당","tags":["spring","cloud","msa","gateway"],"title":"Spring Cloud - Zuul","socialImage":null}}},"pageContext":{"slug":"/posts/spring/spring-spring-cloud-zuul/"}},"staticQueryHashes":["1828819329","251939775","2839666046","401334301"]}