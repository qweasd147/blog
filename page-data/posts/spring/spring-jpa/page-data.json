{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/spring/spring-jpa/","result":{"data":{"markdownRemark":{"id":"2728297e-7ee3-5890-addf-e8e22eb91cc8","html":"<p>여기서 설명할 내용 및 샘플은 <a href=\"https://github.com/qweasd147/springboot-jpa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JPA 샘플</a> 여기서 확인 가능</p>\n<p>목차</p>\n<ol>\n<li>2차 캐싱 시 주의점</li>\n<li>N + 1 문제</li>\n<li>OneToOne Lazy Loading</li>\n<li>연관 관계 없을 시 조인</li>\n<li>bulk insert</li>\n</ol>\n<h2 id=\"1-2차-캐싱-시-주의점\" style=\"position:relative;\"><a href=\"#1-2%EC%B0%A8-%EC%BA%90%EC%8B%B1-%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%A0%90\" aria-label=\"1 2차 캐싱 시 주의점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 2차 캐싱 시 주의점</h2>\n<p>1차 캐싱은 캐싱 주기가 매우 짧기도 하고 각 스레드에 종속되어 문제되는 경우는 거의 없다고 생각된다(근데 1차 캐시로 성능상 이득보기는 정말 힘들다). 하지만 2차 캐시의 경우 어플리케이션에 캐싱 해두고 사용하는것으로 종종 문제점이 발생하기도 한다.</p>\n<h4 id=\"entity\" style=\"position:relative;\"><a href=\"#entity\" aria-label=\"entity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entity</h4>\n<p>상황 설명을 위해 <code class=\"language-text\">JPA 샘플</code>에 <code class=\"language-text\">Entity</code>와 2개의 API를 만들어 두었다.</p>\n<p>Article.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Article</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> idx<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">,</span> cascade <span class=\"token operator\">=</span> <span class=\"token class-name\">CascadeType</span><span class=\"token punctuation\">.</span>PERSIST<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"article_idx\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@OrderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"idx ASC \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@BatchSize</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tag</span><span class=\"token punctuation\">></span></span> tags <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Tag.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tag</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> idx<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@ManyToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"article_idx\"</span><span class=\"token punctuation\">,</span> nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@BatchSize</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Article</span> article<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> tag<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>1 대 N 양방향 으로 맵핑된 <code class=\"language-text\">Article</code>, <code class=\"language-text\">Tag</code> entity</p>\n</blockquote>\n<h4 id=\"api소스는-샘플-참고\" style=\"position:relative;\"><a href=\"#api%EC%86%8C%EC%8A%A4%EB%8A%94-%EC%83%98%ED%94%8C-%EC%B0%B8%EA%B3%A0\" aria-label=\"api소스는 샘플 참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API(소스는 샘플 참고)</h4>\n<ol>\n<li>\n<p>어플리케이션에 <code class=\"language-text\">Article</code>을 조회 후, 3초 동안 캐싱 해두는 API</p>\n<blockquote>\n<p>POST : <code class=\"language-text\">http://localhost:8080/api/article/cache/5</code></p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">Article</code>을 캐시에서 조회, 없으면 db에서 값을 찾고 <code class=\"language-text\">Tag</code>를 <code class=\"language-text\">Lazy Loading</code>하는 API</p>\n<blockquote>\n<p>GET : <code class=\"language-text\">http://localhost:8080/api/article/cache/5</code></p>\n</blockquote>\n</li>\n</ol>\n<p>먼저 <code class=\"language-text\">GET</code> 요청을 하면 정상적으로 결과 값이 반환된다. 하지만 <code class=\"language-text\">POST</code>로 요청 후, 3초 이내에 <code class=\"language-text\">GET</code>으로 요청하면 에러가 발생한다.</p>\n<p>에러 내용</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- ERROR : failed to lazily initialize a collection of role: com.example.model.Article.tags, could not initialize proxy - no Session\n- WARN : Resolved [org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.example.model.Article.tags, could not initialize proxy - no Session]</code></pre></div>\n<p>에러 내용은 대충 ’<code class=\"language-text\">Tag</code> Entity를 지연 조회(<code class=\"language-text\">lazily initialize</code>)를 실패 했다.‘라는 내용이다. 에러 발생 과정을 나열해보면</p>\n<ol>\n<li><code class=\"language-text\">POST</code> API에서 <code class=\"language-text\">Article</code>만 조회 하고, <code class=\"language-text\">Tag</code>값은 조회 하지 않고 캐싱 해둔다.</li>\n<li><code class=\"language-text\">GET</code> API에서 캐싱 된 <code class=\"language-text\">Article</code>을 가져온다. 이때 <code class=\"language-text\">Article</code>은 <strong>준영속성 상태</strong>이다.</li>\n<li><code class=\"language-text\">Article</code>에서 <code class=\"language-text\">Tag</code>를 조회 하려고 한다. -> 에러 발생!</li>\n</ol>\n<blockquote>\n<p>간단히 말하면 캐싱 해둔 데이터를 다른 스레드에서 가져와 <code class=\"language-text\">lazy loading</code>을 시도해 발생한 문제이다. <code class=\"language-text\">EntityManager</code>와 <code class=\"language-text\">Persistence Context</code>는 각각의 스레드에 종속되어 있다. 그래서 다른 스레드에 의해 캐싱 된 데이터를 꺼내오더라도 현재 스레드에선 <code class=\"language-text\">준영속성 상태</code>가 된다.</p>\n</blockquote>\n<p>이런 문제를 막기 위해 캐싱 할 데이터는 필요한 정보를 다 초기화 시키고 저장되도록 유도하던가, 다 초기화 시키기 부담스러우면 필요 데이터를 초기화 시키고 dto 형태로 변환하여 저장 되도록 관리되어야 한다.</p>\n<h2 id=\"2-n--1-문제\" style=\"position:relative;\"><a href=\"#2-n--1-%EB%AC%B8%EC%A0%9C\" aria-label=\"2 n  1 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. N + 1 문제</h2>\n<p><code class=\"language-text\">N + 1 문제</code> 설명 자체는 생략 하고 바로 해결법 부터 설명</p>\n<p><code class=\"language-text\">Entity</code>의 연관 관계들은 기본옵션으로 <code class=\"language-text\">Lazy Loading</code>이 되도록 설정 해놓고(<code class=\"language-text\">FetchType.LAZY</code>), 사용 시 필요에 맞춰 즉시 실행 or 지연실행이 되도록 유도해야한다. 적당히 <code class=\"language-text\">Entity</code> 연관 관계에 <code class=\"language-text\">@BatchSize</code>를 걸어놓고, <code class=\"language-text\">FetchJoin</code>이나 <code class=\"language-text\">Repository</code>에 <code class=\"language-text\">@EntityGraph</code>등을 쓰면 쉽게 해결이 가능하다.</p>\n<p>상당히 불친절한 설명이라고 생각할 수 있지만 사실 <code class=\"language-text\">N + 1</code>문제는 당장 해결이 어렵다기 보다는 쌓여가는 레거시 코드들을 상대로 얼마나 안전하게, 또 재사용을 높이면서 관리하는게 힘들 뿐이다. 그래서 개인적으로 <code class=\"language-text\">Service</code>클래스는 왠만하면 순수한 형태(<code class=\"language-text\">Lazy Loading</code>만 하도록)로 사용하고 <code class=\"language-text\">Facade</code>클래스를 만들어 필요에 따라 연관 <code class=\"language-text\">entity</code>들을 추가로 초기화 시키는 형태로 하는게 좋은것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Transactional</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleServiceFacade</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ArticleService</span> articleService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Article</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">searchAllWithInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Article</span><span class=\"token punctuation\">></span></span> articles <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>articleService<span class=\"token punctuation\">.</span><span class=\"token function\">searchAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        articles<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token class-name\">Hibernate</span><span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">.</span><span class=\"token function\">getTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> articles<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런식으로 사용하는게 재사용성도 높이고, 필요한 정보만 딱딱 조회 하고 처리 할 수 있어 좋은것 같다. <code class=\"language-text\">facade</code>클래스 자체가 애매하다고 생각되면 <code class=\"language-text\">service</code>에서 다 처리해도 상관은 없을꺼 같긴한데 <code class=\"language-text\">service</code>클래스가 비지니스 로직을 처리하는 부분이라 시간이 지나면 규모가 너무 커져, <code class=\"language-text\">facade</code>를 만드는것도 좋은 선택이라고 생각된다.</p>\n<h2 id=\"3-onetoone-lazy-loading\" style=\"position:relative;\"><a href=\"#3-onetoone-lazy-loading\" aria-label=\"3 onetoone lazy loading permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. OneToOne Lazy Loading</h2>\n<p><code class=\"language-text\">Entity</code>조회 시, 필요에 맞춰 즉시 실행 or 지연실행을 선택해서 쓰는게 좋다고 하였다. 하지만 <code class=\"language-text\">Lazy Loading</code>을 유도해도 안되는 케이스가 존재한다.</p>\n<p>다시 상황 설명을 위한 <code class=\"language-text\">Entity</code> 관계 설명</p>\n<p>Article.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Article</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token annotation punctuation\">@OneToOne</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"article\"</span><span class=\"token punctuation\">,</span> fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ArticleDetail</span> articleDetail<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ArticleDetail.java</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleDetail</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token annotation punctuation\">@OneToOne</span><span class=\"token punctuation\">(</span>fetch <span class=\"token operator\">=</span> <span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"article_idx\"</span><span class=\"token punctuation\">,</span> nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Article</span> article<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>1대1 양방향 맵핑 된 관계로, 연관관계의 주인(<code class=\"language-text\">FK</code>를 갖는 쪽)은 <code class=\"language-text\">ArticleDetail</code>이다.</p>\n<p>보이는 바와 같이 연관된 <code class=\"language-text\">Entity</code>들은 Lazy 로딩 되도록 설정을 해 놓았고, 각각 db에서 조회 시 아래와 같은 결과가 나온다.</p>\n<h4 id=\"pk를-통해-article조회-시-표출되는-log\" style=\"position:relative;\"><a href=\"#pk%EB%A5%BC-%ED%86%B5%ED%95%B4-article%EC%A1%B0%ED%9A%8C-%EC%8B%9C-%ED%91%9C%EC%B6%9C%EB%90%98%EB%8A%94-log\" aria-label=\"pk를 통해 article조회 시 표출되는 log permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pk를 통해 <code class=\"language-text\">Article</code>조회 시 표출되는 Log</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hibernate:\n    select\n        article0_.idx as idx1_0_0_,\n        article0_.contents as contents2_0_0_,\n        article0_.count as count3_0_0_,\n        article0_.subject as subject4_0_0_\n    from\n        article article0_\n    where\n        article0_.idx=?\nHibernate:\n    select\n        articledet0_.idx as idx1_1_0_,\n        articledet0_.article_idx as article_3_1_0_,\n        articledet0_.data as data2_1_0_\n    from\n        article_detail articledet0_\n    where\n        articledet0_.article_idx=?</code></pre></div>\n<p>의도하지도 않은 <code class=\"language-text\">ArticleDetail</code>도 함께 조회되는 것을 확인 할 수 있다. 이렇게 즉시 실행되는것은 <code class=\"language-text\">N+1문제</code> 원인이 되기 때문에 막아놓는게 좋다.</p>\n<p>일단 의도한 Lazy Loading이 되지 않은 이유는 프록시 객체를 가질 수 없기 때문이다.</p>\n<blockquote>\n<p>프록시 객체가 사용되는 이유는 예를 들어 <code class=\"language-text\">OneToMany</code>관계에서 <code class=\"language-text\">Collection</code>객체는 순수 <code class=\"language-text\">Collection</code> 객체가 아니라 <code class=\"language-text\">Collection</code> 객체를 확장한 프록시 객체를 갖는다(가져오는 클래스 정보를 보면 확인할 수가 있다). 그래서 해당 <code class=\"language-text\">Collection</code>에 접근하려고 하면 초기화 여부를 판별 후 최초 접근 시, DB에 접근 하여 데이터 조회(<code class=\"language-text\">lazy loading</code>)하여 해당 <code class=\"language-text\">entity</code>들을 반환하는 형태다.</p>\n</blockquote>\n<p>하지만 <code class=\"language-text\">OneToOne</code>관계에선 조회 시점에 널값 인지 아니면 연관 entity(<code class=\"language-text\">ArticleDetail</code>)가 있는지 몰라, 일단 DB에서 조회하는 형태라 <code class=\"language-text\">Lazy Loading</code>자체를 지원 안해준다. 찾아보면 서드파티를 추가해서 <code class=\"language-text\">Optional</code>로 한번 감싸서 사용하거나 추가 셋팅하면 지원이 가능한것 같지만 개인적으로 필드값에 연관 <code class=\"language-text\">Entity</code> 자체를 없애서 단방향 연관관계로 사용한다(<code class=\"language-text\">Article</code>에 <code class=\"language-text\">ArticleDetail</code> 필드를 없애버린다.).</p>\n<p>참고 사항으로 <code class=\"language-text\">Article</code>을 조회 시, <code class=\"language-text\">ArticleDetail</code>이 즉시 실행 되는 것이고, 연관관계의 주인인 <code class=\"language-text\">ArticleDetail</code>은 정상적으로 지연실행을 지원한다.</p>\n<h4 id=\"pk를-통해-articledetail조회-시-표출되는-log\" style=\"position:relative;\"><a href=\"#pk%EB%A5%BC-%ED%86%B5%ED%95%B4-articledetail%EC%A1%B0%ED%9A%8C-%EC%8B%9C-%ED%91%9C%EC%B6%9C%EB%90%98%EB%8A%94-log\" aria-label=\"pk를 통해 articledetail조회 시 표출되는 log permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pk를 통해 <code class=\"language-text\">ArticleDetail</code>조회 시 표출되는 Log</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hibernate:\n    select\n        articledet0_.idx as idx1_1_0_,\n        articledet0_.article_idx as article_3_1_0_,\n        articledet0_.data as data2_1_0_\n    from\n        article_detail articledet0_\n    where\n        articledet0_.idx=?</code></pre></div>\n<p>연관관계의 주인은 <code class=\"language-text\">FK</code>값을 가지니까 이거 자체로 null 값 여부를 판별할 수 있어 지연실행이 가능하다.</p>\n<h2 id=\"4-연관-관계-없을-시-조인\" style=\"position:relative;\"><a href=\"#4-%EC%97%B0%EA%B4%80-%EA%B4%80%EA%B3%84-%EC%97%86%EC%9D%84-%EC%8B%9C-%EC%A1%B0%EC%9D%B8\" aria-label=\"4 연관 관계 없을 시 조인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 연관 관계 없을 시 조인</h2>\n<p>연관관계 정의 없이 조인할 때, 개인적으로 <code class=\"language-text\">QuerydslRepositorySupport</code>클래스를 자주 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ArticleDto<span class=\"token punctuation\">.</span>WithArticleInfo</span> <span class=\"token function\">findByIdxWithArticleInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> articleIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Article</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ArticleInfo</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> articleListMap <span class=\"token operator\">=</span> <span class=\"token function\">getQuerydsl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">innerJoin</span><span class=\"token punctuation\">(</span>articleInfo<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>articleInfo<span class=\"token punctuation\">.</span>article<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>articleIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as</span><span class=\"token punctuation\">(</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span>articleInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> articleListMap<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>entry<span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArticleDto<span class=\"token punctuation\">.</span>WithArticleInfo</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>1 대 N 관계에 연관관계가 없을 시, 이런식으로 조회 후 Dto로 감싸서 관리한다. 참고로 <code class=\"language-text\">Projections.constructor</code>이나 <code class=\"language-text\">Projections.bean</code> 같은걸 써서 조회한 데이터를 내가 직접 핸들링 하지 않고 알아서 처리 할 수도 있겠지만 이런건 내부적으로 리플렉션 기반으로 하는거라 개인적으로 싫어하는 방식이라, 조회 후 직접 내가 코드로 처리하는 방법을 많이 쓴다.</p>\n<blockquote>\n<p>리플렉션을 쓰면 컴파일 레벨은 통과되도 런타임 시 버그가 발생 될 수 있어서 개인적으로 싫어한다.</p>\n</blockquote>\n<h2 id=\"5-bulk-insert\" style=\"position:relative;\"><a href=\"#5-bulk-insert\" aria-label=\"5 bulk insert permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. bulk insert</h2>\n<p>개발 하다 보면 대량의 데이터를 <code class=\"language-text\">Insert</code>하고 싶을때가 있다.</p>\n<p><code class=\"language-text\">Spring data jpa</code>를 쓰다보면 제공되는 repository에 <code class=\"language-text\">saveAll</code>이라는 메소드가 있는데 얼핏보면 이 메소드를 통해 <code class=\"language-text\">bulk insert</code>를 하면 되겠구나, 생각 할 수가 있다. 물론 그런 용도로 만들어지긴 했는데 막상 출력되는 로그를 보면 전부 하나씩 쿼리가 실행되는 것을 볼 수가 있다.</p>\n<p>원인은 PK 생성 전략을 <code class=\"language-text\">IDENTITY</code>를 써서 그런데, 영속성 하기 위해서는 <code class=\"language-text\">PK</code>값이 필수이지만 <code class=\"language-text\">PK</code>를 알고 싶으면 DB에 저장하는 방법밖에 없어서 저장 대상인 Entity들을 저장과 동시에 영속성을 지원하기 위해 <code class=\"language-text\">Bulk insert</code> 자체를 지원 안한다고 한다(시퀀스나 pk값을 자체적으로 프로그래밍 내에서 만들면 지원을 하긴 한다).</p>\n<p>지원안한다고 하니 뭐 어떻게 해결할 방법이 없고 어쩔수 없이 차선책으로 <code class=\"language-text\">bulk insert</code> 해야할 때만 JDBC template를 쓰도록 하고 있다.</p>","fields":{"slug":"/posts/spring/spring-jpa/","tagSlugs":["/tag/spring/","/tag/jpa/","/tag/orm/"]},"frontmatter":{"date":"2020-11-27T03:08:42.258Z","description":"Spring DATA JPA & QueryDSL를 써보면서 느낀 주의점 & 고난","tags":["spring","jpa","orm"],"title":"JPA","socialImage":null}}},"pageContext":{"slug":"/posts/spring/spring-jpa/"}},"staticQueryHashes":["251939775","357378587","401334301"]}