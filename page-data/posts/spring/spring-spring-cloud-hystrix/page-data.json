{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/spring/spring-spring-cloud-hystrix/","result":{"data":{"markdownRemark":{"id":"34335859-260f-5f9a-95be-17a374ab6e8c","html":"<p>여기서 설명할 내용 및 샘플은 <a href=\"https://github.com/qweasd147/spring-cloud/tree/master/service-a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">spring-cloud MSA 샘플</a> 여기서 확인 가능</p>\n<h2 id=\"1-feign\" style=\"position:relative;\"><a href=\"#1-feign\" aria-label=\"1 feign permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Feign</h2>\n<p><code class=\"language-text\">Feign</code>은 기존 <code class=\"language-text\">RestTemplate</code>와 하는 역할이 비슷하다. 자바 프로그래밍 상에서 외부 api등을 호출할 때 쓰이며, 여기에 추가로 MSA에 특화된 기능이 존재한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"service-b\"</span>\n  <span class=\"token punctuation\">,</span> fallbackFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">BServiceFallbackFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span>\n  <span class=\"token punctuation\">,</span> configuration <span class=\"token operator\">=</span> <span class=\"token class-name\">FeignConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/service/b\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/service/b/{idx}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">getOne</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"idx\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기본 적인 사용법은 위와 같은데 인터페이스 + 어노테이션으로 <code class=\"language-text\">Controller</code>를 구현하듯 정의해놓으면 알아서 구현체를 구현해줘서 편하게 사용이 가능하다.</p>\n<p>또한 사용해보면서 개인적으로 느낀 장점으로는 <code class=\"language-text\">Logging</code>관리가 편하다는 건데, 요청 &#x26; 응답 로그 정보를 남길려면 <code class=\"language-text\">RestTemplate</code> 경우 <code class=\"language-text\">RestTemplate</code>클래스의 로그 레벨을 변경하거나 아니면 별도의 <code class=\"language-text\">Interceptor</code>를 구현해주는 방법 밖엔 없는데 <code class=\"language-text\">Feign</code>같은 경우엔 위와 같은 인터페이스 단위로 로그 레벨 정의가 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FeignConfiguration</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Logger<span class=\"token punctuation\">.</span>Level</span> <span class=\"token function\">feignLoggerLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Logger<span class=\"token punctuation\">.</span>Level</span><span class=\"token punctuation\">.</span>FULL<span class=\"token punctuation\">;</span> <span class=\"token comment\">//NONE, BASIC, HEADERS, FULL 가능</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 통신 간 남길 로그를 정의 하고</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">logging</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">level</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">com.service.demo.service.BService</span><span class=\"token punctuation\">:</span> DEBUG</code></pre></div>\n<p>이렇게 서비스(인터페이스 클래스) 단위로 레벨을 관리할 수가 있어서 편하게 관리가 가능했다.</p>\n<p>또한 API 통신 시, 발생 할 수 있는 에러 처리는 <code class=\"language-text\">FallbackFactory</code>를 구현하여 처리할 수가 있다. 아래와 같이 구현하면 호출 시 에러가 발생되면 <code class=\"language-text\">BServiceFallbackImpl</code>에서 매칭되는 메소드가 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BServiceFallbackFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FallbackFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BService</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BService</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> cause<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"외부 서비스 호출 중 에러 감지\"</span><span class=\"token punctuation\">,</span> cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BServiceFallbackImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하나의 서비스 클래스를 구현하는데 1+1으로 구현(위 소스에서 <code class=\"language-text\">BServiceFallbackImpl</code> class)해야 하는게 거부감이 들 수도 있지만, MSA 환경에서 에러 후처리 관리는 사실상 필수라서 어쩔수 없다고 생각된다.(유용할 때가 많다)</p>\n<p>추가로 외부 API를 호출할때 에러 발생 비율이 많으면 이 전에 설명한대로 <code class=\"language-text\">Circuit Breaker Open</code>이 된다.</p>\n<h2 id=\"2-ribbon\" style=\"position:relative;\"><a href=\"#2-ribbon\" aria-label=\"2 ribbon permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Ribbon</h2>\n<p><code class=\"language-text\">Ribbon</code>은 <code class=\"language-text\">L7 Load Balancing</code> 작업을 수행한다고 하였다. 로드벨런싱을 위해 호스트 서버의 물리적 접근 주소가 필요하지만 <code class=\"language-text\">Eureka</code>를 쓴것도 아니고 로드벨런싱도 <code class=\"language-text\">Docker Network</code>를 통해 처리하므로 다른 서비스에 접근 할 수 있는 정보만 입력하였다.</p>\n<h4 id=\"로컬-환경\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EC%BB%AC-%ED%99%98%EA%B2%BD\" aria-label=\"로컬 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로컬 환경</h4>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">service-b</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ribbon</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">listOfServers</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8081</span></code></pre></div>\n<h4 id=\"docker-container-환경\" style=\"position:relative;\"><a href=\"#docker-container-%ED%99%98%EA%B2%BD\" aria-label=\"docker container 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker Container 환경</h4>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">service-b</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ribbon</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">listOfServers</span><span class=\"token punctuation\">:</span> serviceb<span class=\"token punctuation\">:</span><span class=\"token number\">8081</span></code></pre></div>\n<p>이런 식으로 접근 가능한 주소만 동적으로 주입 하는 정도로만 셋팅하였다.</p>\n<h2 id=\"3-hystrix\" style=\"position:relative;\"><a href=\"#3-hystrix\" aria-label=\"3 hystrix permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Hystrix</h2>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">hystrix</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># command key. use 'default' for global setting.</span>\n      <span class=\"token key atrule\">execution</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">isolation</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">thread</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">timeoutInMilliseconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span>\n        <span class=\"token punctuation\">...</span>\n    <span class=\"token key atrule\">custom_command_key</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">excution</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">isolation</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">thread</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">timeoutInMilliseconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span>\n        <span class=\"token punctuation\">...</span></code></pre></div>\n<p><code class=\"language-text\">Hystrix</code>는 위와 같은 방법으로 설정값 셋팅이 가능한데 보이는 바와 같이 <code class=\"language-text\">default</code> or 다른 키값으로 셋팅값을 맞춰 놓았다가 원하는 서비스 별로 셋팅값을 매칭 시켜 적용이 가능하다. <code class=\"language-text\">Thread Pool</code>을 사용한다면 서비스 별로 공유 할지 여부도 셋팅이 가능하다. 자세한 옵션 값은 역시 문서 또는 <code class=\"language-text\">HystrixCommandProperties.class</code>파일(…)을 통해 옵션값 확인이 가능하다.</p>","fields":{"slug":"/posts/spring/spring-spring-cloud-hystrix/","tagSlugs":["/tag/spring/","/tag/cloud/","/tag/msa/"]},"frontmatter":{"date":"2020-10-15T01:30:21.250Z","description":"MSA 환경에서 에러 전파 방지. +(Feign, Ribbon, Circuit Breaker) 셋팅","tags":["spring","cloud","msa"],"title":"Spring Cloud - Hystrix","socialImage":null}}},"pageContext":{"slug":"/posts/spring/spring-spring-cloud-hystrix/"}},"staticQueryHashes":["113262799","1828819329","251939775","401334301"]}