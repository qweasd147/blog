{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/java/java-lambda/","result":{"data":{"markdownRemark":{"id":"045c19f4-e858-5a6f-87ef-2a01d56ce05d","html":"<h1 id=\"lambda\" style=\"position:relative;\"><a href=\"#lambda\" aria-label=\"lambda permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lambda.</h1>\n<h1 id=\"1-장점\" style=\"position:relative;\"><a href=\"#1-%EC%9E%A5%EC%A0%90\" aria-label=\"1 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 장점</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">간단하다! 그래서 알아보기가 쉽고 마치 자바에 없는 함수를 사용하는 느낌을 받는다.</code></pre></div>\n<h1 id=\"2-lambda-기본-사용법\" style=\"position:relative;\"><a href=\"#2-lambda-%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"2 lambda 기본 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Lambda 기본 사용법</h1>\n<h3 id=\"21-메소드-표현식을--형태로-사용함\" style=\"position:relative;\"><a href=\"#21-%EB%A9%94%EC%86%8C%EB%93%9C-%ED%91%9C%ED%98%84%EC%8B%9D%EC%9D%84--%ED%98%95%ED%83%9C%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%A8\" aria-label=\"21 메소드 표현식을  형태로 사용함 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 메소드 표현식을 ()=>{} 형태로 사용함</h3>\n<h3 id=\"22-functional-interface\" style=\"position:relative;\"><a href=\"#22-functional-interface\" aria-label=\"22 functional interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 Functional Interface</h3>\n<h4 id=\"221-기본-사용법\" style=\"position:relative;\"><a href=\"#221-%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"221 기본 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2.1 기본 사용법</h4>\n<p>java에선 기본적으로 함수 개념이 없다. 하지만 함수를 주고 받아야 하기 때문에 조금 편법을 사용한다.</p>\n<p>interface에 하나의 메소드만 선언 해 놓고, 이 메소드의 구현하여 interface를 주고 받는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">LambdaInterface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomeThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">likeCallback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LambdaInterface</span> cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 함수를 넘겨 받아 원하는 시점에 호출할수 있다</span>\n    cb<span class=\"token punctuation\">.</span><span class=\"token function\">doSomeThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token function\">likeCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//TODO : .....</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 interface에 단 하나의 메소드만 선언하고(<code class=\"language-text\">LambdaInterface</code>의 <code class=\"language-text\">doSomeThing</code>) 사용 시,</p>\n<p>그 메소드 부분만 정의 하고 사용 하는 쪽에서는 해당 인터페이스로 받아 그냥 사용하는 방식이다. 다른 부분은</p>\n<p>그렇다 치더라도, 위의 <code class=\"language-text\">LambdaInterface</code>는 진짜 별 의미 없는 인터페이스가 된다.</p>\n<p>무조건 하나의 메소드만 강제해야 되고, 가장 큰 문제점은 확장성이다.</p>\n<p>위의 <code class=\"language-text\">doSomeThing</code>은 반환값이 없고, 매개변수가 없다. 하지만 매개변수가 있고 반환값이 있다면?</p>\n<p>또 새로운 의미없는 인터페이스를 작성하는 방식이다. java 1.8이상부터 이렇게 별 의미없고</p>\n<p>(어디까지나 모든 소스에서 쓸수도 있는 인터페이스 라는 점에서 의미가 없다는 것이다.)</p>\n<p>경우에 따라 많이 선언해 놓아야 하는 이런 인터페이스를 미리 선수 쳐서 선언만 해놓았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token class-name\">R</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 <code class=\"language-text\">interface</code>는 이러한 조건을 만족하려고 1.8버전 이상부터 미리 만들어 놓은 인터페이스 이다.</p>\n<p>제너릭을 이용하여 타입을 선언 해놓았고(T -> argument type, R -> result type) 단 하나의 메소드(apply)만 존재한다.</p>\n<p>이렇게 단 하나의 메소드만 선언 해 놓고 사용시 그 메소드만 사용 목적인 인터페이스를 컴파일에서 강제하기 위하여,</p>\n<p><code class=\"language-text\">@FuntionalInterface</code>를 선언해 놓는다. 이 어노테이션을 적어 놓으면 2개 이상의 메소드는 선언이 불가능하다.</p>\n<p>아래 표는 자바에서 제공하는 함수형 인터페이스를 표로 나타냈다(전부 다는 아니고 일부만)</p>\n<table>\n<thead>\n<tr>\n<th>Interface</th>\n<th>Method</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Function&#x3C;T, R></td>\n<td>R apply(T t);</td>\n</tr>\n<tr>\n<td>Predicate&#x3C;T></td>\n<td>boolean test(T t);</td>\n</tr>\n<tr>\n<td>Consumer&#x3C;T></td>\n<td>void accept(T t);</td>\n</tr>\n<tr>\n<td>Supplier&#x3C;T></td>\n<td>T get();</td>\n</tr>\n<tr>\n<td>Runnable</td>\n<td>void run();</td>\n</tr>\n</tbody>\n</table>\n<p>T는 type(매개변수 타입), R은 Return Type을 나타내므로, 용도는 꽤나 직관적으로 알 수 있다.</p>\n<p>또한 표에는 없지만 매개변수가 2개인 함수형 인터페이스는 위 인터페이스 명 앞에 Bi가 붙는다(<code class=\"language-text\">BiFunction&lt;T,U,R&gt;</code>).</p>\n<p><code class=\"language-text\">Runnable</code> 만 java.lang 패키지에 있고 그 외 것들과 더 많은 함수형 인터페이스는</p>\n<p>java.util.function 패키지에 더 많은 함수형 인터페이스가 존재한다.</p>\n<hr>\n<h4 id=\"222-collection-framework-에서-활용\" style=\"position:relative;\"><a href=\"#222-collection-framework-%EC%97%90%EC%84%9C-%ED%99%9C%EC%9A%A9\" aria-label=\"222 collection framework 에서 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2.2 collection framework 에서 활용</h4>\n<p>이런 함수형 인터페이스의 강점은 javascript의 callback과 같은 기능을 생각하면 된다.</p>\n<p>기본 native code에서 공통적인 비지니스 로직을 처리하고, 딱 필요한 부분만 사용자가</p>\n<p>함수(정확히는 메소드)를 구현 하여 호출하는 방식이다.</p>\n<table>\n<thead>\n<tr>\n<th>Interface</th>\n<th>Method</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Collection</td>\n<td>boolean removeIf(Predicate&#x3C;E> filter)</td>\n<td>조건에 맞는 요소를 삭제</td>\n</tr>\n<tr>\n<td>List</td>\n<td>void replaceAll(UnaryOperator&#x3C;E> operator)</td>\n<td>모든 요소를 변환하여 대체</td>\n</tr>\n<tr>\n<td>Iterable</td>\n<td>void forEach(Consumer&#x3C;T> action)</td>\n<td>모든 요소에 작업 action을 수행</td>\n</tr>\n<tr>\n<td>Map</td>\n<td>V compute(K key, BiFunction&#x3C;K, V, V> f)</td>\n<td>지정된 키의 값에 작업 f를 수행</td>\n</tr>\n<tr>\n<td>Map</td>\n<td>V computeIfAbsent(K key, Function&#x3C;K, V> f)</td>\n<td>키가 없으면, 작업 f 수행 후 추가</td>\n</tr>\n<tr>\n<td>Map</td>\n<td>V computeIfPresent(K key, BiFunction&#x3C;K, V, V> f)</td>\n<td>지정된 키가 있을 때, 작업 f 수행</td>\n</tr>\n<tr>\n<td>Map</td>\n<td>V merge(K key, V value, BiFunction&#x3C;V, V, V> f)</td>\n<td>모든 요소에 병합작업 f를 수행</td>\n</tr>\n<tr>\n<td>Map</td>\n<td>void forEach(BiConsumer&#x3C;K, V> action)</td>\n<td>모든 요소에 작업 action을 수행</td>\n</tr>\n<tr>\n<td>Map</td>\n<td>void replaceAll(BiFunction&#x3C;K, V, V> action)</td>\n<td>모든 요소에 치환작업 f를 수행</td>\n</tr>\n</tbody>\n</table>\n<p>개인적으로 좋은 내용들이라 생각해서 ‘자바의 정석’ 책을 읽다가 그냥 배꼇다…</p>\n<p>아무튼 사용 예제를 보면</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">collectionDefaultMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    strList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    strList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    strList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    strList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"four\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    strList<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token string\">\"number : \"</span><span class=\"token operator\">+</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    strList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 내가 List에 모든 아이템을 변경할때와 모든 아이템을 출력 한다고 가정하면</p>\n<p>replaceAll과 forEach문을 사용을 안한다면 일일이 모든 아이템을 꺼내서 작업을 해야 할 것이다.</p>\n<p>하지만 위와같이 정말 내가 필요한 부분만 구현하여 빠르고 간결하게 사용 가능하다.</p>\n<p>공부하면서 느낀 바로는 jdk 1.8 부터 interface의 default method + lambda + collection framework의 조합으로 상당히</p>\n<p>편하고 간결해졌다고 생각한다.</p>\n<h4 id=\"223-default-method\" style=\"position:relative;\"><a href=\"#223-default-method\" aria-label=\"223 default method permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2.3 default method</h4>\n<p>java 1.8부터 인터페이스에 default method와 static method가 추가되었다. 간단히 설명하면</p>\n<p>인터페이스에 default 또는 static으로 메소드의 구현부를 추가할 수 있다.</p>\n<p>함수형 인터페이스는 하나의 메소드만 선언할 수가 있지만 이러한 default, static 메소드는 따로 제약 없이 여러개 추가가 가능하다.</p>\n<p>이러한 특성 때문에 사용할 땐 마치 함수를 넘겨주고 내부적으로는 객체로 사용하는 듯한 느낌이다.</p>\n<p><code class=\"language-text\">Function</code>과 <code class=\"language-text\">Predicate</code>에는 아래 표와 같이 각각 default method가 존재한다.</p>\n<h3 id=\"function-class\" style=\"position:relative;\"><a href=\"#function-class\" aria-label=\"function class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Function class</h3>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>method</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>default</td>\n<td>Function&#x3C;V, R> <br/> compose(Function&#x3C;? super V, ? extends T> before)</td>\n<td>before Function을 실행 후, 자기 자신 Function 실행</td>\n</tr>\n<tr>\n<td>default</td>\n<td>Function&#x3C;T, V> <br/> andThen(Function&#x3C;? super R, ? extends V> after)</td>\n<td>자기자신 Function을 실행 후, after Function 실행</td>\n</tr>\n<tr>\n<td>static</td>\n<td>Function&#x3C;T, T> identity()</td>\n<td>항등 함수를 반환 t->t</td>\n</tr>\n</tbody>\n</table>\n<p>솔직히 딱히 설명할께 없다…</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">funcCombine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> before <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"before\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"before\"</span><span class=\"token operator\">+</span>str<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> after <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"after\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> str<span class=\"token operator\">+</span><span class=\"token string\">\"after\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> combine <span class=\"token operator\">=</span> before<span class=\"token punctuation\">.</span><span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span>after<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> resultStr <span class=\"token operator\">=</span> combine<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"문자열\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>resultStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*\n    before\n    after\n    before문자열after\n    */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Function class를 활용하여 함수를 합성하여 새로운 함수를 만들어 낼 수가 있다.</p>\n<p>compose와 andthen의 차이는 그저 어떤게 먼저 실행 될 지 차이고, 소스 자체가 몇줄 되지 않아 소스 까보는것도 괜찮은 방법이다.</p>\n<h3 id=\"predicate-class\" style=\"position:relative;\"><a href=\"#predicate-class\" aria-label=\"predicate class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Predicate class</h3>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>method</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>default</td>\n<td>Predicate&#x3C;T> and(Predicate&#x3C;? super T> other)</td>\n<td>자기 자신 결과와 other Predicate 결과 and 연산</td>\n</tr>\n<tr>\n<td>default</td>\n<td>Predicate&#x3C;T> negate()</td>\n<td>자기자신 결과를 not 연산</td>\n</tr>\n<tr>\n<td>default</td>\n<td>Predicate&#x3C;T> or(Predicate&#x3C;? super T> other)</td>\n<td>자기 자신 결과와 other Predicate 결과 or 연산</td>\n</tr>\n<tr>\n<td>static</td>\n<td>Predicate&#x3C;T> isEqual(Object targetRef)</td>\n<td>입력받은 object와 같은지 비교하는 Predicate을 반환한다</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">funcCombine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> isTrue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>str<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> isFalse <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>str<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> onlyFalse <span class=\"token operator\">=</span> isTrue<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>isFalse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> onlyTrue <span class=\"token operator\">=</span> onlyFalse<span class=\"token punctuation\">.</span><span class=\"token function\">negate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mayBeTrue <span class=\"token operator\">=</span> isTrue<span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span>isFalse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">boolean</span> onlyFalseResult <span class=\"token operator\">=</span> onlyFalse<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> onlyTrueResult <span class=\"token operator\">=</span> onlyTrue<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> byInputResult <span class=\"token operator\">=</span> mayBeTrue<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"only false : \"</span><span class=\"token operator\">+</span>onlyFalseResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"only true : \"</span><span class=\"token operator\">+</span>onlyTrueResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"may be true : \"</span><span class=\"token operator\">+</span>byInputResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*\n    only false : false\n    only true : true\n    by input : true\n    */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Predicate를 활용해서 함수를 만들고, and, or not 연산을 실행할 수가 있다.</p>\n<p>이것도 간단하게 구현이 되어 있어서 혹시나마 이해가 안된다면 소스 까보는것도 괜찮다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">아무튼 이런식으로 함수형 인터페이스를 사용함으로써 꽤나 유용하고,\n\njavascript 디자인 패턴에서 커링(currying) 같은것도 충분히 구현이 가능할꺼 라고 본다.</code></pre></div>\n<h1 id=\"3-주의할점-및-기타-활용\" style=\"position:relative;\"><a href=\"#3-%EC%A3%BC%EC%9D%98%ED%95%A0%EC%A0%90-%EB%B0%8F-%EA%B8%B0%ED%83%80-%ED%99%9C%EC%9A%A9\" aria-label=\"3 주의할점 및 기타 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3 주의할점 및 기타 활용</h1>\n<h3 id=\"31-외부-변수는-별다른-선언이-없어도-final하다-아래-소스는-18-버전-기준\" style=\"position:relative;\"><a href=\"#31-%EC%99%B8%EB%B6%80-%EB%B3%80%EC%88%98%EB%8A%94-%EB%B3%84%EB%8B%A4%EB%A5%B8-%EC%84%A0%EC%96%B8%EC%9D%B4-%EC%97%86%EC%96%B4%EB%8F%84-final%ED%95%98%EB%8B%A4-%EC%95%84%EB%9E%98-%EC%86%8C%EC%8A%A4%EB%8A%94-18-%EB%B2%84%EC%A0%84-%EA%B8%B0%EC%A4%80\" aria-label=\"31 외부 변수는 별다른 선언이 없어도 final하다 아래 소스는 18 버전 기준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 외부 변수는 별다른 선언이 없어도 final하다. 아래 소스는 1.8 버전 기준</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lambdaBase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">callMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//num = 10;  ERROR!</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">callMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomeThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//num = 10;  ERROR!</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음과 같은 소스가 있다고 했을떄, 내부에서 num을 바꾸는 행위(num=10)는 할수 없다. 이는 내부적으로</p>\n<p>변수가 final로 선언 되어서 그러는데, 암시적으로 fianl로 처리하는 이유는 thread safe 문제 때문이라고 한다.</p>\n<p>해당 메소드의 실행 시점(또는 순서)을 알 수가 없기에, 아예 내부적으로도 final로 입력 받는다고 한다.</p>\n<p>따라서 공통된 resource(위 소스에서 num)를 어디서 요청 되든 공통된 값으로 사용 가능하다.</p>\n<p>추가적으로 자세히 알고 싶을 경우, side effect, effectively final, thread safe 등의 키워드로 검색!</p>\n<p>참고 자료 : <a href=\"http://wonwoo.ml/index.php/post/1125\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://wonwoo.ml/index.php/post/1125</a></p>\n<h3 id=\"32-closure\" style=\"position:relative;\"><a href=\"#32-closure\" aria-label=\"32 closure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 closure</h3>\n<p>java에서 closure를 사용할 수 있는데, 다른 쪽에서 설명하기도 뭐해서 람다와 같이 설명함.</p>\n<p>혹시나 closure 개념을 모른다면 javascript를 참고하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">-></span>  n<span class=\"token operator\">*</span>num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 static method는 Function(Interface이다)의 구현체를 반환하는 메소드가 되겠다.</p>\n<p>Funtion은 단일 메소드의 함수형 인터페이스 이므로, 이러한 형태가 가능하다.</p>\n<p>아무튼 반환 된 메소드를 사용시, 내부의 num값 범위를 기억(마치 javascript의 lexical scope)</p>\n<p>하고 있다는 점에서 closure와 비슷하다고 볼수 있다. 문제점은 역시 반환하는 메소드에서 num값을</p>\n<p>바꿀수 없다는 제한 사항이 존재한다.</p>\n<p>혹시나 소스가 잘 이해가 안간다면 <code class=\"language-text\">Function</code>은 <code class=\"language-text\">interface</code>라는 점을 잘 기억하고, 추상팩토리 패턴(design pattern)을 공부하자.</p>\n<h3 id=\"33-method-reference\" style=\"position:relative;\"><a href=\"#33-method-reference\" aria-label=\"33 method reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3 Method Reference</h3>\n<p>메소드 참조는 정말 순수 하고 최소화된 소스만 작성하는 목적으로 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">methodReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> notUseReference <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> useReference <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">;</span>\n\n    notUseReference<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"only Lambda!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    useReference<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"use Method Reference!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>소스 자체는 이해하는데 무리는 없을 꺼라고 생각된다.</p>\n<p><code class=\"language-text\">ClassName::MethodName</code> 형태로 작성하고, 메소드는 static이건 아니건 상관없다.</p>\n<p>참고로 생성자는 <code class=\"language-text\">ClassName::new(String::new)</code> 이런식으로 사용한다.</p>\n<p>위 소스를 보면 <code class=\"language-text\">useReference</code> 메소드에서 넘겨받는 파라미터는 Cusumer의 generics에 의해 개수와 타입이</p>\n<p>제한되어 맵핑(유추 가능)되는 것을 알수 있다. 근데 개인적으로 메소드 참조는 뭔가</p>\n<p>엄청 유용하다! 간결하다! 혁신이다! 라는 느낌보단 익숙하지 않아 헤깔리기만 하여 잘 사용은 안할꺼 같다.</p>","fields":{"slug":"/posts/java/java-lambda/","tagSlugs":["/tag/lambda/","/tag/java/","/tag/functional/","/tag/function/"]},"frontmatter":{"date":"2016-02-02T22:40:32.169Z","description":"중요한 로직만 작성하여 가독성을 높이고 functional interface에 적합하게 사용하고 싶을때","tags":["lambda","java","functional","function"],"title":"Lambda","socialImage":null}}},"pageContext":{"slug":"/posts/java/java-lambda/"}}}