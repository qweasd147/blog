{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/java/java-oome/","result":{"data":{"markdownRemark":{"id":"ab9fc5a8-f2c7-565f-b93a-92d9922c60e2","html":"<p>미리 말하면 샘플 코드들은 OOME 발생을 쉽게 하기 위해 힙/메타스페이스 메모리 공간을 상당히 적게 만들고 테스트 하였다</p>\n<h2 id=\"1-java-heap-space\" style=\"position:relative;\"><a href=\"#1-java-heap-space\" aria-label=\"1 java heap space permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Java heap space</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OOME</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">OOME</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그냥 위 코드를 실행 시키면 언젠가 heap 메모리가 터지게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">java.lang.OutOfMemoryError: Java heap space\n\tat java.base/java.lang.Class.forName0(Native Method)\n\tat java.base/java.lang.Class.forName(Class.java:315)\n  ...\n  ...\n  ...</code></pre></div>\n<p>가장 많이 볼 것이라 예상되는 <code class=\"language-text\">OOME</code> 이다. 발생 이유는 <code class=\"language-text\">heap</code> 메모리가 부족해서 발생하는것인데, 발생했다고 heap 메모리만 늘리다보면 답이 없다. 메모리 누수는 없었는지, 현재 차지하고 있는 heap memory가 어느 정도인지 파악하고 <code class=\"language-text\">heap</code> 메모리를 늘리던가 경우에 따라 <code class=\"language-text\">java application</code>을 <code class=\"language-text\">scale down</code> 하는게 더 나은지 생각하고 작업하는걸 추천한다.</p>\n<p><code class=\"language-text\">heap</code> 영역에는 생성된 객체가 저장되는 공간인데, 생성된 객체가 heap 영역에 저장할 공간이 없다고 바로 <code class=\"language-text\">OOME</code>가 발생하는게 아니라 일단 <code class=\"language-text\">GC</code>를 돌려보고(필요에 따라 <code class=\"language-text\">yong/old/full</code>이 돌아간다) 그래도 메모리가 부족하면 <code class=\"language-text\">OOME</code>가 발생하는 것이다. 즉, 기회를 줬는데도(GC 돌아가는거) 터졌다는건 메모리 누수 여부도 반드시 확인 해볼 사항이다(물론 진짜 물리적으로 heap이 너무 부족 해서 발생 할 수도 있다).</p>\n<blockquote>\n<p>GC 로그를 보다보면 GC가 돌아가는 이유도 알 수 있는데, 메모리 할당 실패(<code class=\"language-text\">Allocation Failure</code>) 시에도 GC가 돌아가는것을 확인 할 수 있다.</p>\n</blockquote>\n<h2 id=\"2-gc-overhead-limit-exceeded\" style=\"position:relative;\"><a href=\"#2-gc-overhead-limit-exceeded\" aria-label=\"2 gc overhead limit exceeded permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. GC overhead limit exceeded</h2>\n<p>발생 조건을 적어보자면</p>\n<ul>\n<li>cpu 사용량 중 98%를 GC 돌리는데 사용</li>\n<li>GC 돌렸는데도 heap의 2% 이하면 확보</li>\n</ul>\n<p>이름 그대로 GC로 인한 오버헤드가 너무 크면 발생한다. 현재 내 환경을 기준으로 당장 위의 <code class=\"language-text\">Java heap space</code>에서 설명한 코드를 자바 버전만 8로 바꿔서 실행 해봤더니 발생하였고, 발생 근본적인 원인은 <strong>똑같은 이유</strong> 일 가능성이 높다. 즉, 결국엔 <code class=\"language-text\">heap</code> 메모리가 부족해서 인데 일시적으로 메모리가 큰 작업, 메모리 누수 등이 발생 이유 일 수도 있다. 또한 limit조건을 없앨수도 있지만 그런식으로 해결하는건 별로 좋은 방법은 아니다.</p>\n<blockquote>\n<p>자바 8의 기본 GC는 <code class=\"language-text\">Parallel GC</code> 이다.</p>\n</blockquote>\n<blockquote>\n<p>혹시나마 오버헤드 제한을 끄고 싶으면 <code class=\"language-text\">-XX:-UseGCOverheadLimit</code> 옵션을 주면 된다. (비추천)</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Exception in thread \"main\" java.lang.OutOfMemoryError: GC overhead limit exceeded\n\tat java.lang.Integer.valueOf(Integer.java:832)\n  ...\n  ...</code></pre></div>\n<h2 id=\"3-requested-array-size-exceeds-vm-limit\" style=\"position:relative;\"><a href=\"#3-requested-array-size-exceeds-vm-limit\" aria-label=\"3 requested array size exceeds vm limit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Requested array size exceeds VM limit</h2>\n<p>힙보다 더 큰 Array가 요청되는 경우 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OOME</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Exception in thread \"main\" java.lang.OutOfMemoryError: Requested array size exceeds VM limit\n  ...\n  ...</code></pre></div>\n<p>이건 그냥 코드가 잘못된 케이스라고 봐야한다. break 없이 동적으로 배열 크기를 늘리는게 아닌지 확인해봐야한다.</p>\n<h2 id=\"4-metaspace\" style=\"position:relative;\"><a href=\"#4-metaspace\" aria-label=\"4 metaspace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Metaspace</h2>\n<p><code class=\"language-text\">Metaspace</code>는 <code class=\"language-text\">Class</code> 관련 메타데이터가 저장되는 공간이라고 하였다. 즉, 너무 많은 <code class=\"language-text\">Class</code> 정보를 로드하면 발생하게 되지만, 물론 이 <code class=\"language-text\">metaspace</code>로 GC 대상이며 해당 클래스에 대한 참조 및 인스턴스가 없을때 GC에 의해 회수된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OOME</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">metaspace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">ClassPool</span> cp <span class=\"token operator\">=</span> <span class=\"token class-name\">ClassPool</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> clazz <span class=\"token operator\">=</span> cp<span class=\"token punctuation\">.</span><span class=\"token function\">makeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dummy clazz \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"created \"</span> <span class=\"token operator\">+</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CannotCompileException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"make clazz error\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>참고로 동적으로 클래스를 만들기 위해 외부 라이브러리를 사용하였고, 해당 <code class=\"language-text\">OOME</code>를 쉽게 발생하기 위해 상대적으로 Heap 메모리는 크게, metaspace(<code class=\"language-text\">MaxMetaspaceSize</code>)는 적게 셋팅하고 실행하여야 한다. TMI로 GC 로그를 보면 metaspace를 확보 하려하고 해도 실패하는거 봐선 이 라이브러리에 동적으로 만들어진 클래스를 참조&#x26;관리하는 로직이 있을것이라 생각된다.</p>\n<blockquote>\n<p><a href=\"https://github.com/jboss-javassist/javassist\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/jboss-javassist/javassist</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Exception in thread \"main\" java.lang.OutOfMemoryError: Metaspace\n  ...\n  ...</code></pre></div>\n<h2 id=\"5-그-외-oome\" style=\"position:relative;\"><a href=\"#5-%EA%B7%B8-%EC%99%B8-oome\" aria-label=\"5 그 외 oome permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 그 외 OOME</h2>\n<p>그 외에도 발생 이유가 있지만 정말 보기 힘든 에러들이며, 일반적인 상황에선 볼 일이 없는 에러들이 있다. 추가로 쓰는것 말고도 몇가지가 있는데 그건 더더욱 보기 힘들꺼라 생각된다.</p>\n<h3 id=\"request-size-bytes-for-reason-out-of-swap-space\" style=\"position:relative;\"><a href=\"#request-size-bytes-for-reason-out-of-swap-space\" aria-label=\"request size bytes for reason out of swap space permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>request size bytes for reason. Out of swap space?</h3>\n<p>런타임 시에 가상 메모리(swap memory)를 추가로 확보 할 수 없을 경우 발생한다.</p>\n<h3 id=\"compressed-class-space\" style=\"position:relative;\"><a href=\"#compressed-class-space\" aria-label=\"compressed class space permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compressed class space</h3>\n<p>class의 정보가 저장되는 크기가 부족하면 발생한다.</p>\n<p>이 공간에 대해 요약해서 설명하자면 기본적으로 <code class=\"language-text\">UseCompressedClassPointers</code>라는 옵션을 사용하면 <code class=\"language-text\">metaspace</code>는 2개의 context로 분리되는데, 클래스 정보 일부분이 <code class=\"language-text\">Compressed class space</code>라는 곳에 저장된다(기본 옵션으로 활성화 되어 있음).</p>\n<blockquote>\n<p>java 클래스의 내부 정보(<code class=\"language-text\">internal representation of Java classes</code>)는 <code class=\"language-text\">class space (Compressed class space)</code> 안에, 그 외 <code class=\"language-text\">method</code>, <code class=\"language-text\">constant pools</code>, <code class=\"language-text\">anotation</code> 등이 <code class=\"language-text\">non class metaspace</code> 저장된다. 궁극적으로 이렇게 하는 이유는 32/64 bit로 차이로 인한 메모리 최적화를 위해 설계되었으며, 이런 두 공간의 합은 최대 metaspace(<code class=\"language-text\">MaxMetaspaceSize</code>) 공간보다 클 수 없다.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://wiki.openjdk.java.net/display/HotSpot/Metaspace\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">compressed 옵션에 따른 metaspace context 설명</a></li>\n<li><a href=\"https://stackoverflow.com/questions/54250638/is-compressedclassspacesize-area-contains-maxmetaspacesize-area\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Compressed Class Space 관련 질답(Stack overflow)</a></li>\n<li><a href=\"https://stuefe.de/posts/metaspace/sizing-metaspace/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">class area + non class area + metaspace 설명</a></li>\n<li><a href=\"https://shipilev.net/jvm/anatomy-quarks/23-compressed-references/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">jvm Compressed References 관련 설명</a></li>\n</ul>","fields":{"slug":"/posts/java/java-oome/","tagSlugs":["/tag/jvm/","/tag/java/","/tag/heap/","/tag/gc/"]},"frontmatter":{"date":"2022-02-10T05:55:23.624Z","description":"OOME(Out Of Memory Error) 종류 및 발생 조건","tags":["jvm","java","heap","GC"],"title":"Java OOME 종류","socialImage":null}}},"pageContext":{"slug":"/posts/java/java-oome/"}},"staticQueryHashes":["113262799","1828819329","251939775","401334301"]}