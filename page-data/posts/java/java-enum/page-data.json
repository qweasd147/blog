{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/java/java-enum/","result":{"data":{"markdownRemark":{"id":"90415a83-bd5a-5e36-8505-d8191da6c974","html":"<h1 id=\"enum\" style=\"position:relative;\"><a href=\"#enum\" aria-label=\"enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>enum.</h1>\n<h1 id=\"1-enum-\" style=\"position:relative;\"><a href=\"#1-enum-\" aria-label=\"1 enum  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. enum ?</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">타입관리까지 가능한 열거형 상수. 값이라기 보단 클래스에 가깝다.</code></pre></div>\n<h1 id=\"2-장점\" style=\"position:relative;\"><a href=\"#2-%EC%9E%A5%EC%A0%90\" aria-label=\"2 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 장점</h1>\n<h3 id=\"21-타입에-안전한-열거형typesafe-enum\" style=\"position:relative;\"><a href=\"#21-%ED%83%80%EC%9E%85%EC%97%90-%EC%95%88%EC%A0%84%ED%95%9C-%EC%97%B4%EA%B1%B0%ED%98%95typesafe-enum\" aria-label=\"21 타입에 안전한 열거형typesafe enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 타입에 안전한 열거형(typesafe enum).</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enumBase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//Card.Kind.CLOVER == Card.Value.FOUR;  //ERROR 내부적으로 값이 다름. 안전하게 값 비교 가능</span>\n\n    <span class=\"token class-name\">Card</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>CLOVER <span class=\"token operator\">==</span> <span class=\"token class-name\">Card</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>HEART     <span class=\"token comment\">//false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 상수값을 <code class=\"language-text\">int</code> 형태로 관리한다면 경우에따라 값을 비교 시, 원하지 않는 결과가 반환될 수도 있다.</p>\n<p>하지만 enum을 사용 시, 이러한 부분은 안전하게 비교가 가능하다.</p>\n<h3 id=\"22-각-서드파티에-원하는-형태의-데이터-관리가-편함\" style=\"position:relative;\"><a href=\"#22-%EA%B0%81-%EC%84%9C%EB%93%9C%ED%8C%8C%ED%8B%B0%EC%97%90-%EC%9B%90%ED%95%98%EB%8A%94-%ED%98%95%ED%83%9C%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B4%80%EB%A6%AC%EA%B0%80-%ED%8E%B8%ED%95%A8\" aria-label=\"22 각 서드파티에 원하는 형태의 데이터 관리가 편함 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 각 서드파티에 원하는 형태의 데이터 관리가 편함</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enumStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ProcessStatus</span> thirdPartyResult <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">someThirdPartyProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                        <span class=\"token comment\">//구현은 자유!!</span>\n        thirdPartyResult <span class=\"token operator\">=</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ProcessStatus</span><span class=\"token punctuation\">.</span>SUCCESS<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        thirdPartyResult <span class=\"token operator\">=</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ProcessStatus</span><span class=\"token punctuation\">.</span>FAIL<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    각 서드파티에 맞는 데이터 관리가 쉬워진다<span class=\"token punctuation\">.</span>\n    <span class=\"token function\">insertFile</span><span class=\"token punctuation\">(</span>thirdPartyResult<span class=\"token punctuation\">.</span><span class=\"token function\">getNumberStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//파일에는 숫자형태로 기록</span>\n    <span class=\"token function\">insertDB</span><span class=\"token punctuation\">(</span>thirdPartyResult<span class=\"token punctuation\">.</span><span class=\"token function\">getStrStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//DB에는 문자 형태로 기록</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>처리 결과를 파일, RDB, NoSQL에 각각 저장하고, 저장 되는 정보는 다 다르다고 가정.</p>\n<p>이럴땐 성공 여부와 데이터 정보를 각각 따로 관리를 하게 되서 꽤나 지저분하고 한번에 눈에 안들어 올 가능성이 크다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enumStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">String</span> SUCCESS <span class=\"token operator\">=</span> <span class=\"token string\">\"SUCCESS\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> FAIL <span class=\"token operator\">=</span> <span class=\"token string\">\"FAIL\"</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token class-name\">String</span> SUCCESS_FILE<span class=\"token operator\">=</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> FAIL_FILE<span class=\"token operator\">=</span><span class=\"token string\">\"fail\"</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> SUCCESS_DB <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> FAIL_DB <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token class-name\">String</span> thirdPartyResult <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">someThirdPartyProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                        <span class=\"token comment\">//구현은 자유!!</span>\n        thirdPartyResult <span class=\"token operator\">=</span> SUCCESS<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        thirdPartyResult <span class=\"token operator\">=</span> FAIL<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>SUCCESS<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>thirdPartyResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">insertFile</span><span class=\"token punctuation\">(</span>SUCCESS_FILE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">insertDB</span><span class=\"token punctuation\">(</span>SUCCESS_DB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">insertFile</span><span class=\"token punctuation\">(</span>FAIL_FILE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">insertDB</span><span class=\"token punctuation\">(</span>SUCCESS_DB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>대충 이런식이 될 것이다. 이해하는데 큰 문제는 없을 지라도 뭔가 쫌 아쉽게 보인다.</p>\n<p>물론 적당한 디자인 패턴을 적용 할 수도 있겠지만 enum보다 좋은 형태로 적용하기는 쉽지 않을 것이다. </p>\n<h3 id=\"23-를-사용하여-동등-여부-계산이-빠르다\" style=\"position:relative;\"><a href=\"#23-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%8F%99%EB%93%B1-%EC%97%AC%EB%B6%80-%EA%B3%84%EC%82%B0%EC%9D%B4-%EB%B9%A0%EB%A5%B4%EB%8B%A4\" aria-label=\"23 를 사용하여 동등 여부 계산이 빠르다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3 <code class=\"language-text\">==</code>를 사용하여 동등 여부 계산이 빠르다.</h3>\n<p>문자열 비교 시, <code class=\"language-text\">equals</code>를 사용 할 것이다. 하지만 enum의 동등 비교는 <code class=\"language-text\">==</code>를 사용 하므로써 더욱 빠르게 연산된다. </p>\n<h1 id=\"3-주요-사용법\" style=\"position:relative;\"><a href=\"#3-%EC%A3%BC%EC%9A%94-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"3 주요 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 주요 사용법</h1>\n<h3 id=\"31-기본-사용법\" style=\"position:relative;\"><a href=\"#31-%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"31 기본 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 기본 사용법</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enumBase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//Card.Kind.CLOVER == Card.Value.FOUR;          //ERROR 내부적으로 값이 다름. 안전하게 값 비교 가능</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Card</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>CLOVER <span class=\"token operator\">==</span> <span class=\"token class-name\">Card</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>HEART<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>   <span class=\"token comment\">//equals가 아닌 '=='를 통해 비교하여 빠르게 연산 가능</span>\n\n    <span class=\"token class-name\">Card</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Kind</span> val <span class=\"token operator\">=</span> <span class=\"token class-name\">Card</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CLOVER\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//문자열로 선언값 가져올 수 있음</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name : \"</span><span class=\"token operator\">+</span>val<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Card</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Kind</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cardKinds <span class=\"token operator\">=</span> <span class=\"token class-name\">Card</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//선언된 값 배열을 물러옴</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CLOVER name : \"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Card</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>CLOVER<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CLOVER toString : \"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Card</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Kind</span><span class=\"token punctuation\">.</span>CLOVER<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//toString은 어디서 override 할수 잇어서 사용을 권장안함</span>\n\n    <span class=\"token comment\">//Card.Value.FOUR.val;            //필드는 private, public하게 선언 가능</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>method</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public final</td>\n<td>String name()</td>\n<td>enum 선언 시 똑같은 선언명을 돌려준다.</td>\n</tr>\n<tr>\n<td>public final</td>\n<td>int ordinal()</td>\n<td>0부터 시작하여 선언 된 순서를 반환한다.</td>\n</tr>\n<tr>\n<td>public final</td>\n<td>int compareTo(E o)</td>\n<td>비교 결과를 반환한다. o 보다 작을 시 음수, 같을 시 0, 크면 양수</td>\n</tr>\n<tr>\n<td>public static</td>\n<td>&#x3C;T extends Enum<T>> T valueOf(String name)</td>\n<td>지정된 열거형의 이름(선언명)을 찾아 반환한다.</td>\n</tr>\n<tr>\n<td>public static</td>\n<td>&#x3C;T extends Enum<T>> T[] values</td>\n<td>지정된 열거형 전체를 배열형태로 반환한다.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"32-추상-메소드-사용-가능\" style=\"position:relative;\"><a href=\"#32-%EC%B6%94%EC%83%81-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5\" aria-label=\"32 추상 메소드 사용 가능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 추상 메소드 사용 가능</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">WithAbstract</span><span class=\"token punctuation\">{</span>\n    ADD <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">handleData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> aDouble1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> aDouble2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> aDouble1 <span class=\"token operator\">+</span> aDouble2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">double</span> <span class=\"token function\">handleData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> aDouble1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> aDouble2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런식으로 추상 메소드를 선언 시, enum 생성 시에 구현체를 구현 해준다. 또한 functional interface도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">WithLamda</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">ADD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>aDouble1<span class=\"token punctuation\">,</span> aDouble2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> aDouble1 <span class=\"token operator\">+</span> aDouble2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">BiFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> expression<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">WithLamda</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BiFunction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> expression<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expression <span class=\"token operator\">=</span> expression<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">handleData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span> aDouble1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span> aDouble2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> expression<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>aDouble1<span class=\"token punctuation\">,</span> aDouble2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>사실상 똑같은 로직을 추상 클래스가 아닌 생성자 + lambda + functional interface를 사용하여 구현한 것이다.</p>\n<p>이런식으로 사용할 시 장점이 enum을 통해 상태값과 연관된 메소드를 함께 관리 할 수 있다는 점이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleEnumWithLamda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> handleResult <span class=\"token operator\">=</span> <span class=\"token class-name\">HandleEnum</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">WithLamda</span><span class=\"token punctuation\">.</span>ADD<span class=\"token punctuation\">.</span><span class=\"token function\">handleData</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add result : \"</span><span class=\"token operator\">+</span>handleResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    handleResult <span class=\"token operator\">=</span> <span class=\"token class-name\">HandleEnum</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">WithLamda</span><span class=\"token punctuation\">.</span>MINUS<span class=\"token punctuation\">.</span><span class=\"token function\">handleData</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minus result : \"</span><span class=\"token operator\">+</span>handleResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 소스에서 보는바와 같이 상태(ADD, MINUS)에 따른 메소드(더하기 또는 빼기)도 함께 관리 할수가 있다.</p>\n<h1 id=\"4-주의할점\" style=\"position:relative;\"><a href=\"#4-%EC%A3%BC%EC%9D%98%ED%95%A0%EC%A0%90\" aria-label=\"4 주의할점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 주의할점</h1>\n<h4 id=\"41-값을-사용-시-직접-정의된-값-사용-권장\" style=\"position:relative;\"><a href=\"#41-%EA%B0%92%EC%9D%84-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EC%A7%81%EC%A0%91-%EC%A0%95%EC%9D%98%EB%90%9C-%EA%B0%92-%EC%82%AC%EC%9A%A9-%EA%B6%8C%EC%9E%A5\" aria-label=\"41 값을 사용 시 직접 정의된 값 사용 권장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1 값을 사용 시 직접 정의된 값 사용 권장</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Enum class에 정의된 ordinal()이 열거형 상수가 정의된 순서를 반환하지만, 이 값은\n자바 내부적인 용도로 사용되기 위한 값으로, 열거형 상수의 값으로 사용하지 않는걸 추천</code></pre></div>\n<h4 id=\"42-생성자는-기본적으로-private\" style=\"position:relative;\"><a href=\"#42-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8A%94-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9C%BC%EB%A1%9C-private\" aria-label=\"42 생성자는 기본적으로 private permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2 생성자는 기본적으로 private</h4>\n<p>enum의 생성자는 무조건 private하다. 오직 클래스 정의 내에서만 생성이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enumBase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">//Card.Kind data = new Card.Kind();     //ERROR!</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"43-value는-final-권장\" style=\"position:relative;\"><a href=\"#43-value%EB%8A%94-final-%EA%B6%8C%EC%9E%A5\" aria-label=\"43 value는 final 권장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.3 value는 final 권장</h4>\n<p>열거형의 인스턴스 변수는 반드시 final이어야 한다는 제약은 없지만, value는 열거형 상수의 값을</p>\n<p>저장하기 위한 것이므로 final을 붙이는것을 권장. 따라서 setter와 getter가 큰 의미를 갖지는 않는다.</p>\n<p>(물론 필요하면 쓰는것이 맞음)</p>","fields":{"slug":"/posts/java/java-enum/","tagSlugs":["/tag/java/","/tag/enum/"]},"frontmatter":{"date":"2016-09-01T23:46:37.121Z","description":"enum 정의","tags":["java","enum"],"title":"enum","socialImage":"/media/image-2.jpg"}}},"pageContext":{"slug":"/posts/java/java-enum/"}}}