{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/java/kotlin-variance/","result":{"data":{"markdownRemark":{"id":"d507babd-6660-523c-ac9f-3e8efd313daf","html":"<h2 id=\"변성\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%84%B1\" aria-label=\"변성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변성</h2>\n<p>파라미터화한 타입이 서로 어떤 하위 타입 관계에 있는지 결정하는 방식을 말함</p>\n<h2 id=\"변성이-문제되는-이유\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%84%B1%EC%9D%B4-%EB%AC%B8%EC%A0%9C%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"변성이 문제되는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변성이 문제되는 이유</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> intArr <span class=\"token operator\">:</span> MutableList<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">mutableListOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> numberArr <span class=\"token operator\">:</span>MutableList<span class=\"token operator\">&lt;</span>Number<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">mutableListOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> numberArr2 <span class=\"token operator\">:</span>MutableList<span class=\"token operator\">&lt;</span>Number<span class=\"token operator\">></span> <span class=\"token operator\">=</span> intArr    <span class=\"token comment\">//error!</span></code></pre></div>\n<p>Int는 Number를 확장한 형태니까 논리적으로 충분히 받아 들여 사용 할수도 있어 보이지만 그렇지 못함. 기본적으로 제너릭 타입은 무공변성이라, T가 T1의 부모 타입이라도 List<T>와 List<T1> 사이에는 아무런 부모 자식 관계가 아니다\n이렇게 쓰고 싶으면 컴파일러한테 상위타입처럼 쓸수 있도록 알려줘야한다. 상위 타입으로 써도 안전한 이유는 Number타입은 처리할때 오직 읽기 전용으로 쓴다는걸 문법적으로 보장 하는걸 말한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> intArr <span class=\"token operator\">:</span> MutableList<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">mutableListOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> numberArr <span class=\"token operator\">:</span>MutableList<span class=\"token operator\">&lt;</span>Number<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">mutableListOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> numberArr2 <span class=\"token operator\">:</span>MutableList<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> Number<span class=\"token operator\">></span> <span class=\"token operator\">=</span> intArr</code></pre></div>\n<p>반대로 <code class=\"language-text\">in</code> 이라는 키워드는 쓰기 전용으로 상위 오브젝트를 하위 오브젝트에 담을수가 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> intArr <span class=\"token operator\">:</span> MutableList<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">mutableListOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> numberArr <span class=\"token operator\">:</span>MutableList<span class=\"token operator\">&lt;</span>Number<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">mutableListOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> intArr2 <span class=\"token operator\">:</span>MutableList<span class=\"token operator\">&lt;</span><span class=\"token keyword\">in</span> Int<span class=\"token operator\">></span> <span class=\"token operator\">=</span> numberArr</code></pre></div>\n<table>\n<thead>\n<tr>\n<th>변성</th>\n<th>설명</th>\n<th>kotlin</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>공변성(covariant)</td>\n<td>T1이 T의 하위 타입이면 C&#x3C;T1>은 C&#x3C;T>의 서브 타입이다</td>\n<td>C&#x3C;T1> 은 C&#x3C;out T>의 서브타입이다.</td>\n</tr>\n<tr>\n<td>반공변성(contravariant)</td>\n<td>T1이 T의 하위 타입이면 C&#x3C;T>은 C&#x3C;T1>의 서브 타입이다</td>\n<td>C&#x3C;T> 은 C&#x3C;in T1>의 서브타입이다.</td>\n</tr>\n<tr>\n<td>무공변성(invariant)</td>\n<td>C&#x3C;T>와 C&#x3C;T1>는 아무관계 없다</td>\n<td>C&#x3C;T>는 오직 C&#x3C;T>만 관계가 있다</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"읽기-쓰기-전용\" style=\"position:relative;\"><a href=\"#%EC%9D%BD%EA%B8%B0-%EC%93%B0%EA%B8%B0-%EC%A0%84%EC%9A%A9\" aria-label=\"읽기 쓰기 전용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>읽기, 쓰기 전용</h2>\n<p><code class=\"language-text\">out</code>은 read 전용, <code class=\"language-text\">in</code>은 write 전용이라 평가받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> UsingInOut<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> T1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> T2<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T1       <span class=\"token comment\">//값을 내보낼 수만 있다</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">use</span><span class=\"token punctuation\">(</span>t2<span class=\"token operator\">:</span> T2<span class=\"token punctuation\">)</span>     <span class=\"token comment\">//값을 받을 수만 있다</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">무공변성(invariant)</code> 제약 일부를 없애주는 대신, <code class=\"language-text\">out</code> 키워드는 오직 생산(read)만을, <code class=\"language-text\">in</code> 키워드는 오직 사용만이 가능하도록 설계되었다. 근데 read 전용 이긴 하지만 불변성을 보장하진 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> numberArr2 <span class=\"token operator\">:</span>MutableList<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> Number<span class=\"token operator\">></span> <span class=\"token operator\">=</span> intArr\nnumberArr2<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//이건 가능</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>Kotlin</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>out</td>\n<td>생산하긴 하지만 소비하지 않음(read 전용)</td>\n</tr>\n<tr>\n<td>in</td>\n<td>소비하긴 하지만 생산하지 않음(write 전용)</td>\n</tr>\n<tr>\n<td>(따로 지정x)</td>\n<td>생산 &#x26; 소비 가능(read, write 가능)</td>\n</tr>\n</tbody>\n</table>","fields":{"slug":"/posts/java/kotlin-variance/","tagSlugs":null},"frontmatter":{"date":"2021-04-16T08:36:05.678Z","description":"generic 타입의 상위, 하위 타입의 제한 사항 및 일부 유연하게 사용하고 싶을때","tags":null,"title":"Kotlin - 변성","socialImage":null}}},"pageContext":{"slug":"/posts/java/kotlin-variance/"}},"staticQueryHashes":["1828819329","251939775","2839666046","401334301"]}