{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/java/java-boxing/","result":{"data":{"markdownRemark":{"id":"829e8cb3-66f5-56bf-b1b9-4c47a8238add","html":"<h1 id=\"1-boxing-unboxing\" style=\"position:relative;\"><a href=\"#1-boxing-unboxing\" aria-label=\"1 boxing unboxing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. boxing, unboxing</h1>\n<p>자바를 공부 해본 사람이라면 <code class=\"language-text\">boxing</code>과 <code class=\"language-text\">unboxing</code>은 한번씩 들어 봤을 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">int</span> primitive <span class=\"token operator\">=</span> <span class=\"token number\">42142</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Integer</span> wrapper <span class=\"token operator\">=</span> <span class=\"token number\">1414141</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">boxing</span><span class=\"token punctuation\">(</span>primitive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">unboxing</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">boxing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> boxing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"boxing \"</span> <span class=\"token operator\">+</span> boxing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unboxing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> unboxing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unboxing \"</span> <span class=\"token operator\">+</span> unboxing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기본적으로 <code class=\"language-text\">primitive type</code>을 argument로 넘겨줘도 해당 메소드에서 class 타입(<code class=\"language-text\">wrapper class</code>)으로 받을 수도 있고, 그 반대도 가능하다. 또 서로 변수에 대입도 가능한데 이게 가능한 이유가 다 java에서 자동으로 <code class=\"language-text\">boxing</code>과 <code class=\"language-text\">unboxing</code>을 해주기 때문이다.</p>\n<p>참고로 null값을 <code class=\"language-text\">unboxing</code>하게 되면 에러가 발생하니, 이러한 점은 주의해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Integer</span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">unboxing</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//NPE가 발생한다.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unboxing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> unboxing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unboxing \"</span> <span class=\"token operator\">+</span> unboxing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">primitive type</code>은 null일 수는 없으니까 <code class=\"language-text\">auto boxing</code>하는 경우엔 적어도 NPE는 발생하지 않는다.</p>\n<h1 id=\"2-wrapper-class-비교\" style=\"position:relative;\"><a href=\"#2-wrapper-class-%EB%B9%84%EA%B5%90\" aria-label=\"2 wrapper class 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Wrapper class 비교</h1>\n<p>위 내용을 설명하려고 포스트를 작성한건 아니고, wrapper class도 결국엔 class의 인스턴스이다. 그 말은 인스턴스의 <code class=\"language-text\">==</code> 비교를 하게 되면 값으로 비교 하는게 아니라 주소값을 비교하는게 기본 원칙인데, 막상 비교 해보면 주소값이 아니라 진짜 ‘값’으로써 비교 하는게 아닐까 의심 될 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">Integer</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Integer</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Integer</span> c <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result 1 \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result 2 \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n\n    <span class=\"token class-name\">Integer</span> d <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Integer</span> e <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result 3 \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">==</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 a,b,c 세 변수만 비교한 결과값을 보면 정말 값으로써 비교 한 것 처럼 보인다. 근데 밑의 d,e 두 개를 비교한 결과를 보면 이번엔 주소값을 비교한 것 처럼 느껴진다.</p>\n<h2 id=\"21-wrapper-class-cache\" style=\"position:relative;\"><a href=\"#21-wrapper-class-cache\" aria-label=\"21 wrapper class cache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 Wrapper class Cache</h2>\n<p>이러한 결과를 설명 하자면 일단 주소값을 통해 비교하는것은 맞다. 그런데도 a,b,c 변수의 비교 결과가 발생한 이유는 java에서 자주 사용되는 값들은 미리 객체를 생성 해놓고, 그 인스턴스를 반복해서 사용하도록 만들었기 때문이다.</p>\n<p><code class=\"language-text\">Integer</code>도 결국 방식은 똑같은데 이해하기 쉬운 <code class=\"language-text\">Character</code>를 기준으로 설명하자면, <code class=\"language-text\">Character</code> 클래스를 찾아보면 아래와 같은 <code class=\"language-text\">CharacterCache</code> 클래스를 찾을 수 있다.</p>\n<p><strong>Character.java</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CharacterCache</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">CharacterCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Character</span> cache<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">[</span><span class=\"token number\">127</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cache<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                cache<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런식으로 class가 메모리에 올라갈 때 미리 <code class=\"language-text\">cache</code>라는 변수에 인스턴스를 미리 생성해서 채워넣는다. 그 후, <code class=\"language-text\">Character.valueOf</code> 메소드를 사용하면 먼저 <code class=\"language-text\">cache</code>에 해당 값을 찾고, 존재한다면 해당 객체를 사용하게 된다. 이래서 <code class=\"language-text\">valueOf</code>를 통해 생성 된 객체는 캐시 범위 내에 있다면 매번 똑같은 객체를 사용하게 되니까 주소값 비교를 하게 되어도 동일한 인스턴스를 비교하게 되고, 결과는 <code class=\"language-text\">true</code>일 수 밖에 없다.</p>\n<p><strong>Character.valueOf</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Character</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// must cache</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">CharacterCache</span><span class=\"token punctuation\">.</span>cache<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>대부분의 <code class=\"language-text\">wrapper class</code>는 자주 사용되는 범위 안에 값들을 이런식으로 미리 생성 해 놓는데 <code class=\"language-text\">Integer</code> 값의 범위는 -128 ~ 127까지 미리 생성 해놓는다. 즉, 이 범위 안에 있는 값들은 자주 사용 되는 값이라 판단되어 사용할때마다 매번 객체를 생성하는게 아니라 캐싱을 통해 재사용되고, 이 범위 밖에 있는 건 매번 진짜 인스턴스를 생성하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numberList1 <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">129</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">126</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numberList2 <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">129</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">126</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numberList1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s -> %s\"</span><span class=\"token punctuation\">,</span>\n                            numberList1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            numberList1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> numberList2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n결과\n-129 -> false\n-128 -> true\n-127 -> true\n126 -> true\n127 -> true\n128 -> false\n**/</span></code></pre></div>\n<p>만약 <code class=\"language-text\">new Integer(xxx)</code>를 통해 생성 된 객체를 비교하면 정말로 매번 객체 생성을 하게 된다. -> <code class=\"language-text\">auto boxing</code>은 <code class=\"language-text\">valueOf</code>메소드를 통해 생성 된다는 것을 간접적으로 알 수 있다.</p>\n<blockquote>\n<p>jvm 옵션을 통해 캐싱 범위를 더 넓힐 수도 있다.</p>\n</blockquote>\n<blockquote>\n<p>코틀린은 <code class=\"language-text\">==</code>은 <code class=\"language-text\">equals</code>를, <code class=\"language-text\">===</code>는 주소값을 비교하니까 헤깔리면 안된다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">val</span> data1<span class=\"token operator\">:</span> Int<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token number\">12345</span>\n    <span class=\"token keyword\">val</span> data2<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">12345</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"result </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>data1 <span class=\"token operator\">==</span> data2<span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//true</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"result </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>data1 <span class=\"token operator\">===</span> data2<span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/posts/java/java-boxing/","tagSlugs":["/tag/java/"]},"frontmatter":{"date":"2022-12-28T10:19:01.562Z","description":"Wrapper class의 boxing과 unboxing, 과도한 객체 생성을 막기 위한 캐싱 전략","tags":["java"],"title":"Boxing, Unboxing & Cache","socialImage":null}}},"pageContext":{"slug":"/posts/java/java-boxing/"}},"staticQueryHashes":["1828819329","251939775","2839666046","401334301"]}