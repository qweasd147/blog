{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/java/kotlin/coroutine/","result":{"data":{"markdownRemark":{"id":"7543615f-30a5-5e88-884c-9d2a64c4998b","html":"<p>해당 내용은 <code class=\"language-text\">인프런</code>에서 <code class=\"language-text\">2시간으로 끝내는 코루틴</code>강의를 참고하여 작성하였습니다.</p>\n<h1 id=\"coroutine\" style=\"position:relative;\"><a href=\"#coroutine\" aria-label=\"coroutine permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coroutine</h1>\n<p>단어 뜻 먼저 설명하자면 <code class=\"language-text\">co-routine</code>은 co는 ‘협력’이라는 뜻으로, <strong>협력하는 루틴</strong>이라는 의미를 가진다. 여기서 루틴은 그냥 단어 그대로 ‘특정 작업을 실행하기 위한 일련의 명령’ 그 자체로 이해하면 된다.\n즉, <code class=\"language-text\">coroutine</code>은 routine 간의 협력 하며 이루어지는 코드, 처리 방식이라고 이해하면 된다.</p>\n<h2 id=\"1-사용-하는-이유\" style=\"position:relative;\"><a href=\"#1-%EC%82%AC%EC%9A%A9-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"1 사용 하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 사용 하는 이유</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> runBlocking <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"start\"</span></span><span class=\"token punctuation\">)</span>\n    launch <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">newRoutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"end\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">newRoutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"newRoutine\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 출력 순서</span>\n<span class=\"token comment\">// start</span>\n<span class=\"token comment\">// end</span>\n<span class=\"token comment\">// newRoutine</span></code></pre></div>\n<p><code class=\"language-text\">launch</code>함수는 일단 넘어가더라도 <code class=\"language-text\">start, newRoutine, end</code>순서로 출력 되어야 할 것 같지만, 실제로는 그렇지 않다.</p>\n<p>비동기 프로그래밍이 익숙하거나 javascript의 <code class=\"language-text\">event loop</code>를 아는 사람이라면 어느 정도 이해가 갈 수 있는데, 이는 <code class=\"language-text\">newRoutine</code> 함수를 비동기 방식으로 나중에 호출 되도록 유도하여 이와 같은 순서로 출력되게 한다.</p>\n<p><code class=\"language-text\">launch</code> 함수가 단순 <code class=\"language-text\">lazy</code> 함수라고 의심 될 수도 있지만 만약 그렇게 생각 된다면 아래 코드를 보면 또 다르게 생각 될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> runBlocking <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"start\"</span></span><span class=\"token punctuation\">)</span>\n    launch <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">newRoutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"end\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">newRoutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"newRoutine\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 출력 순서</span>\n<span class=\"token comment\">// start</span>\n<span class=\"token comment\">// newRoutine</span>\n<span class=\"token comment\">// end</span></code></pre></div>\n<p>이해 해야할 처리 과정을 순서대로 나열하면 아래와 같다.</p>\n<ol>\n<li>runBlocking 함수를 통해 새로운 <code class=\"language-text\">coroutine scope</code> 함수를 만든다.</li>\n<li><code class=\"language-text\">launch</code>함수를 통해 자식 <code class=\"language-text\">coroutine scope</code>함수를 만들고, 그 안에서 suspend 함수를 호출한다.</li>\n<li><code class=\"language-text\">yield</code>함수를 호출 하여, 다른 <code class=\"language-text\">suspend</code> 함수가 처리 되도록 양보한다.</li>\n</ol>\n<p>중간에 <code class=\"language-text\">yield</code> 함수를 호출하여 다른 <code class=\"language-text\">coroutine scope</code> 함수(<code class=\"language-text\">newRoutine</code>)가 먼저 처리 되도록 <strong>양보</strong> 하였다.\n즉, 특정 루틴(<code class=\"language-text\">newRoutine</code>)을 비동기 처리를 유도 할 수 있고, 처리 중간에 다른곳으로 리소스 할당을 양보(<code class=\"language-text\">yield</code>)하는 등 비동기 프로그래밍을 call-back 방식이 아닌 위와 같이 <code class=\"language-text\">top down</code> 방식으로 개발 할 수 있다는게 가장 큰 특징이다.</p>\n<p>참고로 이는 <code class=\"language-text\">javascript</code>의 <code class=\"language-text\">generator</code>와 <code class=\"language-text\">event loop</code>를 아는 사람이라면 바로 이해가 갈 것이고, 처리방식도 위와 같은 코드라면 똑같다고 봐도 된다.</p>\n<blockquote>\n<p>event loop는 web api를 통해 멀티 스레드로 처리 되지만(일반적인 환경이라면 멀티 스레드) coroutine은 단순 싱글 스레드로도 처리 된다. 이런 특징은 밑에서 추가로 설명 예정.</p>\n</blockquote>\n<blockquote>\n<p>suspend 함수는 이름 그대로 <strong>잠시 중단이 가능한 함수</strong>를 말한다. 이는 resume/suspend 패턴이 가능하다는 말인데, 함수가 처리 되다가 중간에 멈추고 다른 suspend 함수를 처리하고, 또 조건에 따라 다시 재개하여 처리가 가능한 함수를 말한다. 이런 suspend 함수는 <code class=\"language-text\">coroutien scope</code>안에서만 호출이 가능하고 이에 종속된다고 이해하면 된다.</p>\n</blockquote>\n<blockquote>\n<p>corutine scope는 너무 어렵게 이해하지 말고 말그대로 코루틴 영역, 코루틴을 사용 가능하게 해주는 영역이라고만 이해하자.</p>\n</blockquote>\n<h2 id=\"2-스레드와-coroutine\" style=\"position:relative;\"><a href=\"#2-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%99%80-coroutine\" aria-label=\"2 스레드와 coroutine permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 스레드와 Coroutine</h2>\n<h3 id=\"21-coroutine은-특정-스레드에-종속-되지-않는다\" style=\"position:relative;\"><a href=\"#21-coroutine%EC%9D%80-%ED%8A%B9%EC%A0%95-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%97%90-%EC%A2%85%EC%86%8D-%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"21 coroutine은 특정 스레드에 종속 되지 않는다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 Coroutine은 특정 스레드에 종속 되지 않는다.</h3>\n<p>coroutine은 실행 될때나 잠시 멈추고 다시 재기 될 때, 특정 스레드에 종속되지 않는다. 즉 1번 스레드에서 실행되고 멈추었다 다시 실행 될때, 2번 스레드에서 실행 될 수도 있다는 말이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// jvm옵션에 '-Dkotlinx.coroutines.debug'를 추가하여 코루틴 scope를 디버깅할 수 있다.</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> executorService <span class=\"token operator\">=</span> Executors<span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">runBlocking</span><span class=\"token punctuation\">(</span>executorService<span class=\"token punctuation\">.</span><span class=\"token function\">asCoroutineDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">] before - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">] after - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">awaitTermination</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 실행 결과.</span>\n<span class=\"token comment\">// [pool-1-thread-1 @coroutine#1] before - 1</span>\n<span class=\"token comment\">// [pool-1-thread-2 @coroutine#1] after - 1</span>\n<span class=\"token comment\">// [pool-1-thread-2 @coroutine#1] before - 2</span>\n<span class=\"token comment\">// [pool-1-thread-3 @coroutine#1] after - 2</span>\n<span class=\"token comment\">// [pool-1-thread-3 @coroutine#1] before - 3</span>\n<span class=\"token comment\">// [pool-1-thread-4 @coroutine#1] after - 3</span>\n<span class=\"token comment\">// [pool-1-thread-4 @coroutine#1] before - 4</span>\n<span class=\"token comment\">// [pool-1-thread-5 @coroutine#1] after - 4</span>\n<span class=\"token comment\">// [pool-1-thread-5 @coroutine#1] before - 5</span>\n<span class=\"token comment\">// [pool-1-thread-6 @coroutine#1] after - 5</span></code></pre></div>\n<p>위의 실행 된 coroutine은 <code class=\"language-text\">@coroutine#1</code>로 전부 동일하지만, thread는 여러 스레드 다 골고루 실행 되며, 특히 resume/suspend 전후로도 다른 스레드가 할당 될 수도 있다는걸 볼 수있다.</p>\n<h3 id=\"22-동시성과-병렬성\" style=\"position:relative;\"><a href=\"#22-%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1\" aria-label=\"22 동시성과 병렬성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 동시성과 병렬성</h3>\n<h4 id=\"221-병렬성\" style=\"position:relative;\"><a href=\"#221-%EB%B3%91%EB%A0%AC%EC%84%B1\" aria-label=\"221 병렬성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2.1 병렬성</h4>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> executorService <span class=\"token operator\">=</span> Executors<span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> seconds <span class=\"token operator\">=</span> measureTimeMillis <span class=\"token punctuation\">{</span>\n        runBlocking <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>executorService<span class=\"token punctuation\">.</span><span class=\"token function\">asCoroutineDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">] - first - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>executorService<span class=\"token punctuation\">.</span><span class=\"token function\">asCoroutineDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">] - second - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDuration</span><span class=\"token punctuation\">(</span>DurationUnit<span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDouble</span><span class=\"token punctuation\">(</span>DurationUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"전체 걸린 시간 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">seconds</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">초\"</span></span><span class=\"token punctuation\">)</span>\n    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">awaitTermination</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// [pool-1-thread-6 @coroutine#7] - second - 3</span>\n<span class=\"token comment\">// [pool-1-thread-3 @coroutine#4] - first - 2</span>\n<span class=\"token comment\">// [pool-1-thread-10 @coroutine#11] - second - 5</span>\n<span class=\"token comment\">// [pool-1-thread-5 @coroutine#6] - first - 3</span>\n<span class=\"token comment\">// [pool-1-thread-1 @coroutine#2] - first - 1</span>\n<span class=\"token comment\">// [pool-1-thread-4 @coroutine#5] - second - 2</span>\n<span class=\"token comment\">// [pool-1-thread-2 @coroutine#3] - second - 1</span>\n<span class=\"token comment\">// [pool-1-thread-9 @coroutine#10] - first - 5</span>\n<span class=\"token comment\">// [pool-1-thread-8 @coroutine#9] - second - 4</span>\n<span class=\"token comment\">// [pool-1-thread-7 @coroutine#8] - first - 4</span>\n<span class=\"token comment\">// 전체 걸린 시간 0.553초</span></code></pre></div>\n<p>코루틴 scope를 만들때 thread pool을 넘겨줘서 멀티스레드로 돌릴 수도 있다. 여러 스레드가 각각의 작업을 나누어 처리하는걸 확인 할 수가 있다.</p>\n<p>물론 이런방식의 병렬성이야 구지 코루틴을 안쓰고도 얼마든지 쉽고 간단하게 구현 가능하다.</p>\n<h4 id=\"222-동시성\" style=\"position:relative;\"><a href=\"#222-%EB%8F%99%EC%8B%9C%EC%84%B1\" aria-label=\"222 동시성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2.2 동시성</h4>\n<p>코루틴의 핵심은 동시성에 있다고 생각한다. 위에서 멀티스레드가 아닌 단순 싱글 스레드로 넘겨줘도 실질적인 처리 시간은 차이가 없다는걸 확인 할 수가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> executorService <span class=\"token operator\">=</span> Executors<span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> seconds <span class=\"token operator\">=</span> measureTimeMillis <span class=\"token punctuation\">{</span>\n        runBlocking <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>executorService<span class=\"token punctuation\">.</span><span class=\"token function\">asCoroutineDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">] - first - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>executorService<span class=\"token punctuation\">.</span><span class=\"token function\">asCoroutineDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">] - second - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$</span><span class=\"token expression\">it</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDuration</span><span class=\"token punctuation\">(</span>DurationUnit<span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDouble</span><span class=\"token punctuation\">(</span>DurationUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string-literal singleline\"><span class=\"token string\">\"전체 걸린 시간 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token expression\">seconds</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">초\"</span></span><span class=\"token punctuation\">)</span>\n    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">awaitTermination</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// [pool-1-thread-1 @coroutine#2] - first - 1</span>\n<span class=\"token comment\">// [pool-1-thread-1 @coroutine#3] - second - 1</span>\n<span class=\"token comment\">// [pool-1-thread-1 @coroutine#4] - first - 2</span>\n<span class=\"token comment\">// [pool-1-thread-1 @coroutine#5] - second - 2</span>\n<span class=\"token comment\">// [pool-1-thread-1 @coroutine#6] - first - 3</span>\n<span class=\"token comment\">// [pool-1-thread-1 @coroutine#7] - second - 3</span>\n<span class=\"token comment\">// [pool-1-thread-1 @coroutine#8] - first - 4</span>\n<span class=\"token comment\">// [pool-1-thread-1 @coroutine#9] - second - 4</span>\n<span class=\"token comment\">// [pool-1-thread-1 @coroutine#10] - first - 5</span>\n<span class=\"token comment\">// [pool-1-thread-1 @coroutine#11] - second - 5</span>\n<span class=\"token comment\">// 전체 걸린 시간 0.548초</span></code></pre></div>\n<p><code class=\"language-text\">newSingleThreadExecutor</code>함수를 써서, 싱글스레드로 환경을 제공 해도 실행 시간은 차이가 없다는걸 알 수 있다. 이는 delay 함수를 만나면 잠시 멈추고 다른 작업을 처리하고, delay시간이 끝나면 다시 돌아와 처리하는 방식이라 가능하다. 또한 추가로 설명하자면 delay 함수가 <code class=\"language-text\">non-blocking</code>을 지원하기 때문에 이게 가능하다.\n(<code class=\"language-text\">delay</code> 함수는 <code class=\"language-text\">suspend</code> 함수이다)</p>\n<blockquote>\n<p>스레드 풀을 넘겨주지 않으면 현재 스레드를 기본으로 사용되는데, 위의 코드에선 스레드풀(<code class=\"language-text\">newSingleThreadExecutor</code>)로 Dispatcher로 지정하였지만 그냥 명시하지 않아도 똑같은 결과가 나오게 된다.</p>\n</blockquote>\n<p>만약 <code class=\"language-text\">delay</code> 함수가 아닌 <code class=\"language-text\">Thread.sleep</code>를 사용한다면 대략적으로 <code class=\"language-text\">5 * 0.5초 * 2</code> 라는 시간이 걸리게 된다.</p>\n<blockquote>\n<p><code class=\"language-text\">Thread.sleep</code>은 <code class=\"language-text\">block</code> 방식으로 처리 되며, 당연히 <code class=\"language-text\">suspend</code> 함수가 아니다.\n<code class=\"language-text\">Dispatcher</code>는 어느 스레드 환경에서 실행 될 지, 결정 할 수 있는데 차후에 추가로 설명 예정.</p>\n</blockquote>","fields":{"slug":"/posts/java/kotlin/coroutine/","tagSlugs":["/tag/kotlin/","/tag/coroutine/"]},"frontmatter":{"date":"2024-03-30T18:16:07.113Z","description":"Coroutine 사용이유 및 장점, 기초 설명","tags":["kotlin","coroutine"],"title":"Coroutine 기초 설명","socialImage":null}}},"pageContext":{"slug":"/posts/java/kotlin/coroutine/"}},"staticQueryHashes":["251939775","2839666046","2891173899","401334301"]}