{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/js/js-symbol/","result":{"data":{"markdownRemark":{"id":"631f7db7-4585-5edf-a1de-e792841e70cf","html":"<h1 id=\"symbol\" style=\"position:relative;\"><a href=\"#symbol\" aria-label=\"symbol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol</h1>\n<h2 id=\"1-기본-정의\" style=\"position:relative;\"><a href=\"#1-%EA%B8%B0%EB%B3%B8-%EC%A0%95%EC%9D%98\" aria-label=\"1 기본 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 기본 정의</h2>\n<p>js에서 몇 안되는 원시타입 중 하나. <code class=\"language-text\">Symbol</code>을 통해 생성되면 항상 유니크한 식별자가 보장된다(예외 경우도 있다)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> keyA1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> keyA2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">[</span>keyA1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"A1\"</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">[</span>keyA2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"A2\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n{\n    Symbole(A): \"A1\"\n    Symbole(A): \"A2\"\n}\n*/</span></code></pre></div>\n<p>얼핏 보면 똑같은 프로퍼티 키값이 존재하는걸로 보이지만 당연히 프로퍼티 키값은 다르다. (<code class=\"language-text\">keyA1 !== keyA2</code> 이기 때문에) 심볼 생성 시 넘겨준 인자값은 단순 심볼 설명(구분)을 위한 값일 뿐, 그 이상의 역할을 하지는 않는다.</p>\n<h2 id=\"2-symbolfor\" style=\"position:relative;\"><a href=\"#2-symbolfor\" aria-label=\"2 symbolfor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Symbol.for</h2>\n<p>심볼 인자값을 description 용도가 아닌 진짜 키의 일부분으로 쓰기 위해 만들어진 심볼 객체 생성 메소드. Symbol 은 항상 새로운 객체를 만들어내지만 <code class=\"language-text\">Symbol.for</code>는 파라미터 값에 따라 동일한 심볼이 반환 될 수도 있다.</p>\n<p><code class=\"language-text\">Symbol.for</code>를 통해 생성 된 심볼은 먼저 해당 파라미터로 전역 심볼 레지스트리(global symbol registry) 내 동일한 값이 있는지 찾는다. 만약 없다면 새로운 심볼을 생성해서 만든 후, 전역 심볼 레지스트리에 등록한다. 그 후 <code class=\"language-text\">Symbol.for</code>을 통해 동일한 파라미터로 심볼을 생성하려고 하면 기존에 생성된 심볼을 반환 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> keyA1 <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> keyA2 <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">[</span>keyA1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"A1\"</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">[</span>keyA2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"A2\"</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n{\n    Symbole(A): \"A2\"\n}\n*/</span></code></pre></div>\n<p>위에서 설명 했듯이, <code class=\"language-text\">Symbol.for(\"A\") === Symbol.for(\"A\")</code> 는 true를 반환하므로 객체엔 오직 하나의 프로퍼티만 존재하게 된다.</p>\n<h2 id=\"3-미리-정의-된-심볼-들\" style=\"position:relative;\"><a href=\"#3-%EB%AF%B8%EB%A6%AC-%EC%A0%95%EC%9D%98-%EB%90%9C-%EC%8B%AC%EB%B3%BC-%EB%93%A4\" aria-label=\"3 미리 정의 된 심볼 들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 미리 정의 된 심볼 들</h2>\n<p>다른 키와 겹치지 않는 유일한 프로퍼티 키값으로 사용하기 위해 js 내부적으로 이미 많은 심볼들이 정의되어 있다. 주요 프로퍼티를 실수로 덮어씌우면 의도치 않는 버그가 일어날 수도 있으므로 이런 프로퍼티는 외부에서 볼 수 없게 시스템 적으로 숨겨놓고 오직 미리 정의된 심볼을 통해서만 접근 할 수 있게끔 만들어놓으면, 개발자가 필요할때 정의 된 심볼을 통해 분명한 목적을 가지고 접근 한 것이라 판단 할 수 있으므로 버그를 줄여주는데 많은 역할을 하고 있다.</p>\n<p>대표적으로 미리 정의 된 심볼들은 Symbol.match , Symbol.replace , Symbol.search, Symbol.iterator 등이 존재한다.</p>\n<h3 id=\"symboliterator\" style=\"position:relative;\"><a href=\"#symboliterator\" aria-label=\"symboliterator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol.iterator</h3>\n<p>Iterable, 그니까 순환 가능한 객체를 만들기 위해선 java 에서는 Iterator 를 구현하면 되고, javascript에선 내부 프로퍼티인 @@iterator 를 구현해주면 된다. 근데 이건 일반적으로 접근이 불가능한데, 이 객체에 접근하기 위해 사용되는 심볼이 바로 Symbol.iterator 이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> it <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nit<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//{value:1,done:false}</span>\nit<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//{value:2,done:false}</span>\nit<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//{value:3,done:false}</span>\nit<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//{value: undefined, done:true}</span>\nit<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//{value: undefined, done:true}</span>\nit<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//{value: undefined, done:true}</span>\n<span class=\"token operator\">...</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p><code class=\"language-text\">Array</code>에 순환 객체(iterator)를 생성하기 위해 <code class=\"language-text\">Symbol.iterator</code>을 통해 접근하여 <code class=\"language-text\">iterator</code>를 생성하고 next를 통해 반복적으로 호출해 보면 array에 저장된 값들을 전부 순환해서 확인 할 수가 있다. (iterator에 대한 자세한 설명은 생략)</p>\n<p><code class=\"language-text\">js</code>에서 기본적으로 <code class=\"language-text\">array</code>, <code class=\"language-text\">map</code>, <code class=\"language-text\">set</code> 등은 <code class=\"language-text\">@@iterator</code> 가 구현되어 있어서 순환 가능한 객체로 분류된다. <code class=\"language-text\">js</code>에서 순환 가능한 객체라는 의미는 <code class=\"language-text\">for...of</code>나 <code class=\"language-text\">spread</code>를 사용 할 수 있다는 점이 큰 특징이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> val <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">yield</span> val\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//obj 는 실질적으로 빈 깡통인데 iterator만 구현 해줘서 외부 array값을 순환 할 수 있게 만들 수 있다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>obj<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//1 2 3 4 5. --> spread</span>\n\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> _val <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_val<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1,2,3,4,5 가 순서대로 출력된다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>generator 문법은 이미 포스트 해놓은 것이 있으니 생략하고, 이런식으로 <code class=\"language-text\">iterator</code>만 구현해서 외부객체를 마치 내가 가지고 있는것처럼 프로퍼티를 만들어 놓을 수가 있다.\n다시 말하지만 <code class=\"language-text\">spread</code>, <code class=\"language-text\">for...of</code>는 iterator(<code class=\"language-text\">@@iterator</code>)에 의존하게 된다.</p>","fields":{"slug":"/posts/js/js-symbol/","tagSlugs":["/tag/js/","/tag/iterator/"]},"frontmatter":{"date":"2021-09-30T15:06:06.220Z","description":"유일한 프로퍼티 키값을 만들고 싶을때.","tags":["js","iterator"],"title":"Symbol","socialImage":null}}},"pageContext":{"slug":"/posts/js/js-symbol/"}},"staticQueryHashes":["251939775","2839666046","2891173899","401334301"]}