{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/js/js-intersection-observer/","result":{"data":{"markdownRemark":{"id":"65051834-85b0-5d3e-96d1-9390fd9a333e","html":"<p>블로그를 하나씩 개선하면서 이번에 처음 <code class=\"language-text\">IntersectionObserver</code>를 써봤는데 너무 편해서 기록</p>\n<h2 id=\"intersection-observer\" style=\"position:relative;\"><a href=\"#intersection-observer\" aria-label=\"intersection observer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>InterSection Observer</h2>\n<p><code class=\"language-text\">IntersectionObserver</code>는 기본 설정값을 기준으로 설명하면 <code class=\"language-text\">viewport</code>, 그니까 현재 화면에 보여지는 영역에 특정 <code class=\"language-text\">dom element</code>가 노출되거나 사라지는 시점을 감지하는 <code class=\"language-text\">Observer</code>이다</p>\n<p>보통 무한 스크롤에 많이 쓰이긴 하지만 내 블로그에서 쓰인 경험을 바탕으로 설명하자면 PC 버전 기준으로 문서를 거의 끝까지 읽으면 우측 하단에 <code class=\"language-text\">Up</code> 버튼이 표출되는 기능이 있다. <code class=\"language-text\">IntersectionObserver</code>적용 전에는 스크롤 이벤트를 추가해서 문서 위치 정보를 판단해서 <code class=\"language-text\">Up</code>버튼 표출 여부를 결정했다</p>\n<p>기존 코드 일부분</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleScroll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> windowBottomY <span class=\"token operator\">=</span> window<span class=\"token operator\">?.</span>scrollY <span class=\"token operator\">+</span> window<span class=\"token operator\">?.</span>innerHeight<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span>windowBottomY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> documentY <span class=\"token operator\">=</span> refTarget<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> currentPercent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>windowBottomY <span class=\"token operator\">/</span> documentY<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 전체 문서 길이가 너무 짧으면 버튼 그냥 생략, 전체 문서의 80퍼 이상 읽으면 표출</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentPercent <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token operator\">||</span> currentPercent <span class=\"token operator\">&lt;</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsShow</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsShow</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scroll\"</span><span class=\"token punctuation\">,</span> handleScroll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scroll\"</span><span class=\"token punctuation\">,</span> handleScroll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런식으로 하였었는데, 문제점은 스크롤 이벤트에 있다. 매번 스크롤 위치가 바뀔때마다 <code class=\"language-text\">document</code>위치 정보를 가져와 표출 여부를 판단했었는데, <code class=\"language-text\">dom</code>을 직접 접근해서 하는 작업들은 많은 리소스를 사용하게 된다. 사실 블로그에 많은 기능들이 있는것도 아니고 요즘 워낙 하드웨어가 좋아 별 차이는 없지만 그래도 성능 개선을 위해 <code class=\"language-text\">IntersectionObserver</code>를 적용하였다. 기본적으로 <code class=\"language-text\">IntersectionObserver</code>는 viewport에 <code class=\"language-text\">dom element</code> 표출 여부를 감지하는 역할이지만 감지하는 것은 비동기로, 그니까 메인 스레드가 매번 감지하는 방식이 아니라 변화가 감지되면 callback을 실행하는 방식이라 이벤트 기반 프로그래밍에 맞다고 생각된다.</p>\n<blockquote>\n<p>기존 코드는 스크롤 이벤트가 발생하면 매번 <code class=\"language-text\">handleScroll</code>함수를 메인 스레드에서 실행했다. -> 너무 많이 실행됨</p>\n</blockquote>\n<p><code class=\"language-text\">IntersectionObserver</code> 사용하여 개선한 코드 일부분</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">//props 구조</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  buttonText<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  docTarget<span class=\"token operator\">:</span> RefObject<span class=\"token operator\">&lt;</span>HTMLDivElement<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  observeTarget<span class=\"token operator\">:</span> RefObject<span class=\"token operator\">&lt;</span>HTMLDivElement<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 주요 함수</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>btnEntry<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isTooShort</span><span class=\"token punctuation\">(</span>docTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsShow</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setIsShow</span><span class=\"token punctuation\">(</span>btnEntry<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>observeTarget<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> observer<span class=\"token operator\">?.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>기본적인 사용법으로 감지 할 대상(<code class=\"language-text\">IntersectionObserver.observe</code>)들을 등록하면 대상들이 viewport에 표출되거나 사라지는 시점에 callback 함수가 실행된다. 콜백 함수의 첫번째 argument는 감지하는 대상들로, 배열 형태로 넘어온다. <code class=\"language-text\">isIntersecting</code>값이 <code class=\"language-text\">true</code>면 표출 중인 상태고 <code class=\"language-text\">false</code>면 사라진 상태가 된다(위 소스에선 하나의 dom만 등록했다). 그 외 옵션값도 지정이 가능한데 자세한건 <a href=\"https://developer.mozilla.org/ko/docs/Web/API/IntersectionObserver/IntersectionObserver\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">document</a> 참고.</p>\n</blockquote>\n<p>다시한번 말하지만 <code class=\"language-text\">IntersectionObserver</code>는 특정 영역(기본값 <code class=\"language-text\">viewport</code>)에 특정 <code class=\"language-text\">dom element</code>가 표출여부를 감지하는 함수이다. 따라서 감지할 <code class=\"language-text\">observeTarget</code>을 추가하였는데, 무조건 블로그 하단에 위치하는 투명한 element를 추가하였다. 그래서 해당 dom(<code class=\"language-text\">observeTarget</code>)이 화면에 표출 중 인지 여부(<code class=\"language-text\">btnEntry.isIntersecting</code>)를 판단해서 <code class=\"language-text\">Up</code> 버튼 표출 여부를 결정하도록 개선하였더니 확실히 dom에 직접 접근하는 횟수는 확 줄어 들었다.</p>\n<p>약간 억지스럽게 한것도 있긴하지만 공부도 하게 되고, 말 그대로 react 스럽게 한것 같아 마음에 든다.</p>","fields":{"slug":"/posts/js/js-intersection-observer/","tagSlugs":["/tag/js/","/tag/react/","/tag/event-driven/"]},"frontmatter":{"date":"2020-11-18T01:32:47.518Z","description":"event driven 기반으로 하는 dom 노출 여부를 감지하는 Observer","tags":["js","react","event driven"],"title":"InterSection Observer","socialImage":null}}},"pageContext":{"slug":"/posts/js/js-intersection-observer/"}},"staticQueryHashes":["251939775","357378587","401334301"]}